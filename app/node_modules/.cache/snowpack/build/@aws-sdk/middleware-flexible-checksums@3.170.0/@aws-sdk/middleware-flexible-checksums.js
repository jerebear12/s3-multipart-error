import { HttpRequest } from '@aws-sdk/protocol-http';
import { isArrayBuffer } from '@aws-sdk/is-array-buffer';
import { AwsCrc32 } from '@aws-crypto/crc32';
import { AwsCrc32c } from '@aws-crypto/crc32c';

var ChecksumAlgorithm;
(function (ChecksumAlgorithm) {
    ChecksumAlgorithm["MD5"] = "MD5";
    ChecksumAlgorithm["CRC32"] = "CRC32";
    ChecksumAlgorithm["CRC32C"] = "CRC32C";
    ChecksumAlgorithm["SHA1"] = "SHA1";
    ChecksumAlgorithm["SHA256"] = "SHA256";
})(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
var ChecksumLocation;
(function (ChecksumLocation) {
    ChecksumLocation["HEADER"] = "header";
    ChecksumLocation["TRAILER"] = "trailer";
})(ChecksumLocation || (ChecksumLocation = {}));

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

var CLIENT_SUPPORTED_ALGORITHMS = [
    ChecksumAlgorithm.CRC32,
    ChecksumAlgorithm.CRC32C,
    ChecksumAlgorithm.SHA1,
    ChecksumAlgorithm.SHA256,
];
var PRIORITY_ORDER_ALGORITHMS = [
    ChecksumAlgorithm.CRC32,
    ChecksumAlgorithm.CRC32C,
    ChecksumAlgorithm.SHA1,
    ChecksumAlgorithm.SHA256,
];

var getChecksumAlgorithmForRequest = function (input, _a) {
    var requestChecksumRequired = _a.requestChecksumRequired, requestAlgorithmMember = _a.requestAlgorithmMember;
    if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
        return requestChecksumRequired ? ChecksumAlgorithm.MD5 : undefined;
    }
    var checksumAlgorithm = input[requestAlgorithmMember];
    if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error("The checksum algorithm \"".concat(checksumAlgorithm, "\" is not supported by the client.") +
            " Select one of ".concat(CLIENT_SUPPORTED_ALGORITHMS, "."));
    }
    return checksumAlgorithm;
};

var getChecksumLocationName = function (algorithm) {
    return algorithm === ChecksumAlgorithm.MD5 ? "content-md5" : "x-amz-checksum-".concat(algorithm.toLowerCase());
};

var hasHeader = function (header, headers) {
    var e_1, _a;
    var soughtHeader = header.toLowerCase();
    try {
        for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var headerName = _c.value;
            if (soughtHeader === headerName.toLowerCase()) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
};

var isStreaming = function (body) {
    return body !== undefined && typeof body !== "string" && !ArrayBuffer.isView(body) && !isArrayBuffer(body);
};

var selectChecksumAlgorithmFunction = function (checksumAlgorithm, config) {
    var _a;
    return ((_a = {},
        _a[ChecksumAlgorithm.MD5] = config.md5,
        _a[ChecksumAlgorithm.CRC32] = AwsCrc32,
        _a[ChecksumAlgorithm.CRC32C] = AwsCrc32c,
        _a[ChecksumAlgorithm.SHA1] = config.sha1,
        _a[ChecksumAlgorithm.SHA256] = config.sha256,
        _a)[checksumAlgorithm]);
};

var stringHasher = function (checksumAlgorithmFn, body) {
    var hash = new checksumAlgorithmFn();
    hash.update(body || "");
    return hash.digest();
};

var getChecksum = function (body, _a) {
    var streamHasher = _a.streamHasher, checksumAlgorithmFn = _a.checksumAlgorithmFn, base64Encoder = _a.base64Encoder;
    return __awaiter(void 0, void 0, void 0, function () {
        var digest, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    digest = isStreaming(body) ? streamHasher(checksumAlgorithmFn, body) : stringHasher(checksumAlgorithmFn, body);
                    _b = base64Encoder;
                    return [4, digest];
                case 1: return [2, _b.apply(void 0, [_c.sent()])];
            }
        });
    });
};

var getChecksumAlgorithmListForResponse = function (responseAlgorithms) {
    var e_1, _a;
    if (responseAlgorithms === void 0) { responseAlgorithms = []; }
    var validChecksumAlgorithms = [];
    try {
        for (var PRIORITY_ORDER_ALGORITHMS_1 = __values(PRIORITY_ORDER_ALGORITHMS), PRIORITY_ORDER_ALGORITHMS_1_1 = PRIORITY_ORDER_ALGORITHMS_1.next(); !PRIORITY_ORDER_ALGORITHMS_1_1.done; PRIORITY_ORDER_ALGORITHMS_1_1 = PRIORITY_ORDER_ALGORITHMS_1.next()) {
            var algorithm = PRIORITY_ORDER_ALGORITHMS_1_1.value;
            if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
                continue;
            }
            validChecksumAlgorithms.push(algorithm);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (PRIORITY_ORDER_ALGORITHMS_1_1 && !PRIORITY_ORDER_ALGORITHMS_1_1.done && (_a = PRIORITY_ORDER_ALGORITHMS_1.return)) _a.call(PRIORITY_ORDER_ALGORITHMS_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return validChecksumAlgorithms;
};

var validateChecksumFromResponse = function (response, _a) {
    var config = _a.config, responseAlgorithms = _a.responseAlgorithms;
    return __awaiter(void 0, void 0, void 0, function () {
        var checksumAlgorithms, responseBody, responseHeaders, checksumAlgorithms_1, checksumAlgorithms_1_1, algorithm, responseHeader, checksumFromResponse, checksumAlgorithmFn, streamHasher, base64Encoder, checksum, e_1_1;
        var e_1, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
                    responseBody = response.body, responseHeaders = response.headers;
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 6, 7, 8]);
                    checksumAlgorithms_1 = __values(checksumAlgorithms), checksumAlgorithms_1_1 = checksumAlgorithms_1.next();
                    _c.label = 2;
                case 2:
                    if (!!checksumAlgorithms_1_1.done) return [3, 5];
                    algorithm = checksumAlgorithms_1_1.value;
                    responseHeader = getChecksumLocationName(algorithm);
                    checksumFromResponse = responseHeaders[responseHeader];
                    if (!checksumFromResponse) return [3, 4];
                    checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);
                    streamHasher = config.streamHasher, base64Encoder = config.base64Encoder;
                    return [4, getChecksum(responseBody, { streamHasher: streamHasher, checksumAlgorithmFn: checksumAlgorithmFn, base64Encoder: base64Encoder })];
                case 3:
                    checksum = _c.sent();
                    if (checksum === checksumFromResponse) {
                        return [3, 5];
                    }
                    throw new Error("Checksum mismatch: expected \"".concat(checksum, "\" but received \"").concat(checksumFromResponse, "\"") +
                        " in response header \"".concat(responseHeader, "\"."));
                case 4:
                    checksumAlgorithms_1_1 = checksumAlgorithms_1.next();
                    return [3, 2];
                case 5: return [3, 8];
                case 6:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3, 8];
                case 7:
                    try {
                        if (checksumAlgorithms_1_1 && !checksumAlgorithms_1_1.done && (_b = checksumAlgorithms_1.return)) _b.call(checksumAlgorithms_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7];
                case 8: return [2];
            }
        });
    });
};

var flexibleChecksumsMiddleware = function (config, middlewareConfig) {
    return function (next) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var request, requestBody, headers, base64Encoder, streamHasher, input, requestChecksumRequired, requestAlgorithmMember, checksumAlgorithm, updatedBody, updatedHeaders, checksumLocationName, checksumAlgorithmFn, getAwsChunkedEncodingStream, bodyLengthChecker, rawChecksum, result, requestValidationModeMember, responseAlgorithms;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!HttpRequest.isInstance(args.request)) {
                            return [2, next(args)];
                        }
                        request = args.request;
                        requestBody = request.body, headers = request.headers;
                        base64Encoder = config.base64Encoder, streamHasher = config.streamHasher;
                        input = middlewareConfig.input, requestChecksumRequired = middlewareConfig.requestChecksumRequired, requestAlgorithmMember = middlewareConfig.requestAlgorithmMember;
                        checksumAlgorithm = getChecksumAlgorithmForRequest(input, {
                            requestChecksumRequired: requestChecksumRequired,
                            requestAlgorithmMember: requestAlgorithmMember,
                        });
                        updatedBody = requestBody;
                        updatedHeaders = headers;
                        if (!checksumAlgorithm) return [3, 3];
                        checksumLocationName = getChecksumLocationName(checksumAlgorithm);
                        checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);
                        if (!isStreaming(requestBody)) return [3, 1];
                        getAwsChunkedEncodingStream = config.getAwsChunkedEncodingStream, bodyLengthChecker = config.bodyLengthChecker;
                        updatedBody = getAwsChunkedEncodingStream(requestBody, {
                            base64Encoder: base64Encoder,
                            bodyLengthChecker: bodyLengthChecker,
                            checksumLocationName: checksumLocationName,
                            checksumAlgorithmFn: checksumAlgorithmFn,
                            streamHasher: streamHasher,
                        });
                        updatedHeaders = __assign(__assign({}, headers), { "content-encoding": "aws-chunked", "transfer-encoding": "chunked", "x-amz-decoded-content-length": headers["content-length"], "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER", "x-amz-trailer": checksumLocationName });
                        delete updatedHeaders["content-length"];
                        return [3, 3];
                    case 1:
                        if (!!hasHeader(checksumLocationName, headers)) return [3, 3];
                        return [4, stringHasher(checksumAlgorithmFn, requestBody)];
                    case 2:
                        rawChecksum = _b.sent();
                        updatedHeaders = __assign(__assign({}, headers), (_a = {}, _a[checksumLocationName] = base64Encoder(rawChecksum), _a));
                        _b.label = 3;
                    case 3: return [4, next(__assign(__assign({}, args), { request: __assign(__assign({}, request), { headers: updatedHeaders, body: updatedBody }) }))];
                    case 4:
                        result = _b.sent();
                        requestValidationModeMember = middlewareConfig.requestValidationModeMember, responseAlgorithms = middlewareConfig.responseAlgorithms;
                        if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
                            validateChecksumFromResponse(result.response, {
                                config: config,
                                responseAlgorithms: responseAlgorithms,
                            });
                        }
                        return [2, result];
                }
            });
        }); };
    };
};

var flexibleChecksumsMiddlewareOptions = {
    name: "flexibleChecksumsMiddleware",
    step: "build",
    tags: ["BODY_CHECKSUM"],
    override: true,
};
var getFlexibleChecksumsPlugin = function (config, middlewareConfig) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(flexibleChecksumsMiddleware(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);
    },
}); };

export { ChecksumAlgorithm, ChecksumLocation, flexibleChecksumsMiddleware, flexibleChecksumsMiddlewareOptions, getFlexibleChecksumsPlugin };
