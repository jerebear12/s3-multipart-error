import { getBucketEndpointPlugin, resolveBucketEndpointConfig } from '@aws-sdk/middleware-bucket-endpoint';
import { getSerdePlugin } from '@aws-sdk/middleware-serde';
import { ServiceException, SENSITIVE_STRING, resolvedPath, dateToUtcString, throwDefaultError, decorateServiceException, getValueFromTextNode, expectString, parseBoolean, expectNonNull, expectObject, parseRfc7231DateTime, getArrayIfSingleItem, strictParseLong, strictParseInt32, parseRfc3339DateTime, map as map$1, expectUnion, Command, loadConfigsForDefaultMode, Client } from '@aws-sdk/smithy-client';
import { HttpRequest, isValidHostname } from '@aws-sdk/protocol-http';
import { XmlNode, XmlText } from '@aws-sdk/xml-builder';
import { decodeHTML } from 'entities';
import { parse } from 'fast-xml-parser';
import { getThrow200ExceptionsPlugin, getCheckContentLengthHeaderPlugin, getWriteGetObjectResponseEndpointPlugin, getValidateBucketNamePlugin } from '@aws-sdk/middleware-sdk-s3';
import { getSsecPlugin } from '@aws-sdk/middleware-ssec';
import { getLocationConstraintPlugin } from '@aws-sdk/middleware-location-constraint';
import { getFlexibleChecksumsPlugin } from '@aws-sdk/middleware-flexible-checksums';
import { getRegionInfo, DEFAULT_USE_DUALSTACK_ENDPOINT, DEFAULT_USE_FIPS_ENDPOINT, resolveRegionConfig, resolveEndpointsConfig } from '@aws-sdk/config-resolver';
import { resolveEventStreamSerdeConfig } from '@aws-sdk/eventstream-serde-config-resolver';
import { getContentLengthPlugin } from '@aws-sdk/middleware-content-length';
import { getAddExpectContinuePlugin } from '@aws-sdk/middleware-expect-continue';
import { resolveHostHeaderConfig, getHostHeaderPlugin } from '@aws-sdk/middleware-host-header';
import { getLoggerPlugin } from '@aws-sdk/middleware-logger';
import { getRecursionDetectionPlugin } from '@aws-sdk/middleware-recursion-detection';
import { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, resolveRetryConfig, getRetryPlugin } from '@aws-sdk/middleware-retry';
import { resolveAwsAuthConfig, getAwsAuthPlugin } from '@aws-sdk/middleware-signing';
import { resolveUserAgentConfig, getUserAgentPlugin } from '@aws-sdk/middleware-user-agent';
import { Sha1 } from '@aws-crypto/sha1-browser';
import { Sha256 } from '@aws-crypto/sha256-browser';
import { eventStreamSerdeProvider } from '@aws-sdk/eventstream-serde-browser';
import { FetchHttpHandler, streamCollector } from '@aws-sdk/fetch-http-handler';
import { blobHasher } from '@aws-sdk/hash-blob-browser';
import { invalidProvider } from '@aws-sdk/invalid-dependency';
import { Md5 } from '@aws-sdk/md5-js';
import { fromBase64, toBase64 } from '@aws-sdk/util-base64-browser';
import { calculateBodyLength } from '@aws-sdk/util-body-length-browser';
import { getAwsChunkedEncodingStream } from '@aws-sdk/util-stream-browser';
import { defaultUserAgent } from '@aws-sdk/util-user-agent-browser';
import { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-browser';
import { SignatureV4MultiRegion } from '@aws-sdk/signature-v4-multi-region';
import { parseUrl } from '@aws-sdk/url-parser';
import { resolveDefaultsModeConfig } from '@aws-sdk/util-defaults-mode-browser';
import { createWaiter, checkExceptions, WaiterState } from '@aws-sdk/util-waiter';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

var S3ServiceException = (function (_super) {
    __extends(S3ServiceException, _super);
    function S3ServiceException(options) {
        var _this = _super.call(this, options) || this;
        Object.setPrototypeOf(_this, S3ServiceException.prototype);
        return _this;
    }
    return S3ServiceException;
}(ServiceException));

var NoSuchUpload = (function (_super) {
    __extends(NoSuchUpload, _super);
    function NoSuchUpload(opts) {
        var _this = _super.call(this, __assign({ name: "NoSuchUpload", $fault: "client" }, opts)) || this;
        _this.name = "NoSuchUpload";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, NoSuchUpload.prototype);
        return _this;
    }
    return NoSuchUpload;
}(S3ServiceException));
var ChecksumAlgorithm;
(function (ChecksumAlgorithm) {
    ChecksumAlgorithm["CRC32"] = "CRC32";
    ChecksumAlgorithm["CRC32C"] = "CRC32C";
    ChecksumAlgorithm["SHA1"] = "SHA1";
    ChecksumAlgorithm["SHA256"] = "SHA256";
})(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
var ObjectNotInActiveTierError = (function (_super) {
    __extends(ObjectNotInActiveTierError, _super);
    function ObjectNotInActiveTierError(opts) {
        var _this = _super.call(this, __assign({ name: "ObjectNotInActiveTierError", $fault: "client" }, opts)) || this;
        _this.name = "ObjectNotInActiveTierError";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, ObjectNotInActiveTierError.prototype);
        return _this;
    }
    return ObjectNotInActiveTierError;
}(S3ServiceException));
var BucketAlreadyExists = (function (_super) {
    __extends(BucketAlreadyExists, _super);
    function BucketAlreadyExists(opts) {
        var _this = _super.call(this, __assign({ name: "BucketAlreadyExists", $fault: "client" }, opts)) || this;
        _this.name = "BucketAlreadyExists";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, BucketAlreadyExists.prototype);
        return _this;
    }
    return BucketAlreadyExists;
}(S3ServiceException));
var BucketAlreadyOwnedByYou = (function (_super) {
    __extends(BucketAlreadyOwnedByYou, _super);
    function BucketAlreadyOwnedByYou(opts) {
        var _this = _super.call(this, __assign({ name: "BucketAlreadyOwnedByYou", $fault: "client" }, opts)) || this;
        _this.name = "BucketAlreadyOwnedByYou";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, BucketAlreadyOwnedByYou.prototype);
        return _this;
    }
    return BucketAlreadyOwnedByYou;
}(S3ServiceException));
var AnalyticsFilter;
(function (AnalyticsFilter) {
    AnalyticsFilter.visit = function (value, visitor) {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AnalyticsFilter || (AnalyticsFilter = {}));
var LifecycleRuleFilter;
(function (LifecycleRuleFilter) {
    LifecycleRuleFilter.visit = function (value, visitor) {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.ObjectSizeGreaterThan !== undefined)
            return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
        if (value.ObjectSizeLessThan !== undefined)
            return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
var MetricsFilter;
(function (MetricsFilter) {
    MetricsFilter.visit = function (value, visitor) {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== undefined)
            return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(MetricsFilter || (MetricsFilter = {}));
var ReplicationRuleFilter;
(function (ReplicationRuleFilter) {
    ReplicationRuleFilter.visit = function (value, visitor) {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
var ChecksumMode;
(function (ChecksumMode) {
    ChecksumMode["ENABLED"] = "ENABLED";
})(ChecksumMode || (ChecksumMode = {}));
var InvalidObjectState = (function (_super) {
    __extends(InvalidObjectState, _super);
    function InvalidObjectState(opts) {
        var _this = _super.call(this, __assign({ name: "InvalidObjectState", $fault: "client" }, opts)) || this;
        _this.name = "InvalidObjectState";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, InvalidObjectState.prototype);
        _this.StorageClass = opts.StorageClass;
        _this.AccessTier = opts.AccessTier;
        return _this;
    }
    return InvalidObjectState;
}(S3ServiceException));
var NoSuchKey = (function (_super) {
    __extends(NoSuchKey, _super);
    function NoSuchKey(opts) {
        var _this = _super.call(this, __assign({ name: "NoSuchKey", $fault: "client" }, opts)) || this;
        _this.name = "NoSuchKey";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, NoSuchKey.prototype);
        return _this;
    }
    return NoSuchKey;
}(S3ServiceException));
var ObjectAttributes;
(function (ObjectAttributes) {
    ObjectAttributes["CHECKSUM"] = "Checksum";
    ObjectAttributes["ETAG"] = "ETag";
    ObjectAttributes["OBJECT_PARTS"] = "ObjectParts";
    ObjectAttributes["OBJECT_SIZE"] = "ObjectSize";
    ObjectAttributes["STORAGE_CLASS"] = "StorageClass";
})(ObjectAttributes || (ObjectAttributes = {}));
var NotFound = (function (_super) {
    __extends(NotFound, _super);
    function NotFound(opts) {
        var _this = _super.call(this, __assign({ name: "NotFound", $fault: "client" }, opts)) || this;
        _this.name = "NotFound";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, NotFound.prototype);
        return _this;
    }
    return NotFound;
}(S3ServiceException));
var NoSuchBucket = (function (_super) {
    __extends(NoSuchBucket, _super);
    function NoSuchBucket(opts) {
        var _this = _super.call(this, __assign({ name: "NoSuchBucket", $fault: "client" }, opts)) || this;
        _this.name = "NoSuchBucket";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, NoSuchBucket.prototype);
        return _this;
    }
    return NoSuchBucket;
}(S3ServiceException));
var AbortIncompleteMultipartUploadFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AbortMultipartUploadOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AbortMultipartUploadRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AccelerateConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GranteeFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GrantFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var OwnerFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AccessControlPolicyFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AccessControlTranslationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CompleteMultipartUploadOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
var CompletedPartFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CompletedMultipartUploadFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CompleteMultipartUploadRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
var CopyObjectResultFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CopyObjectOutputFilterSensitiveLog = function (obj) { return (__assign(__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
var CopyObjectRequestFilterSensitiveLog = function (obj) { return (__assign(__assign(__assign(__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING })), (obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING }))); };
var CreateBucketOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CreateBucketConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CreateBucketRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CreateMultipartUploadOutputFilterSensitiveLog = function (obj) { return (__assign(__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
var CreateMultipartUploadRequestFilterSensitiveLog = function (obj) { return (__assign(__assign(__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
var DeleteBucketRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketCorsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketEncryptionRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketInventoryConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketLifecycleRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketMetricsConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketOwnershipControlsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketPolicyRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketReplicationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketTaggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteBucketWebsiteRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteObjectOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteObjectRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeletedObjectFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var _ErrorFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteObjectsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ObjectIdentifierFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteObjectsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteObjectTaggingOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteObjectTaggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeletePublicAccessBlockRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketAccelerateConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketAccelerateConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketAclOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketAclRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var TagFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AnalyticsAndOperatorFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AnalyticsFilterFilterSensitiveLog = function (obj) {
    var _a;
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.And !== undefined)
        return { And: AnalyticsAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
};
var AnalyticsS3BucketDestinationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AnalyticsExportDestinationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var StorageClassAnalysisDataExportFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var StorageClassAnalysisFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var AnalyticsConfigurationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Filter && { Filter: AnalyticsFilterFilterSensitiveLog(obj.Filter) }))); };
var GetBucketAnalyticsConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.AnalyticsConfiguration && {
    AnalyticsConfiguration: AnalyticsConfigurationFilterSensitiveLog(obj.AnalyticsConfiguration),
}))); };
var GetBucketAnalyticsConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CORSRuleFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketCorsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketCorsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ServerSideEncryptionByDefaultFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.KMSMasterKeyID && { KMSMasterKeyID: SENSITIVE_STRING }))); };
var ServerSideEncryptionRuleFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.ApplyServerSideEncryptionByDefault && {
    ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault),
}))); };
var ServerSideEncryptionConfigurationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return ServerSideEncryptionRuleFilterSensitiveLog(item); }) }))); };
var GetBucketEncryptionOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.ServerSideEncryptionConfiguration && {
    ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),
}))); };
var GetBucketEncryptionRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var IntelligentTieringAndOperatorFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var IntelligentTieringFilterFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var TieringFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var IntelligentTieringConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var SSEKMSFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.KeyId && { KeyId: SENSITIVE_STRING }))); };
var SSES3FilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var InventoryEncryptionFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }))); };
var InventoryS3BucketDestinationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }))); };
var InventoryDestinationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.S3BucketDestination && {
    S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination),
}))); };
var InventoryFilterFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var InventoryScheduleFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var InventoryConfigurationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }))); };
var GetBucketInventoryConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.InventoryConfiguration && {
    InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration),
}))); };
var GetBucketInventoryConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var LifecycleExpirationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var LifecycleRuleAndOperatorFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var LifecycleRuleFilterFilterSensitiveLog = function (obj) {
    var _a;
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.ObjectSizeGreaterThan !== undefined)
        return { ObjectSizeGreaterThan: obj.ObjectSizeGreaterThan };
    if (obj.ObjectSizeLessThan !== undefined)
        return { ObjectSizeLessThan: obj.ObjectSizeLessThan };
    if (obj.And !== undefined)
        return { And: LifecycleRuleAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
};
var NoncurrentVersionExpirationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var NoncurrentVersionTransitionFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var TransitionFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var LifecycleRuleFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Filter && { Filter: LifecycleRuleFilterFilterSensitiveLog(obj.Filter) }))); };
var GetBucketLifecycleConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return LifecycleRuleFilterSensitiveLog(item); }) }))); };
var GetBucketLifecycleConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketLocationOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketLocationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var TargetGrantFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var LoggingEnabledFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketLoggingOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketLoggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var MetricsAndOperatorFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var MetricsFilterFilterSensitiveLog = function (obj) {
    var _a;
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.AccessPointArn !== undefined)
        return { AccessPointArn: obj.AccessPointArn };
    if (obj.And !== undefined)
        return { And: MetricsAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
};
var MetricsConfigurationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Filter && { Filter: MetricsFilterFilterSensitiveLog(obj.Filter) }))); };
var GetBucketMetricsConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.MetricsConfiguration && {
    MetricsConfiguration: MetricsConfigurationFilterSensitiveLog(obj.MetricsConfiguration),
}))); };
var GetBucketMetricsConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketNotificationConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var EventBridgeConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var FilterRuleFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var S3KeyFilterFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var NotificationConfigurationFilterFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var LambdaFunctionConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var QueueConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var TopicConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var NotificationConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var OwnershipControlsRuleFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var OwnershipControlsFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketOwnershipControlsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketOwnershipControlsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketPolicyOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketPolicyRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PolicyStatusFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketPolicyStatusOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketPolicyStatusRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteMarkerReplicationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var EncryptionConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ReplicationTimeValueFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var MetricsFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ReplicationTimeFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DestinationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ExistingObjectReplicationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ReplicationRuleAndOperatorFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ReplicationRuleFilterFilterSensitiveLog = function (obj) {
    var _a;
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.And !== undefined)
        return { And: ReplicationRuleAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
};
var ReplicaModificationsFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var SseKmsEncryptedObjectsFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var SourceSelectionCriteriaFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ReplicationRuleFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Filter && { Filter: ReplicationRuleFilterFilterSensitiveLog(obj.Filter) }))); };
var ReplicationConfigurationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return ReplicationRuleFilterSensitiveLog(item); }) }))); };
var GetBucketReplicationOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.ReplicationConfiguration && {
    ReplicationConfiguration: ReplicationConfigurationFilterSensitiveLog(obj.ReplicationConfiguration),
}))); };
var GetBucketReplicationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketRequestPaymentOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketRequestPaymentRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketTaggingOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketTaggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketVersioningOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketVersioningRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ErrorDocumentFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var IndexDocumentFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var RedirectAllRequestsToFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ConditionFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var RedirectFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var RoutingRuleFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketWebsiteOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetBucketWebsiteRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
var GetObjectRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
var GetObjectAclOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectAclRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ChecksumFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ObjectPartFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectAttributesPartsFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectAttributesOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectAttributesRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
var ObjectLockLegalHoldFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectLegalHoldOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectLegalHoldRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DefaultRetentionFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ObjectLockRuleFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ObjectLockConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectLockConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectLockConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ObjectLockRetentionFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectRetentionOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectRetentionRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectTaggingOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectTaggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectTorrentOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetObjectTorrentRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PublicAccessBlockConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetPublicAccessBlockOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GetPublicAccessBlockRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var HeadBucketRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var HeadObjectOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
var HeadObjectRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
var ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.AnalyticsConfigurationList && {
    AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map(function (item) {
        return AnalyticsConfigurationFilterSensitiveLog(item);
    }),
}))); };
var ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListBucketInventoryConfigurationsOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.InventoryConfigurationList && {
    InventoryConfigurationList: obj.InventoryConfigurationList.map(function (item) {
        return InventoryConfigurationFilterSensitiveLog(item);
    }),
}))); };
var ListBucketInventoryConfigurationsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListBucketMetricsConfigurationsOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.MetricsConfigurationList && {
    MetricsConfigurationList: obj.MetricsConfigurationList.map(function (item) { return MetricsConfigurationFilterSensitiveLog(item); }),
}))); };
var ListBucketMetricsConfigurationsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var BucketFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListBucketsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CommonPrefixFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var InitiatorFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var MultipartUploadFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListMultipartUploadsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListMultipartUploadsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var _ObjectFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListObjectsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListObjectsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListObjectsV2OutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListObjectsV2RequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var DeleteMarkerEntryFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ObjectVersionFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListObjectVersionsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListObjectVersionsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PartFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListPartsOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ListPartsRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
var PutBucketAccelerateConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketAclRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketAnalyticsConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.AnalyticsConfiguration && {
    AnalyticsConfiguration: AnalyticsConfigurationFilterSensitiveLog(obj.AnalyticsConfiguration),
}))); };
var CORSConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketCorsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketEncryptionRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.ServerSideEncryptionConfiguration && {
    ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),
}))); };
var PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketInventoryConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.InventoryConfiguration && {
    InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration),
}))); };
var BucketLifecycleConfigurationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Rules && { Rules: obj.Rules.map(function (item) { return LifecycleRuleFilterSensitiveLog(item); }) }))); };
var PutBucketLifecycleConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.LifecycleConfiguration && {
    LifecycleConfiguration: BucketLifecycleConfigurationFilterSensitiveLog(obj.LifecycleConfiguration),
}))); };
var BucketLoggingStatusFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketLoggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketMetricsConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.MetricsConfiguration && {
    MetricsConfiguration: MetricsConfigurationFilterSensitiveLog(obj.MetricsConfiguration),
}))); };
var PutBucketNotificationConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketOwnershipControlsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketPolicyRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketReplicationRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.ReplicationConfiguration && {
    ReplicationConfiguration: ReplicationConfigurationFilterSensitiveLog(obj.ReplicationConfiguration),
}))); };
var RequestPaymentConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketRequestPaymentRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var TaggingFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketTaggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var VersioningConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketVersioningRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var WebsiteConfigurationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutBucketWebsiteRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectOutputFilterSensitiveLog = function (obj) { return (__assign(__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
var PutObjectRequestFilterSensitiveLog = function (obj) { return (__assign(__assign(__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING })), (obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }))); };
var PutObjectAclOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectAclRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectLegalHoldOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectLegalHoldRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectLockConfigurationOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectLockConfigurationRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };

var ObjectAlreadyInActiveTierError = (function (_super) {
    __extends(ObjectAlreadyInActiveTierError, _super);
    function ObjectAlreadyInActiveTierError(opts) {
        var _this = _super.call(this, __assign({ name: "ObjectAlreadyInActiveTierError", $fault: "client" }, opts)) || this;
        _this.name = "ObjectAlreadyInActiveTierError";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, ObjectAlreadyInActiveTierError.prototype);
        return _this;
    }
    return ObjectAlreadyInActiveTierError;
}(S3ServiceException));
var FileHeaderInfo;
(function (FileHeaderInfo) {
    FileHeaderInfo["IGNORE"] = "IGNORE";
    FileHeaderInfo["NONE"] = "NONE";
    FileHeaderInfo["USE"] = "USE";
})(FileHeaderInfo || (FileHeaderInfo = {}));
var JSONType;
(function (JSONType) {
    JSONType["DOCUMENT"] = "DOCUMENT";
    JSONType["LINES"] = "LINES";
})(JSONType || (JSONType = {}));
var QuoteFields;
(function (QuoteFields) {
    QuoteFields["ALWAYS"] = "ALWAYS";
    QuoteFields["ASNEEDED"] = "ASNEEDED";
})(QuoteFields || (QuoteFields = {}));
var RestoreRequestType;
(function (RestoreRequestType) {
    RestoreRequestType["SELECT"] = "SELECT";
})(RestoreRequestType || (RestoreRequestType = {}));
var SelectObjectContentEventStream;
(function (SelectObjectContentEventStream) {
    SelectObjectContentEventStream.visit = function (value, visitor) {
        if (value.Records !== undefined)
            return visitor.Records(value.Records);
        if (value.Stats !== undefined)
            return visitor.Stats(value.Stats);
        if (value.Progress !== undefined)
            return visitor.Progress(value.Progress);
        if (value.Cont !== undefined)
            return visitor.Cont(value.Cont);
        if (value.End !== undefined)
            return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
var PutObjectRetentionOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectRetentionRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectTaggingOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutObjectTaggingRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var PutPublicAccessBlockRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var RestoreObjectOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var GlacierJobParametersFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var EncryptionFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.KMSKeyId && { KMSKeyId: SENSITIVE_STRING }))); };
var MetadataEntryFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var S3LocationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }))); };
var OutputLocationFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }))); };
var CSVInputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var JSONInputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ParquetInputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var InputSerializationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var CSVOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var JSONOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var OutputSerializationFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var SelectParametersFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var RestoreRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }))); };
var RestoreObjectRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }))); };
var ContinuationEventFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var EndEventFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ProgressFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ProgressEventFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var RecordsEventFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var StatsFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var StatsEventFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var SelectObjectContentEventStreamFilterSensitiveLog = function (obj) {
    var _a;
    if (obj.Records !== undefined)
        return { Records: RecordsEventFilterSensitiveLog(obj.Records) };
    if (obj.Stats !== undefined)
        return { Stats: StatsEventFilterSensitiveLog(obj.Stats) };
    if (obj.Progress !== undefined)
        return { Progress: ProgressEventFilterSensitiveLog(obj.Progress) };
    if (obj.Cont !== undefined)
        return { Cont: ContinuationEventFilterSensitiveLog(obj.Cont) };
    if (obj.End !== undefined)
        return { End: EndEventFilterSensitiveLog(obj.End) };
    if (obj.$unknown !== undefined)
        return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
};
var SelectObjectContentOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Payload && { Payload: "STREAMING_CONTENT" }))); };
var RequestProgressFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var ScanRangeFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var SelectObjectContentRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
var UploadPartOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
var UploadPartRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }))); };
var CopyPartResultFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
var UploadPartCopyOutputFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };
var UploadPartCopyRequestFilterSensitiveLog = function (obj) { return (__assign(__assign(__assign({}, obj), (obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING })), (obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING }))); };
var WriteGetObjectResponseRequestFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }))); };

var serializeAws_restXmlAbortMultipartUploadCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "AbortMultipartUpload"],
                    uploadId: [, input.UploadId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlCompleteMultipartUploadCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-checksum-crc32": input.ChecksumCRC32,
                    "x-amz-checksum-crc32c": input.ChecksumCRC32C,
                    "x-amz-checksum-sha1": input.ChecksumSHA1,
                    "x-amz-checksum-sha256": input.ChecksumSHA256,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "CompleteMultipartUpload"],
                    uploadId: [, input.UploadId],
                });
                if (input.MultipartUpload !== undefined) {
                    body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload);
                }
                if (input.MultipartUpload !== undefined) {
                    contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload);
                    contents = contents.withName("CompleteMultipartUpload");
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlCopyObjectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, __assign({ "x-amz-acl": input.ACL, "cache-control": input.CacheControl, "x-amz-checksum-algorithm": input.ChecksumAlgorithm, "content-disposition": input.ContentDisposition, "content-encoding": input.ContentEncoding, "content-language": input.ContentLanguage, "content-type": input.ContentType, "x-amz-copy-source": input.CopySource, "x-amz-copy-source-if-match": input.CopySourceIfMatch, "x-amz-copy-source-if-modified-since": [
                        function () { return isSerializableHeaderValue(input.CopySourceIfModifiedSince); },
                        function () { return dateToUtcString(input.CopySourceIfModifiedSince).toString(); },
                    ], "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch, "x-amz-copy-source-if-unmodified-since": [
                        function () { return isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince); },
                        function () { return dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(); },
                    ], expires: [function () { return isSerializableHeaderValue(input.Expires); }, function () { return dateToUtcString(input.Expires).toString(); }], "x-amz-grant-full-control": input.GrantFullControl, "x-amz-grant-read": input.GrantRead, "x-amz-grant-read-acp": input.GrantReadACP, "x-amz-grant-write-acp": input.GrantWriteACP, "x-amz-metadata-directive": input.MetadataDirective, "x-amz-tagging-directive": input.TaggingDirective, "x-amz-server-side-encryption": input.ServerSideEncryption, "x-amz-storage-class": input.StorageClass, "x-amz-website-redirect-location": input.WebsiteRedirectLocation, "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm, "x-amz-server-side-encryption-customer-key": input.SSECustomerKey, "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5, "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId, "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext, "x-amz-server-side-encryption-bucket-key-enabled": [
                        function () { return isSerializableHeaderValue(input.BucketKeyEnabled); },
                        function () { return input.BucketKeyEnabled.toString(); },
                    ], "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm, "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey, "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5, "x-amz-request-payer": input.RequestPayer, "x-amz-tagging": input.Tagging, "x-amz-object-lock-mode": input.ObjectLockMode, "x-amz-object-lock-retain-until-date": [
                        function () { return isSerializableHeaderValue(input.ObjectLockRetainUntilDate); },
                        function () { return (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(); },
                    ], "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus, "x-amz-expected-bucket-owner": input.ExpectedBucketOwner, "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner }, (input.Metadata !== undefined &&
                    Object.keys(input.Metadata).reduce(function (acc, suffix) {
                        var _a;
                        return (__assign(__assign({}, acc), (_a = {}, _a["x-amz-meta-".concat(suffix.toLowerCase())] = input.Metadata[suffix], _a)));
                    }, {}))));
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "CopyObject"],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlCreateBucketCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-acl": input.ACL,
                    "x-amz-grant-full-control": input.GrantFullControl,
                    "x-amz-grant-read": input.GrantRead,
                    "x-amz-grant-read-acp": input.GrantReadACP,
                    "x-amz-grant-write": input.GrantWrite,
                    "x-amz-grant-write-acp": input.GrantWriteACP,
                    "x-amz-bucket-object-lock-enabled": [
                        function () { return isSerializableHeaderValue(input.ObjectLockEnabledForBucket); },
                        function () { return input.ObjectLockEnabledForBucket.toString(); },
                    ],
                    "x-amz-object-ownership": input.ObjectOwnership,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                if (input.CreateBucketConfiguration !== undefined) {
                    body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration);
                }
                if (input.CreateBucketConfiguration !== undefined) {
                    contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlCreateMultipartUploadCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, __assign({ "x-amz-acl": input.ACL, "cache-control": input.CacheControl, "content-disposition": input.ContentDisposition, "content-encoding": input.ContentEncoding, "content-language": input.ContentLanguage, "content-type": input.ContentType, expires: [function () { return isSerializableHeaderValue(input.Expires); }, function () { return dateToUtcString(input.Expires).toString(); }], "x-amz-grant-full-control": input.GrantFullControl, "x-amz-grant-read": input.GrantRead, "x-amz-grant-read-acp": input.GrantReadACP, "x-amz-grant-write-acp": input.GrantWriteACP, "x-amz-server-side-encryption": input.ServerSideEncryption, "x-amz-storage-class": input.StorageClass, "x-amz-website-redirect-location": input.WebsiteRedirectLocation, "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm, "x-amz-server-side-encryption-customer-key": input.SSECustomerKey, "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5, "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId, "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext, "x-amz-server-side-encryption-bucket-key-enabled": [
                        function () { return isSerializableHeaderValue(input.BucketKeyEnabled); },
                        function () { return input.BucketKeyEnabled.toString(); },
                    ], "x-amz-request-payer": input.RequestPayer, "x-amz-tagging": input.Tagging, "x-amz-object-lock-mode": input.ObjectLockMode, "x-amz-object-lock-retain-until-date": [
                        function () { return isSerializableHeaderValue(input.ObjectLockRetainUntilDate); },
                        function () { return (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(); },
                    ], "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus, "x-amz-expected-bucket-owner": input.ExpectedBucketOwner, "x-amz-checksum-algorithm": input.ChecksumAlgorithm }, (input.Metadata !== undefined &&
                    Object.keys(input.Metadata).reduce(function (acc, suffix) {
                        var _a;
                        return (__assign(__assign({}, acc), (_a = {}, _a["x-amz-meta-".concat(suffix.toLowerCase())] = input.Metadata[suffix], _a)));
                    }, {}))));
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    uploads: [, ""],
                    "x-id": [, "CreateMultipartUpload"],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    analytics: [, ""],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketCorsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    cors: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketEncryptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    encryption: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    "intelligent-tiering": [, ""],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    inventory: [, ""],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketLifecycleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    lifecycle: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    metrics: [, ""],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketOwnershipControlsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    ownershipControls: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    policy: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketReplicationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    replication: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketTaggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    tagging: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteBucketWebsiteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    website: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteObjectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-mfa": input.MFA,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-bypass-governance-retention": [
                        function () { return isSerializableHeaderValue(input.BypassGovernanceRetention); },
                        function () { return input.BypassGovernanceRetention.toString(); },
                    ],
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "DeleteObject"],
                    versionId: [, input.VersionId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteObjectsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-mfa": input.MFA,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-bypass-governance-retention": [
                        function () { return isSerializableHeaderValue(input.BypassGovernanceRetention); },
                        function () { return input.BypassGovernanceRetention.toString(); },
                    ],
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    delete: [, ""],
                    "x-id": [, "DeleteObjects"],
                });
                if (input.Delete !== undefined) {
                    body = serializeAws_restXmlDelete(input.Delete);
                }
                if (input.Delete !== undefined) {
                    contents = serializeAws_restXmlDelete(input.Delete);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeleteObjectTaggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    tagging: [, ""],
                    versionId: [, input.VersionId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlDeletePublicAccessBlockCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    publicAccessBlock: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketAccelerateConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    accelerate: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketAclCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    acl: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    analytics: [, ""],
                    "x-id": [, "GetBucketAnalyticsConfiguration"],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketCorsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    cors: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketEncryptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    encryption: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    "intelligent-tiering": [, ""],
                    "x-id": [, "GetBucketIntelligentTieringConfiguration"],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketInventoryConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    inventory: [, ""],
                    "x-id": [, "GetBucketInventoryConfiguration"],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketLifecycleConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    lifecycle: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketLocationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    location: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketLoggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    logging: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketMetricsConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    metrics: [, ""],
                    "x-id": [, "GetBucketMetricsConfiguration"],
                    id: [, input.Id],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketNotificationConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    notification: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketOwnershipControlsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    ownershipControls: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    policy: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketPolicyStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    policyStatus: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketReplicationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    replication: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketRequestPaymentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    requestPayment: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketTaggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    tagging: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketVersioningCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    versioning: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetBucketWebsiteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    website: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "if-match": input.IfMatch,
                    "if-modified-since": [
                        function () { return isSerializableHeaderValue(input.IfModifiedSince); },
                        function () { return dateToUtcString(input.IfModifiedSince).toString(); },
                    ],
                    "if-none-match": input.IfNoneMatch,
                    "if-unmodified-since": [
                        function () { return isSerializableHeaderValue(input.IfUnmodifiedSince); },
                        function () { return dateToUtcString(input.IfUnmodifiedSince).toString(); },
                    ],
                    range: input.Range,
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-checksum-mode": input.ChecksumMode,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "GetObject"],
                    "response-cache-control": [, input.ResponseCacheControl],
                    "response-content-disposition": [, input.ResponseContentDisposition],
                    "response-content-encoding": [, input.ResponseContentEncoding],
                    "response-content-language": [, input.ResponseContentLanguage],
                    "response-content-type": [, input.ResponseContentType],
                    "response-expires": [
                        function () { return input.ResponseExpires !== void 0; },
                        function () { return dateToUtcString(input.ResponseExpires).toString(); },
                    ],
                    versionId: [, input.VersionId],
                    partNumber: [function () { return input.PartNumber !== void 0; }, function () { return input.PartNumber.toString(); }],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectAclCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    acl: [, ""],
                    versionId: [, input.VersionId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-max-parts": [function () { return isSerializableHeaderValue(input.MaxParts); }, function () { return input.MaxParts.toString(); }],
                    "x-amz-part-number-marker": input.PartNumberMarker,
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-object-attributes": [
                        function () { return isSerializableHeaderValue(input.ObjectAttributes); },
                        function () { return (input.ObjectAttributes || []).map(function (_entry) { return _entry; }).join(", "); },
                    ],
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    attributes: [, ""],
                    versionId: [, input.VersionId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectLegalHoldCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "legal-hold": [, ""],
                    versionId: [, input.VersionId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectLockConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    "object-lock": [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectRetentionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    retention: [, ""],
                    versionId: [, input.VersionId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectTaggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-request-payer": input.RequestPayer,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    tagging: [, ""],
                    versionId: [, input.VersionId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetObjectTorrentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    torrent: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlGetPublicAccessBlockCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    publicAccessBlock: [, ""],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlHeadBucketCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "HEAD",
                        headers: headers,
                        path: resolvedPath$1,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlHeadObjectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "if-match": input.IfMatch,
                    "if-modified-since": [
                        function () { return isSerializableHeaderValue(input.IfModifiedSince); },
                        function () { return dateToUtcString(input.IfModifiedSince).toString(); },
                    ],
                    "if-none-match": input.IfNoneMatch,
                    "if-unmodified-since": [
                        function () { return isSerializableHeaderValue(input.IfUnmodifiedSince); },
                        function () { return dateToUtcString(input.IfUnmodifiedSince).toString(); },
                    ],
                    range: input.Range,
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-checksum-mode": input.ChecksumMode,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    versionId: [, input.VersionId],
                    partNumber: [function () { return input.PartNumber !== void 0; }, function () { return input.PartNumber.toString(); }],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "HEAD",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    analytics: [, ""],
                    "x-id": [, "ListBucketAnalyticsConfigurations"],
                    "continuation-token": [, input.ContinuationToken],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    "intelligent-tiering": [, ""],
                    "x-id": [, "ListBucketIntelligentTieringConfigurations"],
                    "continuation-token": [, input.ContinuationToken],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListBucketInventoryConfigurationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    inventory: [, ""],
                    "x-id": [, "ListBucketInventoryConfigurations"],
                    "continuation-token": [, input.ContinuationToken],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListBucketMetricsConfigurationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    metrics: [, ""],
                    "x-id": [, "ListBucketMetricsConfigurations"],
                    "continuation-token": [, input.ContinuationToken],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListBucketsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/";
                body = "";
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListMultipartUploadsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    uploads: [, ""],
                    delimiter: [, input.Delimiter],
                    "encoding-type": [, input.EncodingType],
                    "key-marker": [, input.KeyMarker],
                    "max-uploads": [function () { return input.MaxUploads !== void 0; }, function () { return input.MaxUploads.toString(); }],
                    prefix: [, input.Prefix],
                    "upload-id-marker": [, input.UploadIdMarker],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListObjectsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    delimiter: [, input.Delimiter],
                    "encoding-type": [, input.EncodingType],
                    marker: [, input.Marker],
                    "max-keys": [function () { return input.MaxKeys !== void 0; }, function () { return input.MaxKeys.toString(); }],
                    prefix: [, input.Prefix],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListObjectsV2Command = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    "list-type": [, "2"],
                    delimiter: [, input.Delimiter],
                    "encoding-type": [, input.EncodingType],
                    "max-keys": [function () { return input.MaxKeys !== void 0; }, function () { return input.MaxKeys.toString(); }],
                    prefix: [, input.Prefix],
                    "continuation-token": [, input.ContinuationToken],
                    "fetch-owner": [function () { return input.FetchOwner !== void 0; }, function () { return input.FetchOwner.toString(); }],
                    "start-after": [, input.StartAfter],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListObjectVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    versions: [, ""],
                    delimiter: [, input.Delimiter],
                    "encoding-type": [, input.EncodingType],
                    "key-marker": [, input.KeyMarker],
                    "max-keys": [function () { return input.MaxKeys !== void 0; }, function () { return input.MaxKeys.toString(); }],
                    prefix: [, input.Prefix],
                    "version-id-marker": [, input.VersionIdMarker],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlListPartsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "ListParts"],
                    "max-parts": [function () { return input.MaxParts !== void 0; }, function () { return input.MaxParts.toString(); }],
                    "part-number-marker": [, input.PartNumberMarker],
                    uploadId: [, input.UploadId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketAccelerateConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    accelerate: [, ""],
                });
                if (input.AccelerateConfiguration !== undefined) {
                    body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration);
                }
                if (input.AccelerateConfiguration !== undefined) {
                    contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketAclCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-acl": input.ACL,
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-grant-full-control": input.GrantFullControl,
                    "x-amz-grant-read": input.GrantRead,
                    "x-amz-grant-read-acp": input.GrantReadACP,
                    "x-amz-grant-write": input.GrantWrite,
                    "x-amz-grant-write-acp": input.GrantWriteACP,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    acl: [, ""],
                });
                if (input.AccessControlPolicy !== undefined) {
                    body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy);
                }
                if (input.AccessControlPolicy !== undefined) {
                    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    analytics: [, ""],
                    id: [, input.Id],
                });
                if (input.AnalyticsConfiguration !== undefined) {
                    body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration);
                }
                if (input.AnalyticsConfiguration !== undefined) {
                    contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketCorsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    cors: [, ""],
                });
                if (input.CORSConfiguration !== undefined) {
                    body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration);
                }
                if (input.CORSConfiguration !== undefined) {
                    contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketEncryptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    encryption: [, ""],
                });
                if (input.ServerSideEncryptionConfiguration !== undefined) {
                    body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration);
                }
                if (input.ServerSideEncryptionConfiguration !== undefined) {
                    contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    "intelligent-tiering": [, ""],
                    id: [, input.Id],
                });
                if (input.IntelligentTieringConfiguration !== undefined) {
                    body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration);
                }
                if (input.IntelligentTieringConfiguration !== undefined) {
                    contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketInventoryConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    inventory: [, ""],
                    id: [, input.Id],
                });
                if (input.InventoryConfiguration !== undefined) {
                    body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration);
                }
                if (input.InventoryConfiguration !== undefined) {
                    contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketLifecycleConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    lifecycle: [, ""],
                });
                if (input.LifecycleConfiguration !== undefined) {
                    body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration);
                }
                if (input.LifecycleConfiguration !== undefined) {
                    contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration);
                    contents = contents.withName("LifecycleConfiguration");
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketLoggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    logging: [, ""],
                });
                if (input.BucketLoggingStatus !== undefined) {
                    body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus);
                }
                if (input.BucketLoggingStatus !== undefined) {
                    contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketMetricsConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    metrics: [, ""],
                    id: [, input.Id],
                });
                if (input.MetricsConfiguration !== undefined) {
                    body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration);
                }
                if (input.MetricsConfiguration !== undefined) {
                    contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketNotificationConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-skip-destination-validation": [
                        function () { return isSerializableHeaderValue(input.SkipDestinationValidation); },
                        function () { return input.SkipDestinationValidation.toString(); },
                    ],
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    notification: [, ""],
                });
                if (input.NotificationConfiguration !== undefined) {
                    body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration);
                }
                if (input.NotificationConfiguration !== undefined) {
                    contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketOwnershipControlsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    ownershipControls: [, ""],
                });
                if (input.OwnershipControls !== undefined) {
                    body = serializeAws_restXmlOwnershipControls(input.OwnershipControls);
                }
                if (input.OwnershipControls !== undefined) {
                    contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "text/plain",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-confirm-remove-self-bucket-access": [
                        function () { return isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess); },
                        function () { return input.ConfirmRemoveSelfBucketAccess.toString(); },
                    ],
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    policy: [, ""],
                });
                if (input.Policy !== undefined) {
                    body = input.Policy;
                }
                if (input.Policy !== undefined) {
                    contents = input.Policy;
                    body = contents;
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketReplicationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-bucket-object-lock-token": input.Token,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    replication: [, ""],
                });
                if (input.ReplicationConfiguration !== undefined) {
                    body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration);
                }
                if (input.ReplicationConfiguration !== undefined) {
                    contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketRequestPaymentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    requestPayment: [, ""],
                });
                if (input.RequestPaymentConfiguration !== undefined) {
                    body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration);
                }
                if (input.RequestPaymentConfiguration !== undefined) {
                    contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketTaggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    tagging: [, ""],
                });
                if (input.Tagging !== undefined) {
                    body = serializeAws_restXmlTagging(input.Tagging);
                }
                if (input.Tagging !== undefined) {
                    contents = serializeAws_restXmlTagging(input.Tagging);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketVersioningCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-mfa": input.MFA,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    versioning: [, ""],
                });
                if (input.VersioningConfiguration !== undefined) {
                    body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration);
                }
                if (input.VersioningConfiguration !== undefined) {
                    contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutBucketWebsiteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    website: [, ""],
                });
                if (input.WebsiteConfiguration !== undefined) {
                    body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration);
                }
                if (input.WebsiteConfiguration !== undefined) {
                    contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutObjectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, __assign({ "content-type": input.ContentType || "application/octet-stream", "x-amz-acl": input.ACL, "cache-control": input.CacheControl, "content-disposition": input.ContentDisposition, "content-encoding": input.ContentEncoding, "content-language": input.ContentLanguage, "content-length": [function () { return isSerializableHeaderValue(input.ContentLength); }, function () { return input.ContentLength.toString(); }], "content-md5": input.ContentMD5, "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm, "x-amz-checksum-crc32": input.ChecksumCRC32, "x-amz-checksum-crc32c": input.ChecksumCRC32C, "x-amz-checksum-sha1": input.ChecksumSHA1, "x-amz-checksum-sha256": input.ChecksumSHA256, expires: [function () { return isSerializableHeaderValue(input.Expires); }, function () { return dateToUtcString(input.Expires).toString(); }], "x-amz-grant-full-control": input.GrantFullControl, "x-amz-grant-read": input.GrantRead, "x-amz-grant-read-acp": input.GrantReadACP, "x-amz-grant-write-acp": input.GrantWriteACP, "x-amz-server-side-encryption": input.ServerSideEncryption, "x-amz-storage-class": input.StorageClass, "x-amz-website-redirect-location": input.WebsiteRedirectLocation, "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm, "x-amz-server-side-encryption-customer-key": input.SSECustomerKey, "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5, "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId, "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext, "x-amz-server-side-encryption-bucket-key-enabled": [
                        function () { return isSerializableHeaderValue(input.BucketKeyEnabled); },
                        function () { return input.BucketKeyEnabled.toString(); },
                    ], "x-amz-request-payer": input.RequestPayer, "x-amz-tagging": input.Tagging, "x-amz-object-lock-mode": input.ObjectLockMode, "x-amz-object-lock-retain-until-date": [
                        function () { return isSerializableHeaderValue(input.ObjectLockRetainUntilDate); },
                        function () { return (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(); },
                    ], "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus, "x-amz-expected-bucket-owner": input.ExpectedBucketOwner }, (input.Metadata !== undefined &&
                    Object.keys(input.Metadata).reduce(function (acc, suffix) {
                        var _a;
                        return (__assign(__assign({}, acc), (_a = {}, _a["x-amz-meta-".concat(suffix.toLowerCase())] = input.Metadata[suffix], _a)));
                    }, {}))));
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "PutObject"],
                });
                if (input.Body !== undefined) {
                    body = input.Body;
                }
                if (input.Body !== undefined) {
                    contents = input.Body;
                    body = contents;
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutObjectAclCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-acl": input.ACL,
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-grant-full-control": input.GrantFullControl,
                    "x-amz-grant-read": input.GrantRead,
                    "x-amz-grant-read-acp": input.GrantReadACP,
                    "x-amz-grant-write": input.GrantWrite,
                    "x-amz-grant-write-acp": input.GrantWriteACP,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    acl: [, ""],
                    versionId: [, input.VersionId],
                });
                if (input.AccessControlPolicy !== undefined) {
                    body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy);
                }
                if (input.AccessControlPolicy !== undefined) {
                    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutObjectLegalHoldCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-request-payer": input.RequestPayer,
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "legal-hold": [, ""],
                    versionId: [, input.VersionId],
                });
                if (input.LegalHold !== undefined) {
                    body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold);
                }
                if (input.LegalHold !== undefined) {
                    contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold);
                    contents = contents.withName("LegalHold");
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutObjectLockConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-bucket-object-lock-token": input.Token,
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    "object-lock": [, ""],
                });
                if (input.ObjectLockConfiguration !== undefined) {
                    body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration);
                }
                if (input.ObjectLockConfiguration !== undefined) {
                    contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutObjectRetentionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-bypass-governance-retention": [
                        function () { return isSerializableHeaderValue(input.BypassGovernanceRetention); },
                        function () { return input.BypassGovernanceRetention.toString(); },
                    ],
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    retention: [, ""],
                    versionId: [, input.VersionId],
                });
                if (input.Retention !== undefined) {
                    body = serializeAws_restXmlObjectLockRetention(input.Retention);
                }
                if (input.Retention !== undefined) {
                    contents = serializeAws_restXmlObjectLockRetention(input.Retention);
                    contents = contents.withName("Retention");
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutObjectTaggingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-request-payer": input.RequestPayer,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    tagging: [, ""],
                    versionId: [, input.VersionId],
                });
                if (input.Tagging !== undefined) {
                    body = serializeAws_restXmlTagging(input.Tagging);
                }
                if (input.Tagging !== undefined) {
                    contents = serializeAws_restXmlTagging(input.Tagging);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlPutPublicAccessBlockCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                query = map({
                    publicAccessBlock: [, ""],
                });
                if (input.PublicAccessBlockConfiguration !== undefined) {
                    body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration);
                }
                if (input.PublicAccessBlockConfiguration !== undefined) {
                    contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlRestoreObjectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    restore: [, ""],
                    "x-id": [, "RestoreObject"],
                    versionId: [, input.VersionId],
                });
                if (input.RestoreRequest !== undefined) {
                    body = serializeAws_restXmlRestoreRequest(input.RestoreRequest);
                }
                if (input.RestoreRequest !== undefined) {
                    contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest);
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    body += contents.toString();
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlSelectObjectContentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, bodyNode, node, node, node, node, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/xml",
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    select: [, ""],
                    "select-type": [, "2"],
                    "x-id": [, "SelectObjectContent"],
                });
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new XmlNode("SelectObjectContentRequest");
                bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                if (input.Expression !== undefined) {
                    node = XmlNode.of("Expression", input.Expression).withName("Expression");
                    bodyNode.addChildNode(node);
                }
                if (input.ExpressionType !== undefined) {
                    node = XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
                    bodyNode.addChildNode(node);
                }
                if (input.InputSerialization !== undefined) {
                    node = serializeAws_restXmlInputSerialization(input.InputSerialization).withName("InputSerialization");
                    bodyNode.addChildNode(node);
                }
                if (input.OutputSerialization !== undefined) {
                    node = serializeAws_restXmlOutputSerialization(input.OutputSerialization).withName("OutputSerialization");
                    bodyNode.addChildNode(node);
                }
                if (input.RequestProgress !== undefined) {
                    node = serializeAws_restXmlRequestProgress(input.RequestProgress).withName("RequestProgress");
                    bodyNode.addChildNode(node);
                }
                if (input.ScanRange !== undefined) {
                    node = serializeAws_restXmlScanRange(input.ScanRange).withName("ScanRange");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlUploadPartCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "content-type": "application/octet-stream",
                    "content-length": [function () { return isSerializableHeaderValue(input.ContentLength); }, function () { return input.ContentLength.toString(); }],
                    "content-md5": input.ContentMD5,
                    "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
                    "x-amz-checksum-crc32": input.ChecksumCRC32,
                    "x-amz-checksum-crc32c": input.ChecksumCRC32C,
                    "x-amz-checksum-sha1": input.ChecksumSHA1,
                    "x-amz-checksum-sha256": input.ChecksumSHA256,
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "UploadPart"],
                    partNumber: [function () { return input.PartNumber !== void 0; }, function () { return input.PartNumber.toString(); }],
                    uploadId: [, input.UploadId],
                });
                if (input.Body !== undefined) {
                    body = input.Body;
                }
                if (input.Body !== undefined) {
                    contents = input.Body;
                    body = contents;
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlUploadPartCopyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath$1, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, {
                    "x-amz-copy-source": input.CopySource,
                    "x-amz-copy-source-if-match": input.CopySourceIfMatch,
                    "x-amz-copy-source-if-modified-since": [
                        function () { return isSerializableHeaderValue(input.CopySourceIfModifiedSince); },
                        function () { return dateToUtcString(input.CopySourceIfModifiedSince).toString(); },
                    ],
                    "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
                    "x-amz-copy-source-if-unmodified-since": [
                        function () { return isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince); },
                        function () { return dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(); },
                    ],
                    "x-amz-copy-source-range": input.CopySourceRange,
                    "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
                    "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
                    "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
                    "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
                    "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
                    "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
                    "x-amz-request-payer": input.RequestPayer,
                    "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
                    "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner,
                });
                resolvedPath$1 = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/{Bucket}/{Key+}";
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", function () { return input.Bucket; }, "{Bucket}", false);
                resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", function () { return input.Key; }, "{Key+}", true);
                query = map({
                    "x-id": [, "UploadPartCopy"],
                    partNumber: [function () { return input.PartNumber !== void 0; }, function () { return input.PartNumber.toString(); }],
                    uploadId: [, input.UploadId],
                });
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath$1,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restXmlWriteGetObjectResponseCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, _b, protocol, port, basePath, headers, resolvedPath, query, body, contents, resolvedHostname;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = map({}, isSerializableHeaderValue, __assign({ "x-amz-content-sha256": "UNSIGNED-PAYLOAD", "content-type": "application/octet-stream", "x-amz-request-route": input.RequestRoute, "x-amz-request-token": input.RequestToken, "x-amz-fwd-status": [function () { return isSerializableHeaderValue(input.StatusCode); }, function () { return input.StatusCode.toString(); }], "x-amz-fwd-error-code": input.ErrorCode, "x-amz-fwd-error-message": input.ErrorMessage, "x-amz-fwd-header-accept-ranges": input.AcceptRanges, "x-amz-fwd-header-cache-control": input.CacheControl, "x-amz-fwd-header-content-disposition": input.ContentDisposition, "x-amz-fwd-header-content-encoding": input.ContentEncoding, "x-amz-fwd-header-content-language": input.ContentLanguage, "content-length": [function () { return isSerializableHeaderValue(input.ContentLength); }, function () { return input.ContentLength.toString(); }], "x-amz-fwd-header-content-range": input.ContentRange, "x-amz-fwd-header-content-type": input.ContentType, "x-amz-fwd-header-x-amz-checksum-crc32": input.ChecksumCRC32, "x-amz-fwd-header-x-amz-checksum-crc32c": input.ChecksumCRC32C, "x-amz-fwd-header-x-amz-checksum-sha1": input.ChecksumSHA1, "x-amz-fwd-header-x-amz-checksum-sha256": input.ChecksumSHA256, "x-amz-fwd-header-x-amz-delete-marker": [
                        function () { return isSerializableHeaderValue(input.DeleteMarker); },
                        function () { return input.DeleteMarker.toString(); },
                    ], "x-amz-fwd-header-etag": input.ETag, "x-amz-fwd-header-expires": [
                        function () { return isSerializableHeaderValue(input.Expires); },
                        function () { return dateToUtcString(input.Expires).toString(); },
                    ], "x-amz-fwd-header-x-amz-expiration": input.Expiration, "x-amz-fwd-header-last-modified": [
                        function () { return isSerializableHeaderValue(input.LastModified); },
                        function () { return dateToUtcString(input.LastModified).toString(); },
                    ], "x-amz-fwd-header-x-amz-missing-meta": [
                        function () { return isSerializableHeaderValue(input.MissingMeta); },
                        function () { return input.MissingMeta.toString(); },
                    ], "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode, "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus, "x-amz-fwd-header-x-amz-object-lock-retain-until-date": [
                        function () { return isSerializableHeaderValue(input.ObjectLockRetainUntilDate); },
                        function () { return (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(); },
                    ], "x-amz-fwd-header-x-amz-mp-parts-count": [
                        function () { return isSerializableHeaderValue(input.PartsCount); },
                        function () { return input.PartsCount.toString(); },
                    ], "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus, "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged, "x-amz-fwd-header-x-amz-restore": input.Restore, "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption, "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm, "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId, "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5, "x-amz-fwd-header-x-amz-storage-class": input.StorageClass, "x-amz-fwd-header-x-amz-tagging-count": [
                        function () { return isSerializableHeaderValue(input.TagCount); },
                        function () { return input.TagCount.toString(); },
                    ], "x-amz-fwd-header-x-amz-version-id": input.VersionId, "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": [
                        function () { return isSerializableHeaderValue(input.BucketKeyEnabled); },
                        function () { return input.BucketKeyEnabled.toString(); },
                    ] }, (input.Metadata !== undefined &&
                    Object.keys(input.Metadata).reduce(function (acc, suffix) {
                        var _a;
                        return (__assign(__assign({}, acc), (_a = {}, _a["x-amz-meta-".concat(suffix.toLowerCase())] = input.Metadata[suffix], _a)));
                    }, {}))));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/WriteGetObjectResponse";
                query = map({
                    "x-id": [, "WriteGetObjectResponse"],
                });
                if (input.Body !== undefined) {
                    body = input.Body;
                }
                if (input.Body !== undefined) {
                    contents = input.Body;
                    body = contents;
                }
                return [4, context.endpoint()];
            case 2:
                resolvedHostname = (_c.sent()).hostname;
                if (context.disableHostPrefix !== true) {
                    resolvedHostname = "{RequestRoute}." + resolvedHostname;
                    if (input.RequestRoute === undefined) {
                        throw new Error("Empty value provided for input host prefix: RequestRoute.");
                    }
                    resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
                    if (!isValidHostname(resolvedHostname)) {
                        throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
                    }
                }
                return [2, new HttpRequest({
                        protocol: protocol,
                        hostname: resolvedHostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var deserializeAws_restXmlAbortMultipartUploadCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlAbortMultipartUploadCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlAbortMultipartUploadCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NoSuchUpload": return [3, 2];
                    case "com.amazonaws.s3#NoSuchUpload": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNoSuchUploadResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlCompleteMultipartUploadCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Expiration: [, output.headers["x-amz-expiration"]],
                    ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
                    VersionId: [, output.headers["x-amz-version-id"]],
                    SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
                    BucketKeyEnabled: [
                        function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                        function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
                    ],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Bucket"] !== undefined) {
                    contents.Bucket = expectString(data["Bucket"]);
                }
                if (data["ChecksumCRC32"] !== undefined) {
                    contents.ChecksumCRC32 = expectString(data["ChecksumCRC32"]);
                }
                if (data["ChecksumCRC32C"] !== undefined) {
                    contents.ChecksumCRC32C = expectString(data["ChecksumCRC32C"]);
                }
                if (data["ChecksumSHA1"] !== undefined) {
                    contents.ChecksumSHA1 = expectString(data["ChecksumSHA1"]);
                }
                if (data["ChecksumSHA256"] !== undefined) {
                    contents.ChecksumSHA256 = expectString(data["ChecksumSHA256"]);
                }
                if (data["ETag"] !== undefined) {
                    contents.ETag = expectString(data["ETag"]);
                }
                if (data["Key"] !== undefined) {
                    contents.Key = expectString(data["Key"]);
                }
                if (data["Location"] !== undefined) {
                    contents.Location = expectString(data["Location"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCompleteMultipartUploadCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlCopyObjectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCopyObjectCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Expiration: [, output.headers["x-amz-expiration"]],
                    CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
                    VersionId: [, output.headers["x-amz-version-id"]],
                    ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
                    SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
                    SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
                    SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
                    SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
                    BucketKeyEnabled: [
                        function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                        function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
                    ],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCopyObjectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ObjectNotInActiveTierError": return [3, 2];
                    case "com.amazonaws.s3#ObjectNotInActiveTierError": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlCreateBucketCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateBucketCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateBucketCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BucketAlreadyExists": return [3, 2];
                    case "com.amazonaws.s3#BucketAlreadyExists": return [3, 2];
                    case "BucketAlreadyOwnedByYou": return [3, 4];
                    case "com.amazonaws.s3#BucketAlreadyOwnedByYou": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
var deserializeAws_restXmlCreateMultipartUploadCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateMultipartUploadCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    AbortDate: [
                        function () { return void 0 !== output.headers["x-amz-abort-date"]; },
                        function () { return expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"])); },
                    ],
                    AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
                    ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
                    SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
                    SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
                    SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
                    SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
                    BucketKeyEnabled: [
                        function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                        function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
                    ],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                    ChecksumAlgorithm: [, output.headers["x-amz-checksum-algorithm"]],
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Bucket"] !== undefined) {
                    contents.Bucket = expectString(data["Bucket"]);
                }
                if (data["Key"] !== undefined) {
                    contents.Key = expectString(data["Key"]);
                }
                if (data["UploadId"] !== undefined) {
                    contents.UploadId = expectString(data["UploadId"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateMultipartUploadCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketCorsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketCorsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketCorsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketEncryptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketEncryptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketLifecycleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketLifecycleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketReplicationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketReplicationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketTaggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketTaggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketWebsiteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteBucketWebsiteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteObjectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteObjectCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    DeleteMarker: [
                        function () { return void 0 !== output.headers["x-amz-delete-marker"]; },
                        function () { return parseBoolean(output.headers["x-amz-delete-marker"]); },
                    ],
                    VersionId: [, output.headers["x-amz-version-id"]],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteObjectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteObjectsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteObjectsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Deleted === "") {
                    contents.Deleted = [];
                }
                else if (data["Deleted"] !== undefined) {
                    contents.Deleted = deserializeAws_restXmlDeletedObjects(getArrayIfSingleItem(data["Deleted"]));
                }
                if (data.Error === "") {
                    contents.Errors = [];
                }
                else if (data["Error"] !== undefined) {
                    contents.Errors = deserializeAws_restXmlErrors(getArrayIfSingleItem(data["Error"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteObjectsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeleteObjectTaggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    VersionId: [, output.headers["x-amz-version-id"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteObjectTaggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlDeletePublicAccessBlockCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeletePublicAccessBlockCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Status"] !== undefined) {
                    contents.Status = expectString(data["Status"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketAclCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketAclCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.AccessControlList === "") {
                    contents.Grants = [];
                }
                else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) {
                    contents.Grants = deserializeAws_restXmlGrants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]));
                }
                if (data["Owner"] !== undefined) {
                    contents.Owner = deserializeAws_restXmlOwner(data["Owner"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketAclCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketCorsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketCorsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CORSRule === "") {
                    contents.CORSRules = [];
                }
                else if (data["CORSRule"] !== undefined) {
                    contents.CORSRules = deserializeAws_restXmlCORSRules(getArrayIfSingleItem(data["CORSRule"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketCorsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketEncryptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketEncryptionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketEncryptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketInventoryConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Rule === "") {
                    contents.Rules = [];
                }
                else if (data["Rule"] !== undefined) {
                    contents.Rules = deserializeAws_restXmlLifecycleRules(getArrayIfSingleItem(data["Rule"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketLocationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketLocationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["LocationConstraint"] !== undefined) {
                    contents.LocationConstraint = expectString(data["LocationConstraint"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketLocationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketLoggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketLoggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["LoggingEnabled"] !== undefined) {
                    contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data["LoggingEnabled"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketLoggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketMetricsConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketNotificationConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["EventBridgeConfiguration"] !== undefined) {
                    contents.EventBridgeConfiguration = deserializeAws_restXmlEventBridgeConfiguration(data["EventBridgeConfiguration"]);
                }
                if (data.CloudFunctionConfiguration === "") {
                    contents.LambdaFunctionConfigurations = [];
                }
                else if (data["CloudFunctionConfiguration"] !== undefined) {
                    contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(getArrayIfSingleItem(data["CloudFunctionConfiguration"]));
                }
                if (data.QueueConfiguration === "") {
                    contents.QueueConfigurations = [];
                }
                else if (data["QueueConfiguration"] !== undefined) {
                    contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(getArrayIfSingleItem(data["QueueConfiguration"]));
                }
                if (data.TopicConfiguration === "") {
                    contents.TopicConfigurations = [];
                }
                else if (data["TopicConfiguration"] !== undefined) {
                    contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(getArrayIfSingleItem(data["TopicConfiguration"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketOwnershipControlsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketOwnershipControlsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBodyString(output.body, context)];
            case 1:
                data = _a.sent();
                contents.Policy = expectString(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketPolicyStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketPolicyStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketReplicationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketReplicationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketReplicationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketRequestPaymentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Payer"] !== undefined) {
                    contents.Payer = expectString(data["Payer"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketRequestPaymentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketTaggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketTaggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.TagSet === "") {
                    contents.TagSet = [];
                }
                else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) {
                    contents.TagSet = deserializeAws_restXmlTagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketTaggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketVersioningCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketVersioningCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["MfaDelete"] !== undefined) {
                    contents.MFADelete = expectString(data["MfaDelete"]);
                }
                if (data["Status"] !== undefined) {
                    contents.Status = expectString(data["Status"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketVersioningCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetBucketWebsiteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetBucketWebsiteCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ErrorDocument"] !== undefined) {
                    contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data["ErrorDocument"]);
                }
                if (data["IndexDocument"] !== undefined) {
                    contents.IndexDocument = deserializeAws_restXmlIndexDocument(data["IndexDocument"]);
                }
                if (data["RedirectAllRequestsTo"] !== undefined) {
                    contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data["RedirectAllRequestsTo"]);
                }
                if (data.RoutingRules === "") {
                    contents.RoutingRules = [];
                }
                else if (data["RoutingRules"] !== undefined && data["RoutingRules"]["RoutingRule"] !== undefined) {
                    contents.RoutingRules = deserializeAws_restXmlRoutingRules(getArrayIfSingleItem(data["RoutingRules"]["RoutingRule"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetBucketWebsiteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetObjectCommandError(output, context)];
        }
        contents = map({
            $metadata: deserializeMetadata(output),
            DeleteMarker: [
                function () { return void 0 !== output.headers["x-amz-delete-marker"]; },
                function () { return parseBoolean(output.headers["x-amz-delete-marker"]); },
            ],
            AcceptRanges: [, output.headers["accept-ranges"]],
            Expiration: [, output.headers["x-amz-expiration"]],
            Restore: [, output.headers["x-amz-restore"]],
            LastModified: [
                function () { return void 0 !== output.headers["last-modified"]; },
                function () { return expectNonNull(parseRfc7231DateTime(output.headers["last-modified"])); },
            ],
            ContentLength: [
                function () { return void 0 !== output.headers["content-length"]; },
                function () { return strictParseLong(output.headers["content-length"]); },
            ],
            ETag: [, output.headers["etag"]],
            ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
            ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
            ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
            ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
            MissingMeta: [
                function () { return void 0 !== output.headers["x-amz-missing-meta"]; },
                function () { return strictParseInt32(output.headers["x-amz-missing-meta"]); },
            ],
            VersionId: [, output.headers["x-amz-version-id"]],
            CacheControl: [, output.headers["cache-control"]],
            ContentDisposition: [, output.headers["content-disposition"]],
            ContentEncoding: [, output.headers["content-encoding"]],
            ContentLanguage: [, output.headers["content-language"]],
            ContentRange: [, output.headers["content-range"]],
            ContentType: [, output.headers["content-type"]],
            Expires: [
                function () { return void 0 !== output.headers["expires"]; },
                function () { return expectNonNull(parseRfc7231DateTime(output.headers["expires"])); },
            ],
            WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
            ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
            SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
            SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
            SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
            BucketKeyEnabled: [
                function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
            ],
            StorageClass: [, output.headers["x-amz-storage-class"]],
            RequestCharged: [, output.headers["x-amz-request-charged"]],
            ReplicationStatus: [, output.headers["x-amz-replication-status"]],
            PartsCount: [
                function () { return void 0 !== output.headers["x-amz-mp-parts-count"]; },
                function () { return strictParseInt32(output.headers["x-amz-mp-parts-count"]); },
            ],
            TagCount: [
                function () { return void 0 !== output.headers["x-amz-tagging-count"]; },
                function () { return strictParseInt32(output.headers["x-amz-tagging-count"]); },
            ],
            ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
            ObjectLockRetainUntilDate: [
                function () { return void 0 !== output.headers["x-amz-object-lock-retain-until-date"]; },
                function () { return expectNonNull(parseRfc3339DateTime(output.headers["x-amz-object-lock-retain-until-date"])); },
            ],
            ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
            Metadata: [
                ,
                Object.keys(output.headers)
                    .filter(function (header) { return header.startsWith("x-amz-meta-"); })
                    .reduce(function (acc, header) {
                    acc[header.substring(11)] = output.headers[header];
                    return acc;
                }, {}),
            ],
        });
        data = output.body;
        contents.Body = data;
        return [2, contents];
    });
}); };
var deserializeAws_restXmlGetObjectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidObjectState": return [3, 2];
                    case "com.amazonaws.s3#InvalidObjectState": return [3, 2];
                    case "NoSuchKey": return [3, 4];
                    case "com.amazonaws.s3#NoSuchKey": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectAclCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetObjectAclCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.AccessControlList === "") {
                    contents.Grants = [];
                }
                else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) {
                    contents.Grants = deserializeAws_restXmlGrants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]));
                }
                if (data["Owner"] !== undefined) {
                    contents.Owner = deserializeAws_restXmlOwner(data["Owner"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetObjectAclCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NoSuchKey": return [3, 2];
                    case "com.amazonaws.s3#NoSuchKey": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetObjectAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    DeleteMarker: [
                        function () { return void 0 !== output.headers["x-amz-delete-marker"]; },
                        function () { return parseBoolean(output.headers["x-amz-delete-marker"]); },
                    ],
                    LastModified: [
                        function () { return void 0 !== output.headers["last-modified"]; },
                        function () { return expectNonNull(parseRfc7231DateTime(output.headers["last-modified"])); },
                    ],
                    VersionId: [, output.headers["x-amz-version-id"]],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Checksum"] !== undefined) {
                    contents.Checksum = deserializeAws_restXmlChecksum(data["Checksum"]);
                }
                if (data["ETag"] !== undefined) {
                    contents.ETag = expectString(data["ETag"]);
                }
                if (data["ObjectParts"] !== undefined) {
                    contents.ObjectParts = deserializeAws_restXmlGetObjectAttributesParts(data["ObjectParts"]);
                }
                if (data["ObjectSize"] !== undefined) {
                    contents.ObjectSize = strictParseLong(data["ObjectSize"]);
                }
                if (data["StorageClass"] !== undefined) {
                    contents.StorageClass = expectString(data["StorageClass"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetObjectAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NoSuchKey": return [3, 2];
                    case "com.amazonaws.s3#NoSuchKey": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectLegalHoldCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetObjectLegalHoldCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectLockConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetObjectLockConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectRetentionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetObjectRetentionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.Retention = deserializeAws_restXmlObjectLockRetention(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetObjectRetentionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectTaggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetObjectTaggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    VersionId: [, output.headers["x-amz-version-id"]],
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.TagSet === "") {
                    contents.TagSet = [];
                }
                else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) {
                    contents.TagSet = deserializeAws_restXmlTagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetObjectTaggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetObjectTorrentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlGetObjectTorrentCommandError(output, context)];
        }
        contents = map({
            $metadata: deserializeMetadata(output),
            RequestCharged: [, output.headers["x-amz-request-charged"]],
        });
        data = output.body;
        contents.Body = data;
        return [2, contents];
    });
}); };
var deserializeAws_restXmlGetObjectTorrentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlGetPublicAccessBlockCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetPublicAccessBlockCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlHeadBucketCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlHeadBucketCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlHeadBucketCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NotFound": return [3, 2];
                    case "com.amazonaws.s3#NotFound": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNotFoundResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlHeadObjectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlHeadObjectCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    DeleteMarker: [
                        function () { return void 0 !== output.headers["x-amz-delete-marker"]; },
                        function () { return parseBoolean(output.headers["x-amz-delete-marker"]); },
                    ],
                    AcceptRanges: [, output.headers["accept-ranges"]],
                    Expiration: [, output.headers["x-amz-expiration"]],
                    Restore: [, output.headers["x-amz-restore"]],
                    ArchiveStatus: [, output.headers["x-amz-archive-status"]],
                    LastModified: [
                        function () { return void 0 !== output.headers["last-modified"]; },
                        function () { return expectNonNull(parseRfc7231DateTime(output.headers["last-modified"])); },
                    ],
                    ContentLength: [
                        function () { return void 0 !== output.headers["content-length"]; },
                        function () { return strictParseLong(output.headers["content-length"]); },
                    ],
                    ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
                    ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
                    ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
                    ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
                    ETag: [, output.headers["etag"]],
                    MissingMeta: [
                        function () { return void 0 !== output.headers["x-amz-missing-meta"]; },
                        function () { return strictParseInt32(output.headers["x-amz-missing-meta"]); },
                    ],
                    VersionId: [, output.headers["x-amz-version-id"]],
                    CacheControl: [, output.headers["cache-control"]],
                    ContentDisposition: [, output.headers["content-disposition"]],
                    ContentEncoding: [, output.headers["content-encoding"]],
                    ContentLanguage: [, output.headers["content-language"]],
                    ContentType: [, output.headers["content-type"]],
                    Expires: [
                        function () { return void 0 !== output.headers["expires"]; },
                        function () { return expectNonNull(parseRfc7231DateTime(output.headers["expires"])); },
                    ],
                    WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
                    ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
                    SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
                    SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
                    SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
                    BucketKeyEnabled: [
                        function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                        function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
                    ],
                    StorageClass: [, output.headers["x-amz-storage-class"]],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                    ReplicationStatus: [, output.headers["x-amz-replication-status"]],
                    PartsCount: [
                        function () { return void 0 !== output.headers["x-amz-mp-parts-count"]; },
                        function () { return strictParseInt32(output.headers["x-amz-mp-parts-count"]); },
                    ],
                    ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
                    ObjectLockRetainUntilDate: [
                        function () { return void 0 !== output.headers["x-amz-object-lock-retain-until-date"]; },
                        function () { return expectNonNull(parseRfc3339DateTime(output.headers["x-amz-object-lock-retain-until-date"])); },
                    ],
                    ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
                    Metadata: [
                        ,
                        Object.keys(output.headers)
                            .filter(function (header) { return header.startsWith("x-amz-meta-"); })
                            .reduce(function (acc, header) {
                            acc[header.substring(11)] = output.headers[header];
                            return acc;
                        }, {}),
                    ],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlHeadObjectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NotFound": return [3, 2];
                    case "com.amazonaws.s3#NotFound": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNotFoundResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.AnalyticsConfiguration === "") {
                    contents.AnalyticsConfigurationList = [];
                }
                else if (data["AnalyticsConfiguration"] !== undefined) {
                    contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(getArrayIfSingleItem(data["AnalyticsConfiguration"]));
                }
                if (data["ContinuationToken"] !== undefined) {
                    contents.ContinuationToken = expectString(data["ContinuationToken"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["NextContinuationToken"] !== undefined) {
                    contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ContinuationToken"] !== undefined) {
                    contents.ContinuationToken = expectString(data["ContinuationToken"]);
                }
                if (data.IntelligentTieringConfiguration === "") {
                    contents.IntelligentTieringConfigurationList = [];
                }
                else if (data["IntelligentTieringConfiguration"] !== undefined) {
                    contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(getArrayIfSingleItem(data["IntelligentTieringConfiguration"]));
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["NextContinuationToken"] !== undefined) {
                    contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlListBucketInventoryConfigurationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ContinuationToken"] !== undefined) {
                    contents.ContinuationToken = expectString(data["ContinuationToken"]);
                }
                if (data.InventoryConfiguration === "") {
                    contents.InventoryConfigurationList = [];
                }
                else if (data["InventoryConfiguration"] !== undefined) {
                    contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(getArrayIfSingleItem(data["InventoryConfiguration"]));
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["NextContinuationToken"] !== undefined) {
                    contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlListBucketMetricsConfigurationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ContinuationToken"] !== undefined) {
                    contents.ContinuationToken = expectString(data["ContinuationToken"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data.MetricsConfiguration === "") {
                    contents.MetricsConfigurationList = [];
                }
                else if (data["MetricsConfiguration"] !== undefined) {
                    contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(getArrayIfSingleItem(data["MetricsConfiguration"]));
                }
                if (data["NextContinuationToken"] !== undefined) {
                    contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlListBucketsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListBucketsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Buckets === "") {
                    contents.Buckets = [];
                }
                else if (data["Buckets"] !== undefined && data["Buckets"]["Bucket"] !== undefined) {
                    contents.Buckets = deserializeAws_restXmlBuckets(getArrayIfSingleItem(data["Buckets"]["Bucket"]));
                }
                if (data["Owner"] !== undefined) {
                    contents.Owner = deserializeAws_restXmlOwner(data["Owner"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListBucketsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlListMultipartUploadsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListMultipartUploadsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Bucket"] !== undefined) {
                    contents.Bucket = expectString(data["Bucket"]);
                }
                if (data.CommonPrefixes === "") {
                    contents.CommonPrefixes = [];
                }
                else if (data["CommonPrefixes"] !== undefined) {
                    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
                }
                if (data["Delimiter"] !== undefined) {
                    contents.Delimiter = expectString(data["Delimiter"]);
                }
                if (data["EncodingType"] !== undefined) {
                    contents.EncodingType = expectString(data["EncodingType"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["KeyMarker"] !== undefined) {
                    contents.KeyMarker = expectString(data["KeyMarker"]);
                }
                if (data["MaxUploads"] !== undefined) {
                    contents.MaxUploads = strictParseInt32(data["MaxUploads"]);
                }
                if (data["NextKeyMarker"] !== undefined) {
                    contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
                }
                if (data["NextUploadIdMarker"] !== undefined) {
                    contents.NextUploadIdMarker = expectString(data["NextUploadIdMarker"]);
                }
                if (data["Prefix"] !== undefined) {
                    contents.Prefix = expectString(data["Prefix"]);
                }
                if (data["UploadIdMarker"] !== undefined) {
                    contents.UploadIdMarker = expectString(data["UploadIdMarker"]);
                }
                if (data.Upload === "") {
                    contents.Uploads = [];
                }
                else if (data["Upload"] !== undefined) {
                    contents.Uploads = deserializeAws_restXmlMultipartUploadList(getArrayIfSingleItem(data["Upload"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListMultipartUploadsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlListObjectsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListObjectsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CommonPrefixes === "") {
                    contents.CommonPrefixes = [];
                }
                else if (data["CommonPrefixes"] !== undefined) {
                    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
                }
                if (data.Contents === "") {
                    contents.Contents = [];
                }
                else if (data["Contents"] !== undefined) {
                    contents.Contents = deserializeAws_restXmlObjectList(getArrayIfSingleItem(data["Contents"]));
                }
                if (data["Delimiter"] !== undefined) {
                    contents.Delimiter = expectString(data["Delimiter"]);
                }
                if (data["EncodingType"] !== undefined) {
                    contents.EncodingType = expectString(data["EncodingType"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["Marker"] !== undefined) {
                    contents.Marker = expectString(data["Marker"]);
                }
                if (data["MaxKeys"] !== undefined) {
                    contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
                }
                if (data["Name"] !== undefined) {
                    contents.Name = expectString(data["Name"]);
                }
                if (data["NextMarker"] !== undefined) {
                    contents.NextMarker = expectString(data["NextMarker"]);
                }
                if (data["Prefix"] !== undefined) {
                    contents.Prefix = expectString(data["Prefix"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListObjectsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NoSuchBucket": return [3, 2];
                    case "com.amazonaws.s3#NoSuchBucket": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlListObjectsV2Command = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListObjectsV2CommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CommonPrefixes === "") {
                    contents.CommonPrefixes = [];
                }
                else if (data["CommonPrefixes"] !== undefined) {
                    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
                }
                if (data.Contents === "") {
                    contents.Contents = [];
                }
                else if (data["Contents"] !== undefined) {
                    contents.Contents = deserializeAws_restXmlObjectList(getArrayIfSingleItem(data["Contents"]));
                }
                if (data["ContinuationToken"] !== undefined) {
                    contents.ContinuationToken = expectString(data["ContinuationToken"]);
                }
                if (data["Delimiter"] !== undefined) {
                    contents.Delimiter = expectString(data["Delimiter"]);
                }
                if (data["EncodingType"] !== undefined) {
                    contents.EncodingType = expectString(data["EncodingType"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["KeyCount"] !== undefined) {
                    contents.KeyCount = strictParseInt32(data["KeyCount"]);
                }
                if (data["MaxKeys"] !== undefined) {
                    contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
                }
                if (data["Name"] !== undefined) {
                    contents.Name = expectString(data["Name"]);
                }
                if (data["NextContinuationToken"] !== undefined) {
                    contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
                }
                if (data["Prefix"] !== undefined) {
                    contents.Prefix = expectString(data["Prefix"]);
                }
                if (data["StartAfter"] !== undefined) {
                    contents.StartAfter = expectString(data["StartAfter"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListObjectsV2CommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NoSuchBucket": return [3, 2];
                    case "com.amazonaws.s3#NoSuchBucket": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlListObjectVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListObjectVersionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CommonPrefixes === "") {
                    contents.CommonPrefixes = [];
                }
                else if (data["CommonPrefixes"] !== undefined) {
                    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
                }
                if (data.DeleteMarker === "") {
                    contents.DeleteMarkers = [];
                }
                else if (data["DeleteMarker"] !== undefined) {
                    contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(getArrayIfSingleItem(data["DeleteMarker"]));
                }
                if (data["Delimiter"] !== undefined) {
                    contents.Delimiter = expectString(data["Delimiter"]);
                }
                if (data["EncodingType"] !== undefined) {
                    contents.EncodingType = expectString(data["EncodingType"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["KeyMarker"] !== undefined) {
                    contents.KeyMarker = expectString(data["KeyMarker"]);
                }
                if (data["MaxKeys"] !== undefined) {
                    contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
                }
                if (data["Name"] !== undefined) {
                    contents.Name = expectString(data["Name"]);
                }
                if (data["NextKeyMarker"] !== undefined) {
                    contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
                }
                if (data["NextVersionIdMarker"] !== undefined) {
                    contents.NextVersionIdMarker = expectString(data["NextVersionIdMarker"]);
                }
                if (data["Prefix"] !== undefined) {
                    contents.Prefix = expectString(data["Prefix"]);
                }
                if (data["VersionIdMarker"] !== undefined) {
                    contents.VersionIdMarker = expectString(data["VersionIdMarker"]);
                }
                if (data.Version === "") {
                    contents.Versions = [];
                }
                else if (data["Version"] !== undefined) {
                    contents.Versions = deserializeAws_restXmlObjectVersionList(getArrayIfSingleItem(data["Version"]));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListObjectVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlListPartsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListPartsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    AbortDate: [
                        function () { return void 0 !== output.headers["x-amz-abort-date"]; },
                        function () { return expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"])); },
                    ],
                    AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                _a = expectNonNull;
                _b = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Bucket"] !== undefined) {
                    contents.Bucket = expectString(data["Bucket"]);
                }
                if (data["ChecksumAlgorithm"] !== undefined) {
                    contents.ChecksumAlgorithm = expectString(data["ChecksumAlgorithm"]);
                }
                if (data["Initiator"] !== undefined) {
                    contents.Initiator = deserializeAws_restXmlInitiator(data["Initiator"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = parseBoolean(data["IsTruncated"]);
                }
                if (data["Key"] !== undefined) {
                    contents.Key = expectString(data["Key"]);
                }
                if (data["MaxParts"] !== undefined) {
                    contents.MaxParts = strictParseInt32(data["MaxParts"]);
                }
                if (data["NextPartNumberMarker"] !== undefined) {
                    contents.NextPartNumberMarker = expectString(data["NextPartNumberMarker"]);
                }
                if (data["Owner"] !== undefined) {
                    contents.Owner = deserializeAws_restXmlOwner(data["Owner"]);
                }
                if (data["PartNumberMarker"] !== undefined) {
                    contents.PartNumberMarker = expectString(data["PartNumberMarker"]);
                }
                if (data.Part === "") {
                    contents.Parts = [];
                }
                else if (data["Part"] !== undefined) {
                    contents.Parts = deserializeAws_restXmlParts(getArrayIfSingleItem(data["Part"]));
                }
                if (data["StorageClass"] !== undefined) {
                    contents.StorageClass = expectString(data["StorageClass"]);
                }
                if (data["UploadId"] !== undefined) {
                    contents.UploadId = expectString(data["UploadId"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListPartsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketAclCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketAclCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketAclCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketCorsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketCorsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketCorsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketEncryptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketEncryptionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketEncryptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketInventoryConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketLoggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketLoggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketLoggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketMetricsConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketNotificationConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketOwnershipControlsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketOwnershipControlsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketReplicationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketReplicationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketReplicationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketRequestPaymentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketRequestPaymentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketTaggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketTaggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketTaggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketVersioningCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketVersioningCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketVersioningCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutBucketWebsiteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutBucketWebsiteCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutBucketWebsiteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutObjectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutObjectCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Expiration: [, output.headers["x-amz-expiration"]],
                    ETag: [, output.headers["etag"]],
                    ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
                    ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
                    ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
                    ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
                    ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
                    VersionId: [, output.headers["x-amz-version-id"]],
                    SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
                    SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
                    SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
                    SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
                    BucketKeyEnabled: [
                        function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                        function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
                    ],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutObjectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutObjectAclCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutObjectAclCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutObjectAclCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "NoSuchKey": return [3, 2];
                    case "com.amazonaws.s3#NoSuchKey": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlPutObjectLegalHoldCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutObjectLegalHoldCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutObjectLockConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutObjectLockConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutObjectRetentionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutObjectRetentionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutObjectRetentionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutObjectTaggingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutObjectTaggingCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    VersionId: [, output.headers["x-amz-version-id"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutObjectTaggingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlPutPublicAccessBlockCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlPutPublicAccessBlockCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlRestoreObjectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlRestoreObjectCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                    RestoreOutputPath: [, output.headers["x-amz-restore-output-path"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlRestoreObjectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ObjectAlreadyInActiveTierError": return [3, 2];
                    case "com.amazonaws.s3#ObjectAlreadyInActiveTierError": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
var deserializeAws_restXmlSelectObjectContentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restXmlSelectObjectContentCommandError(output, context)];
        }
        contents = map({
            $metadata: deserializeMetadata(output),
        });
        data = output.body;
        contents.Payload = deserializeAws_restXmlSelectObjectContentEventStream(data, context);
        return [2, contents];
    });
}); };
var deserializeAws_restXmlSelectObjectContentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlUploadPartCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlUploadPartCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
                    ETag: [, output.headers["etag"]],
                    ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
                    ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
                    ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
                    ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
                    SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
                    SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
                    SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
                    BucketKeyEnabled: [
                        function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                        function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
                    ],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlUploadPartCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlUploadPartCopyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlUploadPartCopyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
                    ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
                    SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
                    SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
                    SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
                    BucketKeyEnabled: [
                        function () { return void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"]; },
                        function () { return parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]); },
                    ],
                    RequestCharged: [, output.headers["x-amz-request-charged"]],
                });
                _a = expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlUploadPartCopyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var deserializeAws_restXmlWriteGetObjectResponseCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlWriteGetObjectResponseCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: S3ServiceException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
var map = map$1;
var deserializeAws_restXmlBucketAlreadyExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new BucketAlreadyExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new BucketAlreadyOwnedByYou(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlInvalidObjectStateResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data["AccessTier"] !== undefined) {
            contents.AccessTier = expectString(data["AccessTier"]);
        }
        if (data["StorageClass"] !== undefined) {
            contents.StorageClass = expectString(data["StorageClass"]);
        }
        exception = new InvalidObjectState(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlNoSuchBucketResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new NoSuchBucket(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlNoSuchKeyResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new NoSuchKey(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlNoSuchUploadResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new NoSuchUpload(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlNotFoundResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new NotFound(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new ObjectAlreadyInActiveTierError(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlObjectNotInActiveTierErrorResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, exception;
    return __generator(this, function (_a) {
        contents = map({});
        parsedOutput.body;
        exception = new ObjectNotInActiveTierError(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restXmlSelectObjectContentEventStream = function (output, context) {
    return context.eventStreamMarshaller.deserialize(output, function (event) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (!(event["Records"] != null)) return [3, 2];
                    _a = {};
                    return [4, deserializeAws_restXmlRecordsEvent_event(event["Records"])];
                case 1: return [2, (_a.Records = _f.sent(),
                        _a)];
                case 2:
                    if (!(event["Stats"] != null)) return [3, 4];
                    _b = {};
                    return [4, deserializeAws_restXmlStatsEvent_event(event["Stats"], context)];
                case 3: return [2, (_b.Stats = _f.sent(),
                        _b)];
                case 4:
                    if (!(event["Progress"] != null)) return [3, 6];
                    _c = {};
                    return [4, deserializeAws_restXmlProgressEvent_event(event["Progress"], context)];
                case 5: return [2, (_c.Progress = _f.sent(),
                        _c)];
                case 6:
                    if (!(event["Cont"] != null)) return [3, 8];
                    _d = {};
                    return [4, deserializeAws_restXmlContinuationEvent_event(event["Cont"], context)];
                case 7: return [2, (_d.Cont = _f.sent(),
                        _d)];
                case 8:
                    if (!(event["End"] != null)) return [3, 10];
                    _e = {};
                    return [4, deserializeAws_restXmlEndEvent_event(event["End"], context)];
                case 9: return [2, (_e.End = _f.sent(),
                        _e)];
                case 10: return [2, { $unknown: output }];
            }
        });
    }); });
};
var deserializeAws_restXmlContinuationEvent_event = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                contents = {};
                return [4, parseBody(output.body, context)];
            case 1:
                _a.sent();
                Object.assign(contents, deserializeAws_restXmlContinuationEvent());
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlEndEvent_event = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                contents = {};
                return [4, parseBody(output.body, context)];
            case 1:
                _a.sent();
                Object.assign(contents, deserializeAws_restXmlEndEvent());
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlProgressEvent_event = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                contents = {};
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents.Details = deserializeAws_restXmlProgress(data);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlRecordsEvent_event = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        contents = {};
        contents.Payload = output.body;
        return [2, contents];
    });
}); };
var deserializeAws_restXmlStatsEvent_event = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                contents = {};
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents.Details = deserializeAws_restXmlStats(data);
                return [2, contents];
        }
    });
}); };
var serializeAws_restXmlAbortIncompleteMultipartUpload = function (input, context) {
    var bodyNode = new XmlNode("AbortIncompleteMultipartUpload");
    if (input.DaysAfterInitiation != null) {
        var node = XmlNode.of("DaysAfterInitiation", String(input.DaysAfterInitiation)).withName("DaysAfterInitiation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAccelerateConfiguration = function (input, context) {
    var bodyNode = new XmlNode("AccelerateConfiguration");
    if (input.Status != null) {
        var node = XmlNode.of("BucketAccelerateStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAccessControlPolicy = function (input, context) {
    var bodyNode = new XmlNode("AccessControlPolicy");
    if (input.Grants != null) {
        var nodes = serializeAws_restXmlGrants(input.Grants);
        var containerNode_1 = new XmlNode("AccessControlList");
        nodes.map(function (node) {
            containerNode_1.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_1);
    }
    if (input.Owner != null) {
        var node = serializeAws_restXmlOwner(input.Owner).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAccessControlTranslation = function (input, context) {
    var bodyNode = new XmlNode("AccessControlTranslation");
    if (input.Owner != null) {
        var node = XmlNode.of("OwnerOverride", input.Owner).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAllowedHeaders = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = XmlNode.of("AllowedHeader", entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlAllowedMethods = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = XmlNode.of("AllowedMethod", entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlAllowedOrigins = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = XmlNode.of("AllowedOrigin", entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlAnalyticsAndOperator = function (input, context) {
    var bodyNode = new XmlNode("AnalyticsAndOperator");
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags);
        nodes.map(function (node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlAnalyticsConfiguration = function (input, context) {
    var bodyNode = new XmlNode("AnalyticsConfiguration");
    if (input.Id != null) {
        var node = XmlNode.of("AnalyticsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlAnalyticsFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClassAnalysis != null) {
        var node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis).withName("StorageClassAnalysis");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAnalyticsExportDestination = function (input, context) {
    var bodyNode = new XmlNode("AnalyticsExportDestination");
    if (input.S3BucketDestination != null) {
        var node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAnalyticsFilter = function (input, context) {
    var bodyNode = new XmlNode("AnalyticsFilter");
    AnalyticsFilter.visit(input, {
        Prefix: function (value) {
            var node = XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function (value) {
            var node = serializeAws_restXmlTag(value).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: function (value) {
            var node = serializeAws_restXmlAnalyticsAndOperator(value).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function (name, value) {
            if (!(value instanceof XmlNode || value instanceof XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
var serializeAws_restXmlAnalyticsS3BucketDestination = function (input, context) {
    var bodyNode = new XmlNode("AnalyticsS3BucketDestination");
    if (input.Format != null) {
        var node = XmlNode.of("AnalyticsS3ExportFileFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.BucketAccountId != null) {
        var node = XmlNode.of("AccountId", input.BucketAccountId).withName("BucketAccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
        var node = XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlBucketLifecycleConfiguration = function (input, context) {
    var bodyNode = new XmlNode("BucketLifecycleConfiguration");
    if (input.Rules != null) {
        var nodes = serializeAws_restXmlLifecycleRules(input.Rules);
        nodes.map(function (node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlBucketLoggingStatus = function (input, context) {
    var bodyNode = new XmlNode("BucketLoggingStatus");
    if (input.LoggingEnabled != null) {
        var node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled).withName("LoggingEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCompletedMultipartUpload = function (input, context) {
    var bodyNode = new XmlNode("CompletedMultipartUpload");
    if (input.Parts != null) {
        var nodes = serializeAws_restXmlCompletedPartList(input.Parts);
        nodes.map(function (node) {
            node = node.withName("Part");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlCompletedPart = function (input, context) {
    var bodyNode = new XmlNode("CompletedPart");
    if (input.ETag != null) {
        var node = XmlNode.of("ETag", input.ETag).withName("ETag");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32 != null) {
        var node = XmlNode.of("ChecksumCRC32", input.ChecksumCRC32).withName("ChecksumCRC32");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32C != null) {
        var node = XmlNode.of("ChecksumCRC32C", input.ChecksumCRC32C).withName("ChecksumCRC32C");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA1 != null) {
        var node = XmlNode.of("ChecksumSHA1", input.ChecksumSHA1).withName("ChecksumSHA1");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA256 != null) {
        var node = XmlNode.of("ChecksumSHA256", input.ChecksumSHA256).withName("ChecksumSHA256");
        bodyNode.addChildNode(node);
    }
    if (input.PartNumber != null) {
        var node = XmlNode.of("PartNumber", String(input.PartNumber)).withName("PartNumber");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCompletedPartList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlCompletedPart(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlCondition = function (input, context) {
    var bodyNode = new XmlNode("Condition");
    if (input.HttpErrorCodeReturnedEquals != null) {
        var node = XmlNode
            .of("HttpErrorCodeReturnedEquals", input.HttpErrorCodeReturnedEquals)
            .withName("HttpErrorCodeReturnedEquals");
        bodyNode.addChildNode(node);
    }
    if (input.KeyPrefixEquals != null) {
        var node = XmlNode.of("KeyPrefixEquals", input.KeyPrefixEquals).withName("KeyPrefixEquals");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCORSConfiguration = function (input, context) {
    var bodyNode = new XmlNode("CORSConfiguration");
    if (input.CORSRules != null) {
        var nodes = serializeAws_restXmlCORSRules(input.CORSRules);
        nodes.map(function (node) {
            node = node.withName("CORSRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlCORSRule = function (input, context) {
    var bodyNode = new XmlNode("CORSRule");
    if (input.ID != null) {
        var node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.AllowedHeaders != null) {
        var nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders);
        nodes.map(function (node) {
            node = node.withName("AllowedHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedMethods != null) {
        var nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods);
        nodes.map(function (node) {
            node = node.withName("AllowedMethod");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedOrigins != null) {
        var nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins);
        nodes.map(function (node) {
            node = node.withName("AllowedOrigin");
            bodyNode.addChildNode(node);
        });
    }
    if (input.ExposeHeaders != null) {
        var nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders);
        nodes.map(function (node) {
            node = node.withName("ExposeHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.MaxAgeSeconds != null) {
        var node = XmlNode.of("MaxAgeSeconds", String(input.MaxAgeSeconds)).withName("MaxAgeSeconds");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCORSRules = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlCORSRule(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlCreateBucketConfiguration = function (input, context) {
    var bodyNode = new XmlNode("CreateBucketConfiguration");
    if (input.LocationConstraint != null) {
        var node = XmlNode.of("BucketLocationConstraint", input.LocationConstraint).withName("LocationConstraint");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCSVInput = function (input, context) {
    var bodyNode = new XmlNode("CSVInput");
    if (input.FileHeaderInfo != null) {
        var node = XmlNode.of("FileHeaderInfo", input.FileHeaderInfo).withName("FileHeaderInfo");
        bodyNode.addChildNode(node);
    }
    if (input.Comments != null) {
        var node = XmlNode.of("Comments", input.Comments).withName("Comments");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
        var node = XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
        var node = XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
        var node = XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
        var node = XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.AllowQuotedRecordDelimiter != null) {
        var node = XmlNode
            .of("AllowQuotedRecordDelimiter", String(input.AllowQuotedRecordDelimiter))
            .withName("AllowQuotedRecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCSVOutput = function (input, context) {
    var bodyNode = new XmlNode("CSVOutput");
    if (input.QuoteFields != null) {
        var node = XmlNode.of("QuoteFields", input.QuoteFields).withName("QuoteFields");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
        var node = XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
        var node = XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
        var node = XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
        var node = XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDefaultRetention = function (input, context) {
    var bodyNode = new XmlNode("DefaultRetention");
    if (input.Mode != null) {
        var node = XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        var node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.Years != null) {
        var node = XmlNode.of("Years", String(input.Years)).withName("Years");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDelete = function (input, context) {
    var bodyNode = new XmlNode("Delete");
    if (input.Objects != null) {
        var nodes = serializeAws_restXmlObjectIdentifierList(input.Objects);
        nodes.map(function (node) {
            node = node.withName("Object");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Quiet != null) {
        var node = XmlNode.of("Quiet", String(input.Quiet)).withName("Quiet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDeleteMarkerReplication = function (input, context) {
    var bodyNode = new XmlNode("DeleteMarkerReplication");
    if (input.Status != null) {
        var node = XmlNode.of("DeleteMarkerReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDestination = function (input, context) {
    var bodyNode = new XmlNode("Destination");
    if (input.Bucket != null) {
        var node = XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Account != null) {
        var node = XmlNode.of("AccountId", input.Account).withName("Account");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        var node = XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlTranslation != null) {
        var node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation).withName("AccessControlTranslation");
        bodyNode.addChildNode(node);
    }
    if (input.EncryptionConfiguration != null) {
        var node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration).withName("EncryptionConfiguration");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicationTime != null) {
        var node = serializeAws_restXmlReplicationTime(input.ReplicationTime).withName("ReplicationTime");
        bodyNode.addChildNode(node);
    }
    if (input.Metrics != null) {
        var node = serializeAws_restXmlMetrics(input.Metrics).withName("Metrics");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlEncryption = function (input, context) {
    var bodyNode = new XmlNode("Encryption");
    if (input.EncryptionType != null) {
        var node = XmlNode.of("ServerSideEncryption", input.EncryptionType).withName("EncryptionType");
        bodyNode.addChildNode(node);
    }
    if (input.KMSKeyId != null) {
        var node = XmlNode.of("SSEKMSKeyId", input.KMSKeyId).withName("KMSKeyId");
        bodyNode.addChildNode(node);
    }
    if (input.KMSContext != null) {
        var node = XmlNode.of("KMSContext", input.KMSContext).withName("KMSContext");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlEncryptionConfiguration = function (input, context) {
    var bodyNode = new XmlNode("EncryptionConfiguration");
    if (input.ReplicaKmsKeyID != null) {
        var node = XmlNode.of("ReplicaKmsKeyID", input.ReplicaKmsKeyID).withName("ReplicaKmsKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlErrorDocument = function (input, context) {
    var bodyNode = new XmlNode("ErrorDocument");
    if (input.Key != null) {
        var node = XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlEventBridgeConfiguration = function (input, context) {
    var bodyNode = new XmlNode("EventBridgeConfiguration");
    return bodyNode;
};
var serializeAws_restXmlEventList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = XmlNode.of("Event", entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlExistingObjectReplication = function (input, context) {
    var bodyNode = new XmlNode("ExistingObjectReplication");
    if (input.Status != null) {
        var node = XmlNode.of("ExistingObjectReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlExposeHeaders = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = XmlNode.of("ExposeHeader", entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlFilterRule = function (input, context) {
    var bodyNode = new XmlNode("FilterRule");
    if (input.Name != null) {
        var node = XmlNode.of("FilterRuleName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        var node = XmlNode.of("FilterRuleValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlFilterRuleList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlFilterRule(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlGlacierJobParameters = function (input, context) {
    var bodyNode = new XmlNode("GlacierJobParameters");
    if (input.Tier != null) {
        var node = XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlGrant = function (input, context) {
    var bodyNode = new XmlNode("Grant");
    if (input.Grantee != null) {
        var node = serializeAws_restXmlGrantee(input.Grantee).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
        var node = XmlNode.of("Permission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlGrantee = function (input, context) {
    var bodyNode = new XmlNode("Grantee");
    if (input.DisplayName != null) {
        var node = XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.EmailAddress != null) {
        var node = XmlNode.of("EmailAddress", input.EmailAddress).withName("EmailAddress");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        var node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.URI != null) {
        var node = XmlNode.of("URI", input.URI).withName("URI");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        bodyNode.addAttribute("xsi:type", input.Type);
    }
    return bodyNode;
};
var serializeAws_restXmlGrants = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlGrant(entry);
        return node.withName("Grant");
    });
};
var serializeAws_restXmlIndexDocument = function (input, context) {
    var bodyNode = new XmlNode("IndexDocument");
    if (input.Suffix != null) {
        var node = XmlNode.of("Suffix", input.Suffix).withName("Suffix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInputSerialization = function (input, context) {
    var bodyNode = new XmlNode("InputSerialization");
    if (input.CSV != null) {
        var node = serializeAws_restXmlCSVInput(input.CSV).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.CompressionType != null) {
        var node = XmlNode.of("CompressionType", input.CompressionType).withName("CompressionType");
        bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
        var node = serializeAws_restXmlJSONInput(input.JSON).withName("JSON");
        bodyNode.addChildNode(node);
    }
    if (input.Parquet != null) {
        var node = serializeAws_restXmlParquetInput(input.Parquet).withName("Parquet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlIntelligentTieringAndOperator = function (input, context) {
    var bodyNode = new XmlNode("IntelligentTieringAndOperator");
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags);
        nodes.map(function (node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlIntelligentTieringConfiguration = function (input, context) {
    var bodyNode = new XmlNode("IntelligentTieringConfiguration");
    if (input.Id != null) {
        var node = XmlNode.of("IntelligentTieringId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlIntelligentTieringFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        var node = XmlNode.of("IntelligentTieringStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Tierings != null) {
        var nodes = serializeAws_restXmlTieringList(input.Tierings);
        nodes.map(function (node) {
            node = node.withName("Tiering");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlIntelligentTieringFilter = function (input, context) {
    var bodyNode = new XmlNode("IntelligentTieringFilter");
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tag != null) {
        var node = serializeAws_restXmlTag(input.Tag).withName("Tag");
        bodyNode.addChildNode(node);
    }
    if (input.And != null) {
        var node = serializeAws_restXmlIntelligentTieringAndOperator(input.And).withName("And");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryConfiguration = function (input, context) {
    var bodyNode = new XmlNode("InventoryConfiguration");
    if (input.Destination != null) {
        var node = serializeAws_restXmlInventoryDestination(input.Destination).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.IsEnabled != null) {
        var node = XmlNode.of("IsEnabled", String(input.IsEnabled)).withName("IsEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlInventoryFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Id != null) {
        var node = XmlNode.of("InventoryId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.IncludedObjectVersions != null) {
        var node = XmlNode
            .of("InventoryIncludedObjectVersions", input.IncludedObjectVersions)
            .withName("IncludedObjectVersions");
        bodyNode.addChildNode(node);
    }
    if (input.OptionalFields != null) {
        var nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields);
        var containerNode_2 = new XmlNode("OptionalFields");
        nodes.map(function (node) {
            containerNode_2.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_2);
    }
    if (input.Schedule != null) {
        var node = serializeAws_restXmlInventorySchedule(input.Schedule).withName("Schedule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryDestination = function (input, context) {
    var bodyNode = new XmlNode("InventoryDestination");
    if (input.S3BucketDestination != null) {
        var node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryEncryption = function (input, context) {
    var bodyNode = new XmlNode("InventoryEncryption");
    if (input.SSES3 != null) {
        var node = serializeAws_restXmlSSES3(input.SSES3).withName("SSE-S3");
        bodyNode.addChildNode(node);
    }
    if (input.SSEKMS != null) {
        var node = serializeAws_restXmlSSEKMS(input.SSEKMS).withName("SSE-KMS");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryFilter = function (input, context) {
    var bodyNode = new XmlNode("InventoryFilter");
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryOptionalFields = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = XmlNode.of("InventoryOptionalField", entry);
        return node.withName("Field");
    });
};
var serializeAws_restXmlInventoryS3BucketDestination = function (input, context) {
    var bodyNode = new XmlNode("InventoryS3BucketDestination");
    if (input.AccountId != null) {
        var node = XmlNode.of("AccountId", input.AccountId).withName("AccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
        var node = XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Format != null) {
        var node = XmlNode.of("InventoryFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
        var node = serializeAws_restXmlInventoryEncryption(input.Encryption).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventorySchedule = function (input, context) {
    var bodyNode = new XmlNode("InventorySchedule");
    if (input.Frequency != null) {
        var node = XmlNode.of("InventoryFrequency", input.Frequency).withName("Frequency");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlJSONInput = function (input, context) {
    var bodyNode = new XmlNode("JSONInput");
    if (input.Type != null) {
        var node = XmlNode.of("JSONType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlJSONOutput = function (input, context) {
    var bodyNode = new XmlNode("JSONOutput");
    if (input.RecordDelimiter != null) {
        var node = XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLambdaFunctionConfiguration = function (input, context) {
    var bodyNode = new XmlNode("LambdaFunctionConfiguration");
    if (input.Id != null) {
        var node = XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.LambdaFunctionArn != null) {
        var node = XmlNode.of("LambdaFunctionArn", input.LambdaFunctionArn).withName("CloudFunction");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        var nodes = serializeAws_restXmlEventList(input.Events);
        nodes.map(function (node) {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLambdaFunctionConfigurationList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlLambdaFunctionConfiguration(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlLifecycleExpiration = function (input, context) {
    var bodyNode = new XmlNode("LifecycleExpiration");
    if (input.Date != null) {
        var node = XmlNode.of("Date", input.Date.toISOString().split(".")[0] + "Z").withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        var node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.ExpiredObjectDeleteMarker != null) {
        var node = XmlNode
            .of("ExpiredObjectDeleteMarker", String(input.ExpiredObjectDeleteMarker))
            .withName("ExpiredObjectDeleteMarker");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLifecycleRule = function (input, context) {
    var bodyNode = new XmlNode("LifecycleRule");
    if (input.Expiration != null) {
        var node = serializeAws_restXmlLifecycleExpiration(input.Expiration).withName("Expiration");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        var node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlLifecycleRuleFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        var node = XmlNode.of("ExpirationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Transitions != null) {
        var nodes = serializeAws_restXmlTransitionList(input.Transitions);
        nodes.map(function (node) {
            node = node.withName("Transition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionTransitions != null) {
        var nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions);
        nodes.map(function (node) {
            node = node.withName("NoncurrentVersionTransition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionExpiration != null) {
        var node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration).withName("NoncurrentVersionExpiration");
        bodyNode.addChildNode(node);
    }
    if (input.AbortIncompleteMultipartUpload != null) {
        var node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload).withName("AbortIncompleteMultipartUpload");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLifecycleRuleAndOperator = function (input, context) {
    var bodyNode = new XmlNode("LifecycleRuleAndOperator");
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags);
        nodes.map(function (node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    if (input.ObjectSizeGreaterThan != null) {
        var node = XmlNode
            .of("ObjectSizeGreaterThanBytes", String(input.ObjectSizeGreaterThan))
            .withName("ObjectSizeGreaterThan");
        bodyNode.addChildNode(node);
    }
    if (input.ObjectSizeLessThan != null) {
        var node = XmlNode
            .of("ObjectSizeLessThanBytes", String(input.ObjectSizeLessThan))
            .withName("ObjectSizeLessThan");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLifecycleRuleFilter = function (input, context) {
    var bodyNode = new XmlNode("LifecycleRuleFilter");
    LifecycleRuleFilter.visit(input, {
        Prefix: function (value) {
            var node = XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function (value) {
            var node = serializeAws_restXmlTag(value).withName("Tag");
            bodyNode.addChildNode(node);
        },
        ObjectSizeGreaterThan: function (value) {
            var node = XmlNode.of("ObjectSizeGreaterThanBytes", String(value)).withName("ObjectSizeGreaterThan");
            bodyNode.addChildNode(node);
        },
        ObjectSizeLessThan: function (value) {
            var node = XmlNode.of("ObjectSizeLessThanBytes", String(value)).withName("ObjectSizeLessThan");
            bodyNode.addChildNode(node);
        },
        And: function (value) {
            var node = serializeAws_restXmlLifecycleRuleAndOperator(value).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function (name, value) {
            if (!(value instanceof XmlNode || value instanceof XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
var serializeAws_restXmlLifecycleRules = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlLifecycleRule(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlLoggingEnabled = function (input, context) {
    var bodyNode = new XmlNode("LoggingEnabled");
    if (input.TargetBucket != null) {
        var node = XmlNode.of("TargetBucket", input.TargetBucket).withName("TargetBucket");
        bodyNode.addChildNode(node);
    }
    if (input.TargetGrants != null) {
        var nodes = serializeAws_restXmlTargetGrants(input.TargetGrants);
        var containerNode_3 = new XmlNode("TargetGrants");
        nodes.map(function (node) {
            containerNode_3.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_3);
    }
    if (input.TargetPrefix != null) {
        var node = XmlNode.of("TargetPrefix", input.TargetPrefix).withName("TargetPrefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetadataEntry = function (input, context) {
    var bodyNode = new XmlNode("MetadataEntry");
    if (input.Name != null) {
        var node = XmlNode.of("MetadataKey", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        var node = XmlNode.of("MetadataValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetrics = function (input, context) {
    var bodyNode = new XmlNode("Metrics");
    if (input.Status != null) {
        var node = XmlNode.of("MetricsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.EventThreshold != null) {
        var node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold).withName("EventThreshold");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetricsAndOperator = function (input, context) {
    var bodyNode = new XmlNode("MetricsAndOperator");
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags);
        nodes.map(function (node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AccessPointArn != null) {
        var node = XmlNode.of("AccessPointArn", input.AccessPointArn).withName("AccessPointArn");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetricsConfiguration = function (input, context) {
    var bodyNode = new XmlNode("MetricsConfiguration");
    if (input.Id != null) {
        var node = XmlNode.of("MetricsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlMetricsFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetricsFilter = function (input, context) {
    var bodyNode = new XmlNode("MetricsFilter");
    MetricsFilter.visit(input, {
        Prefix: function (value) {
            var node = XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function (value) {
            var node = serializeAws_restXmlTag(value).withName("Tag");
            bodyNode.addChildNode(node);
        },
        AccessPointArn: function (value) {
            var node = XmlNode.of("AccessPointArn", value).withName("AccessPointArn");
            bodyNode.addChildNode(node);
        },
        And: function (value) {
            var node = serializeAws_restXmlMetricsAndOperator(value).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function (name, value) {
            if (!(value instanceof XmlNode || value instanceof XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionExpiration = function (input, context) {
    var bodyNode = new XmlNode("NoncurrentVersionExpiration");
    if (input.NoncurrentDays != null) {
        var node = XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
        var node = XmlNode
            .of("VersionCount", String(input.NewerNoncurrentVersions))
            .withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionTransition = function (input, context) {
    var bodyNode = new XmlNode("NoncurrentVersionTransition");
    if (input.NoncurrentDays != null) {
        var node = XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        var node = XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
        var node = XmlNode
            .of("VersionCount", String(input.NewerNoncurrentVersions))
            .withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionTransitionList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlNoncurrentVersionTransition(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlNotificationConfiguration = function (input, context) {
    var bodyNode = new XmlNode("NotificationConfiguration");
    if (input.TopicConfigurations != null) {
        var nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations);
        nodes.map(function (node) {
            node = node.withName("TopicConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.QueueConfigurations != null) {
        var nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations);
        nodes.map(function (node) {
            node = node.withName("QueueConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.LambdaFunctionConfigurations != null) {
        var nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations);
        nodes.map(function (node) {
            node = node.withName("CloudFunctionConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.EventBridgeConfiguration != null) {
        var node = serializeAws_restXmlEventBridgeConfiguration(input.EventBridgeConfiguration).withName("EventBridgeConfiguration");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlNotificationConfigurationFilter = function (input, context) {
    var bodyNode = new XmlNode("NotificationConfigurationFilter");
    if (input.Key != null) {
        var node = serializeAws_restXmlS3KeyFilter(input.Key).withName("S3Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectIdentifier = function (input, context) {
    var bodyNode = new XmlNode("ObjectIdentifier");
    if (input.Key != null) {
        var node = XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.VersionId != null) {
        var node = XmlNode.of("ObjectVersionId", input.VersionId).withName("VersionId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectIdentifierList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlObjectIdentifier(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlObjectLockConfiguration = function (input, context) {
    var bodyNode = new XmlNode("ObjectLockConfiguration");
    if (input.ObjectLockEnabled != null) {
        var node = XmlNode.of("ObjectLockEnabled", input.ObjectLockEnabled).withName("ObjectLockEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Rule != null) {
        var node = serializeAws_restXmlObjectLockRule(input.Rule).withName("Rule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectLockLegalHold = function (input, context) {
    var bodyNode = new XmlNode("ObjectLockLegalHold");
    if (input.Status != null) {
        var node = XmlNode.of("ObjectLockLegalHoldStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectLockRetention = function (input, context) {
    var bodyNode = new XmlNode("ObjectLockRetention");
    if (input.Mode != null) {
        var node = XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.RetainUntilDate != null) {
        var node = XmlNode
            .of("Date", input.RetainUntilDate.toISOString().split(".")[0] + "Z")
            .withName("RetainUntilDate");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectLockRule = function (input, context) {
    var bodyNode = new XmlNode("ObjectLockRule");
    if (input.DefaultRetention != null) {
        var node = serializeAws_restXmlDefaultRetention(input.DefaultRetention).withName("DefaultRetention");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOutputLocation = function (input, context) {
    var bodyNode = new XmlNode("OutputLocation");
    if (input.S3 != null) {
        var node = serializeAws_restXmlS3Location(input.S3).withName("S3");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOutputSerialization = function (input, context) {
    var bodyNode = new XmlNode("OutputSerialization");
    if (input.CSV != null) {
        var node = serializeAws_restXmlCSVOutput(input.CSV).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
        var node = serializeAws_restXmlJSONOutput(input.JSON).withName("JSON");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOwner = function (input, context) {
    var bodyNode = new XmlNode("Owner");
    if (input.DisplayName != null) {
        var node = XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        var node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOwnershipControls = function (input, context) {
    var bodyNode = new XmlNode("OwnershipControls");
    if (input.Rules != null) {
        var nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules);
        nodes.map(function (node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlOwnershipControlsRule = function (input, context) {
    var bodyNode = new XmlNode("OwnershipControlsRule");
    if (input.ObjectOwnership != null) {
        var node = XmlNode.of("ObjectOwnership", input.ObjectOwnership).withName("ObjectOwnership");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOwnershipControlsRules = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlOwnershipControlsRule(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlParquetInput = function (input, context) {
    var bodyNode = new XmlNode("ParquetInput");
    return bodyNode;
};
var serializeAws_restXmlPublicAccessBlockConfiguration = function (input, context) {
    var bodyNode = new XmlNode("PublicAccessBlockConfiguration");
    if (input.BlockPublicAcls != null) {
        var node = XmlNode.of("Setting", String(input.BlockPublicAcls)).withName("BlockPublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.IgnorePublicAcls != null) {
        var node = XmlNode.of("Setting", String(input.IgnorePublicAcls)).withName("IgnorePublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.BlockPublicPolicy != null) {
        var node = XmlNode.of("Setting", String(input.BlockPublicPolicy)).withName("BlockPublicPolicy");
        bodyNode.addChildNode(node);
    }
    if (input.RestrictPublicBuckets != null) {
        var node = XmlNode.of("Setting", String(input.RestrictPublicBuckets)).withName("RestrictPublicBuckets");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlQueueConfiguration = function (input, context) {
    var bodyNode = new XmlNode("QueueConfiguration");
    if (input.Id != null) {
        var node = XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.QueueArn != null) {
        var node = XmlNode.of("QueueArn", input.QueueArn).withName("Queue");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        var nodes = serializeAws_restXmlEventList(input.Events);
        nodes.map(function (node) {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlQueueConfigurationList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlQueueConfiguration(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlRedirect = function (input, context) {
    var bodyNode = new XmlNode("Redirect");
    if (input.HostName != null) {
        var node = XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.HttpRedirectCode != null) {
        var node = XmlNode.of("HttpRedirectCode", input.HttpRedirectCode).withName("HttpRedirectCode");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
        var node = XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyPrefixWith != null) {
        var node = XmlNode.of("ReplaceKeyPrefixWith", input.ReplaceKeyPrefixWith).withName("ReplaceKeyPrefixWith");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyWith != null) {
        var node = XmlNode.of("ReplaceKeyWith", input.ReplaceKeyWith).withName("ReplaceKeyWith");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRedirectAllRequestsTo = function (input, context) {
    var bodyNode = new XmlNode("RedirectAllRequestsTo");
    if (input.HostName != null) {
        var node = XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
        var node = XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicaModifications = function (input, context) {
    var bodyNode = new XmlNode("ReplicaModifications");
    if (input.Status != null) {
        var node = XmlNode.of("ReplicaModificationsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationConfiguration = function (input, context) {
    var bodyNode = new XmlNode("ReplicationConfiguration");
    if (input.Role != null) {
        var node = XmlNode.of("Role", input.Role).withName("Role");
        bodyNode.addChildNode(node);
    }
    if (input.Rules != null) {
        var nodes = serializeAws_restXmlReplicationRules(input.Rules);
        nodes.map(function (node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationRule = function (input, context) {
    var bodyNode = new XmlNode("ReplicationRule");
    if (input.ID != null) {
        var node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Priority != null) {
        var node = XmlNode.of("Priority", String(input.Priority)).withName("Priority");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlReplicationRuleFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        var node = XmlNode.of("ReplicationRuleStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.SourceSelectionCriteria != null) {
        var node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria).withName("SourceSelectionCriteria");
        bodyNode.addChildNode(node);
    }
    if (input.ExistingObjectReplication != null) {
        var node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication).withName("ExistingObjectReplication");
        bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
        var node = serializeAws_restXmlDestination(input.Destination).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.DeleteMarkerReplication != null) {
        var node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication).withName("DeleteMarkerReplication");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationRuleAndOperator = function (input, context) {
    var bodyNode = new XmlNode("ReplicationRuleAndOperator");
    if (input.Prefix != null) {
        var node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags);
        nodes.map(function (node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationRuleFilter = function (input, context) {
    var bodyNode = new XmlNode("ReplicationRuleFilter");
    ReplicationRuleFilter.visit(input, {
        Prefix: function (value) {
            var node = XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function (value) {
            var node = serializeAws_restXmlTag(value).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: function (value) {
            var node = serializeAws_restXmlReplicationRuleAndOperator(value).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function (name, value) {
            if (!(value instanceof XmlNode || value instanceof XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
var serializeAws_restXmlReplicationRules = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlReplicationRule(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlReplicationTime = function (input, context) {
    var bodyNode = new XmlNode("ReplicationTime");
    if (input.Status != null) {
        var node = XmlNode.of("ReplicationTimeStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Time != null) {
        var node = serializeAws_restXmlReplicationTimeValue(input.Time).withName("Time");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationTimeValue = function (input, context) {
    var bodyNode = new XmlNode("ReplicationTimeValue");
    if (input.Minutes != null) {
        var node = XmlNode.of("Minutes", String(input.Minutes)).withName("Minutes");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRequestPaymentConfiguration = function (input, context) {
    var bodyNode = new XmlNode("RequestPaymentConfiguration");
    if (input.Payer != null) {
        var node = XmlNode.of("Payer", input.Payer).withName("Payer");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRequestProgress = function (input, context) {
    var bodyNode = new XmlNode("RequestProgress");
    if (input.Enabled != null) {
        var node = XmlNode.of("EnableRequestProgress", String(input.Enabled)).withName("Enabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRestoreRequest = function (input, context) {
    var bodyNode = new XmlNode("RestoreRequest");
    if (input.Days != null) {
        var node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.GlacierJobParameters != null) {
        var node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters).withName("GlacierJobParameters");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        var node = XmlNode.of("RestoreRequestType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.Tier != null) {
        var node = XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
    }
    if (input.Description != null) {
        var node = XmlNode.of("Description", input.Description).withName("Description");
        bodyNode.addChildNode(node);
    }
    if (input.SelectParameters != null) {
        var node = serializeAws_restXmlSelectParameters(input.SelectParameters).withName("SelectParameters");
        bodyNode.addChildNode(node);
    }
    if (input.OutputLocation != null) {
        var node = serializeAws_restXmlOutputLocation(input.OutputLocation).withName("OutputLocation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRoutingRule = function (input, context) {
    var bodyNode = new XmlNode("RoutingRule");
    if (input.Condition != null) {
        var node = serializeAws_restXmlCondition(input.Condition).withName("Condition");
        bodyNode.addChildNode(node);
    }
    if (input.Redirect != null) {
        var node = serializeAws_restXmlRedirect(input.Redirect).withName("Redirect");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRoutingRules = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlRoutingRule(entry);
        return node.withName("RoutingRule");
    });
};
var serializeAws_restXmlS3KeyFilter = function (input, context) {
    var bodyNode = new XmlNode("S3KeyFilter");
    if (input.FilterRules != null) {
        var nodes = serializeAws_restXmlFilterRuleList(input.FilterRules);
        nodes.map(function (node) {
            node = node.withName("FilterRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlS3Location = function (input, context) {
    var bodyNode = new XmlNode("S3Location");
    if (input.BucketName != null) {
        var node = XmlNode.of("BucketName", input.BucketName).withName("BucketName");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        var node = XmlNode.of("LocationPrefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
        var node = serializeAws_restXmlEncryption(input.Encryption).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    if (input.CannedACL != null) {
        var node = XmlNode.of("ObjectCannedACL", input.CannedACL).withName("CannedACL");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlList != null) {
        var nodes = serializeAws_restXmlGrants(input.AccessControlList);
        var containerNode_4 = new XmlNode("AccessControlList");
        nodes.map(function (node) {
            containerNode_4.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_4);
    }
    if (input.Tagging != null) {
        var node = serializeAws_restXmlTagging(input.Tagging).withName("Tagging");
        bodyNode.addChildNode(node);
    }
    if (input.UserMetadata != null) {
        var nodes = serializeAws_restXmlUserMetadata(input.UserMetadata);
        var containerNode_5 = new XmlNode("UserMetadata");
        nodes.map(function (node) {
            containerNode_5.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_5);
    }
    if (input.StorageClass != null) {
        var node = XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlScanRange = function (input, context) {
    var bodyNode = new XmlNode("ScanRange");
    if (input.Start != null) {
        var node = XmlNode.of("Start", String(input.Start)).withName("Start");
        bodyNode.addChildNode(node);
    }
    if (input.End != null) {
        var node = XmlNode.of("End", String(input.End)).withName("End");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSelectParameters = function (input, context) {
    var bodyNode = new XmlNode("SelectParameters");
    if (input.InputSerialization != null) {
        var node = serializeAws_restXmlInputSerialization(input.InputSerialization).withName("InputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.ExpressionType != null) {
        var node = XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
    }
    if (input.Expression != null) {
        var node = XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization != null) {
        var node = serializeAws_restXmlOutputSerialization(input.OutputSerialization).withName("OutputSerialization");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionByDefault = function (input, context) {
    var bodyNode = new XmlNode("ServerSideEncryptionByDefault");
    if (input.SSEAlgorithm != null) {
        var node = XmlNode.of("ServerSideEncryption", input.SSEAlgorithm).withName("SSEAlgorithm");
        bodyNode.addChildNode(node);
    }
    if (input.KMSMasterKeyID != null) {
        var node = XmlNode.of("SSEKMSKeyId", input.KMSMasterKeyID).withName("KMSMasterKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionConfiguration = function (input, context) {
    var bodyNode = new XmlNode("ServerSideEncryptionConfiguration");
    if (input.Rules != null) {
        var nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules);
        nodes.map(function (node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionRule = function (input, context) {
    var bodyNode = new XmlNode("ServerSideEncryptionRule");
    if (input.ApplyServerSideEncryptionByDefault != null) {
        var node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault).withName("ApplyServerSideEncryptionByDefault");
        bodyNode.addChildNode(node);
    }
    if (input.BucketKeyEnabled != null) {
        var node = XmlNode.of("BucketKeyEnabled", String(input.BucketKeyEnabled)).withName("BucketKeyEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionRules = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlServerSideEncryptionRule(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlSourceSelectionCriteria = function (input, context) {
    var bodyNode = new XmlNode("SourceSelectionCriteria");
    if (input.SseKmsEncryptedObjects != null) {
        var node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects).withName("SseKmsEncryptedObjects");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicaModifications != null) {
        var node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications).withName("ReplicaModifications");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSSEKMS = function (input, context) {
    var bodyNode = new XmlNode("SSE-KMS");
    if (input.KeyId != null) {
        var node = XmlNode.of("SSEKMSKeyId", input.KeyId).withName("KeyId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSseKmsEncryptedObjects = function (input, context) {
    var bodyNode = new XmlNode("SseKmsEncryptedObjects");
    if (input.Status != null) {
        var node = XmlNode.of("SseKmsEncryptedObjectsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSSES3 = function (input, context) {
    var bodyNode = new XmlNode("SSE-S3");
    return bodyNode;
};
var serializeAws_restXmlStorageClassAnalysis = function (input, context) {
    var bodyNode = new XmlNode("StorageClassAnalysis");
    if (input.DataExport != null) {
        var node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport).withName("DataExport");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlStorageClassAnalysisDataExport = function (input, context) {
    var bodyNode = new XmlNode("StorageClassAnalysisDataExport");
    if (input.OutputSchemaVersion != null) {
        var node = XmlNode
            .of("StorageClassAnalysisSchemaVersion", input.OutputSchemaVersion)
            .withName("OutputSchemaVersion");
        bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
        var node = serializeAws_restXmlAnalyticsExportDestination(input.Destination).withName("Destination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTag = function (input, context) {
    var bodyNode = new XmlNode("Tag");
    if (input.Key != null) {
        var node = XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        var node = XmlNode.of("Value", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTagging = function (input, context) {
    var bodyNode = new XmlNode("Tagging");
    if (input.TagSet != null) {
        var nodes = serializeAws_restXmlTagSet(input.TagSet);
        var containerNode_6 = new XmlNode("TagSet");
        nodes.map(function (node) {
            containerNode_6.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_6);
    }
    return bodyNode;
};
var serializeAws_restXmlTagSet = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlTag(entry);
        return node.withName("Tag");
    });
};
var serializeAws_restXmlTargetGrant = function (input, context) {
    var bodyNode = new XmlNode("TargetGrant");
    if (input.Grantee != null) {
        var node = serializeAws_restXmlGrantee(input.Grantee).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
        var node = XmlNode.of("BucketLogsPermission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTargetGrants = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlTargetGrant(entry);
        return node.withName("Grant");
    });
};
var serializeAws_restXmlTiering = function (input, context) {
    var bodyNode = new XmlNode("Tiering");
    if (input.Days != null) {
        var node = XmlNode.of("IntelligentTieringDays", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.AccessTier != null) {
        var node = XmlNode.of("IntelligentTieringAccessTier", input.AccessTier).withName("AccessTier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTieringList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlTiering(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlTopicConfiguration = function (input, context) {
    var bodyNode = new XmlNode("TopicConfiguration");
    if (input.Id != null) {
        var node = XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.TopicArn != null) {
        var node = XmlNode.of("TopicArn", input.TopicArn).withName("Topic");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        var nodes = serializeAws_restXmlEventList(input.Events);
        nodes.map(function (node) {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTopicConfigurationList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlTopicConfiguration(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlTransition = function (input, context) {
    var bodyNode = new XmlNode("Transition");
    if (input.Date != null) {
        var node = XmlNode.of("Date", input.Date.toISOString().split(".")[0] + "Z").withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        var node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        var node = XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTransitionList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlTransition(entry);
        return node.withName("member");
    });
};
var serializeAws_restXmlUserMetadata = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlMetadataEntry(entry);
        return node.withName("MetadataEntry");
    });
};
var serializeAws_restXmlVersioningConfiguration = function (input, context) {
    var bodyNode = new XmlNode("VersioningConfiguration");
    if (input.MFADelete != null) {
        var node = XmlNode.of("MFADelete", input.MFADelete).withName("MfaDelete");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        var node = XmlNode.of("BucketVersioningStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlWebsiteConfiguration = function (input, context) {
    var bodyNode = new XmlNode("WebsiteConfiguration");
    if (input.ErrorDocument != null) {
        var node = serializeAws_restXmlErrorDocument(input.ErrorDocument).withName("ErrorDocument");
        bodyNode.addChildNode(node);
    }
    if (input.IndexDocument != null) {
        var node = serializeAws_restXmlIndexDocument(input.IndexDocument).withName("IndexDocument");
        bodyNode.addChildNode(node);
    }
    if (input.RedirectAllRequestsTo != null) {
        var node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo).withName("RedirectAllRequestsTo");
        bodyNode.addChildNode(node);
    }
    if (input.RoutingRules != null) {
        var nodes = serializeAws_restXmlRoutingRules(input.RoutingRules);
        var containerNode_7 = new XmlNode("RoutingRules");
        nodes.map(function (node) {
            containerNode_7.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_7);
    }
    return bodyNode;
};
var deserializeAws_restXmlAbortIncompleteMultipartUpload = function (output, context) {
    var contents = {
        DaysAfterInitiation: undefined,
    };
    if (output["DaysAfterInitiation"] !== undefined) {
        contents.DaysAfterInitiation = strictParseInt32(output["DaysAfterInitiation"]);
    }
    return contents;
};
var deserializeAws_restXmlAccessControlTranslation = function (output, context) {
    var contents = {
        Owner: undefined,
    };
    if (output["Owner"] !== undefined) {
        contents.Owner = expectString(output["Owner"]);
    }
    return contents;
};
var deserializeAws_restXmlAllowedHeaders = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return expectString(entry);
    });
};
var deserializeAws_restXmlAllowedMethods = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return expectString(entry);
    });
};
var deserializeAws_restXmlAllowedOrigins = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return expectString(entry);
    });
};
var deserializeAws_restXmlAnalyticsAndOperator = function (output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]));
    }
    return contents;
};
var deserializeAws_restXmlAnalyticsConfiguration = function (output, context) {
    var contents = {
        Id: undefined,
        Filter: undefined,
        StorageClassAnalysis: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = expectString(output["Id"]);
    }
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlAnalyticsFilter(expectUnion(output["Filter"]));
    }
    if (output["StorageClassAnalysis"] !== undefined) {
        contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output["StorageClassAnalysis"]);
    }
    return contents;
};
var deserializeAws_restXmlAnalyticsConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlAnalyticsConfiguration(entry);
    });
};
var deserializeAws_restXmlAnalyticsExportDestination = function (output, context) {
    var contents = {
        S3BucketDestination: undefined,
    };
    if (output["S3BucketDestination"] !== undefined) {
        contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output["S3BucketDestination"]);
    }
    return contents;
};
var deserializeAws_restXmlAnalyticsFilter = function (output, context) {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: expectString(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"]),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlAnalyticsAndOperator(output["And"]),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlAnalyticsS3BucketDestination = function (output, context) {
    var contents = {
        Format: undefined,
        BucketAccountId: undefined,
        Bucket: undefined,
        Prefix: undefined,
    };
    if (output["Format"] !== undefined) {
        contents.Format = expectString(output["Format"]);
    }
    if (output["BucketAccountId"] !== undefined) {
        contents.BucketAccountId = expectString(output["BucketAccountId"]);
    }
    if (output["Bucket"] !== undefined) {
        contents.Bucket = expectString(output["Bucket"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    return contents;
};
var deserializeAws_restXmlBucket = function (output, context) {
    var contents = {
        Name: undefined,
        CreationDate: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = expectString(output["Name"]);
    }
    if (output["CreationDate"] !== undefined) {
        contents.CreationDate = expectNonNull(parseRfc3339DateTime(output["CreationDate"]));
    }
    return contents;
};
var deserializeAws_restXmlBuckets = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlBucket(entry);
    });
};
var deserializeAws_restXmlChecksum = function (output, context) {
    var contents = {
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
};
var deserializeAws_restXmlChecksumAlgorithmList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return expectString(entry);
    });
};
var deserializeAws_restXmlCommonPrefix = function (output, context) {
    var contents = {
        Prefix: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    return contents;
};
var deserializeAws_restXmlCommonPrefixList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlCommonPrefix(entry);
    });
};
var deserializeAws_restXmlCondition = function (output, context) {
    var contents = {
        HttpErrorCodeReturnedEquals: undefined,
        KeyPrefixEquals: undefined,
    };
    if (output["HttpErrorCodeReturnedEquals"] !== undefined) {
        contents.HttpErrorCodeReturnedEquals = expectString(output["HttpErrorCodeReturnedEquals"]);
    }
    if (output["KeyPrefixEquals"] !== undefined) {
        contents.KeyPrefixEquals = expectString(output["KeyPrefixEquals"]);
    }
    return contents;
};
var deserializeAws_restXmlContinuationEvent = function (output, context) {
    var contents = {};
    return contents;
};
var deserializeAws_restXmlCopyObjectResult = function (output, context) {
    var contents = {
        ETag: undefined,
        LastModified: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["ETag"] !== undefined) {
        contents.ETag = expectString(output["ETag"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
};
var deserializeAws_restXmlCopyPartResult = function (output, context) {
    var contents = {
        ETag: undefined,
        LastModified: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["ETag"] !== undefined) {
        contents.ETag = expectString(output["ETag"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
};
var deserializeAws_restXmlCORSRule = function (output, context) {
    var contents = {
        ID: undefined,
        AllowedHeaders: undefined,
        AllowedMethods: undefined,
        AllowedOrigins: undefined,
        ExposeHeaders: undefined,
        MaxAgeSeconds: undefined,
    };
    if (output["ID"] !== undefined) {
        contents.ID = expectString(output["ID"]);
    }
    if (output.AllowedHeader === "") {
        contents.AllowedHeaders = [];
    }
    else if (output["AllowedHeader"] !== undefined) {
        contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(getArrayIfSingleItem(output["AllowedHeader"]));
    }
    if (output.AllowedMethod === "") {
        contents.AllowedMethods = [];
    }
    else if (output["AllowedMethod"] !== undefined) {
        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(getArrayIfSingleItem(output["AllowedMethod"]));
    }
    if (output.AllowedOrigin === "") {
        contents.AllowedOrigins = [];
    }
    else if (output["AllowedOrigin"] !== undefined) {
        contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(getArrayIfSingleItem(output["AllowedOrigin"]));
    }
    if (output.ExposeHeader === "") {
        contents.ExposeHeaders = [];
    }
    else if (output["ExposeHeader"] !== undefined) {
        contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(getArrayIfSingleItem(output["ExposeHeader"]));
    }
    if (output["MaxAgeSeconds"] !== undefined) {
        contents.MaxAgeSeconds = strictParseInt32(output["MaxAgeSeconds"]);
    }
    return contents;
};
var deserializeAws_restXmlCORSRules = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlCORSRule(entry);
    });
};
var deserializeAws_restXmlDefaultRetention = function (output, context) {
    var contents = {
        Mode: undefined,
        Days: undefined,
        Years: undefined,
    };
    if (output["Mode"] !== undefined) {
        contents.Mode = expectString(output["Mode"]);
    }
    if (output["Days"] !== undefined) {
        contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["Years"] !== undefined) {
        contents.Years = strictParseInt32(output["Years"]);
    }
    return contents;
};
var deserializeAws_restXmlDeletedObject = function (output, context) {
    var contents = {
        Key: undefined,
        VersionId: undefined,
        DeleteMarker: undefined,
        DeleteMarkerVersionId: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["DeleteMarker"] !== undefined) {
        contents.DeleteMarker = parseBoolean(output["DeleteMarker"]);
    }
    if (output["DeleteMarkerVersionId"] !== undefined) {
        contents.DeleteMarkerVersionId = expectString(output["DeleteMarkerVersionId"]);
    }
    return contents;
};
var deserializeAws_restXmlDeletedObjects = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlDeletedObject(entry);
    });
};
var deserializeAws_restXmlDeleteMarkerEntry = function (output, context) {
    var contents = {
        Owner: undefined,
        Key: undefined,
        VersionId: undefined,
        IsLatest: undefined,
        LastModified: undefined,
    };
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"]);
    }
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["IsLatest"] !== undefined) {
        contents.IsLatest = parseBoolean(output["IsLatest"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
    }
    return contents;
};
var deserializeAws_restXmlDeleteMarkerReplication = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_restXmlDeleteMarkers = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlDeleteMarkerEntry(entry);
    });
};
var deserializeAws_restXmlDestination = function (output, context) {
    var contents = {
        Bucket: undefined,
        Account: undefined,
        StorageClass: undefined,
        AccessControlTranslation: undefined,
        EncryptionConfiguration: undefined,
        ReplicationTime: undefined,
        Metrics: undefined,
    };
    if (output["Bucket"] !== undefined) {
        contents.Bucket = expectString(output["Bucket"]);
    }
    if (output["Account"] !== undefined) {
        contents.Account = expectString(output["Account"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["AccessControlTranslation"] !== undefined) {
        contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output["AccessControlTranslation"]);
    }
    if (output["EncryptionConfiguration"] !== undefined) {
        contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output["EncryptionConfiguration"]);
    }
    if (output["ReplicationTime"] !== undefined) {
        contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output["ReplicationTime"]);
    }
    if (output["Metrics"] !== undefined) {
        contents.Metrics = deserializeAws_restXmlMetrics(output["Metrics"]);
    }
    return contents;
};
var deserializeAws_restXmlEncryptionConfiguration = function (output, context) {
    var contents = {
        ReplicaKmsKeyID: undefined,
    };
    if (output["ReplicaKmsKeyID"] !== undefined) {
        contents.ReplicaKmsKeyID = expectString(output["ReplicaKmsKeyID"]);
    }
    return contents;
};
var deserializeAws_restXmlEndEvent = function (output, context) {
    var contents = {};
    return contents;
};
var deserializeAws_restXml_Error = function (output, context) {
    var contents = {
        Key: undefined,
        VersionId: undefined,
        Code: undefined,
        Message: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["Code"] !== undefined) {
        contents.Code = expectString(output["Code"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = expectString(output["Message"]);
    }
    return contents;
};
var deserializeAws_restXmlErrorDocument = function (output, context) {
    var contents = {
        Key: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    return contents;
};
var deserializeAws_restXmlErrors = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXml_Error(entry);
    });
};
var deserializeAws_restXmlEventBridgeConfiguration = function (output, context) {
    var contents = {};
    return contents;
};
var deserializeAws_restXmlEventList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return expectString(entry);
    });
};
var deserializeAws_restXmlExistingObjectReplication = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_restXmlExposeHeaders = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return expectString(entry);
    });
};
var deserializeAws_restXmlFilterRule = function (output, context) {
    var contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = expectString(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlFilterRuleList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlFilterRule(entry);
    });
};
var deserializeAws_restXmlGetObjectAttributesParts = function (output, context) {
    var contents = {
        TotalPartsCount: undefined,
        PartNumberMarker: undefined,
        NextPartNumberMarker: undefined,
        MaxParts: undefined,
        IsTruncated: undefined,
        Parts: undefined,
    };
    if (output["PartsCount"] !== undefined) {
        contents.TotalPartsCount = strictParseInt32(output["PartsCount"]);
    }
    if (output["PartNumberMarker"] !== undefined) {
        contents.PartNumberMarker = expectString(output["PartNumberMarker"]);
    }
    if (output["NextPartNumberMarker"] !== undefined) {
        contents.NextPartNumberMarker = expectString(output["NextPartNumberMarker"]);
    }
    if (output["MaxParts"] !== undefined) {
        contents.MaxParts = strictParseInt32(output["MaxParts"]);
    }
    if (output["IsTruncated"] !== undefined) {
        contents.IsTruncated = parseBoolean(output["IsTruncated"]);
    }
    if (output.Part === "") {
        contents.Parts = [];
    }
    else if (output["Part"] !== undefined) {
        contents.Parts = deserializeAws_restXmlPartsList(getArrayIfSingleItem(output["Part"]));
    }
    return contents;
};
var deserializeAws_restXmlGrant = function (output, context) {
    var contents = {
        Grantee: undefined,
        Permission: undefined,
    };
    if (output["Grantee"] !== undefined) {
        contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"]);
    }
    if (output["Permission"] !== undefined) {
        contents.Permission = expectString(output["Permission"]);
    }
    return contents;
};
var deserializeAws_restXmlGrantee = function (output, context) {
    var contents = {
        DisplayName: undefined,
        EmailAddress: undefined,
        ID: undefined,
        URI: undefined,
        Type: undefined,
    };
    if (output["DisplayName"] !== undefined) {
        contents.DisplayName = expectString(output["DisplayName"]);
    }
    if (output["EmailAddress"] !== undefined) {
        contents.EmailAddress = expectString(output["EmailAddress"]);
    }
    if (output["ID"] !== undefined) {
        contents.ID = expectString(output["ID"]);
    }
    if (output["URI"] !== undefined) {
        contents.URI = expectString(output["URI"]);
    }
    if (output["xsi:type"] !== undefined) {
        contents.Type = expectString(output["xsi:type"]);
    }
    return contents;
};
var deserializeAws_restXmlGrants = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlGrant(entry);
    });
};
var deserializeAws_restXmlIndexDocument = function (output, context) {
    var contents = {
        Suffix: undefined,
    };
    if (output["Suffix"] !== undefined) {
        contents.Suffix = expectString(output["Suffix"]);
    }
    return contents;
};
var deserializeAws_restXmlInitiator = function (output, context) {
    var contents = {
        ID: undefined,
        DisplayName: undefined,
    };
    if (output["ID"] !== undefined) {
        contents.ID = expectString(output["ID"]);
    }
    if (output["DisplayName"] !== undefined) {
        contents.DisplayName = expectString(output["DisplayName"]);
    }
    return contents;
};
var deserializeAws_restXmlIntelligentTieringAndOperator = function (output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]));
    }
    return contents;
};
var deserializeAws_restXmlIntelligentTieringConfiguration = function (output, context) {
    var contents = {
        Id: undefined,
        Filter: undefined,
        Status: undefined,
        Tierings: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = expectString(output["Id"]);
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output["Filter"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    if (output.Tiering === "") {
        contents.Tierings = [];
    }
    else if (output["Tiering"] !== undefined) {
        contents.Tierings = deserializeAws_restXmlTieringList(getArrayIfSingleItem(output["Tiering"]));
    }
    return contents;
};
var deserializeAws_restXmlIntelligentTieringConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlIntelligentTieringConfiguration(entry);
    });
};
var deserializeAws_restXmlIntelligentTieringFilter = function (output, context) {
    var contents = {
        Prefix: undefined,
        Tag: undefined,
        And: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output["Tag"] !== undefined) {
        contents.Tag = deserializeAws_restXmlTag(output["Tag"]);
    }
    if (output["And"] !== undefined) {
        contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output["And"]);
    }
    return contents;
};
var deserializeAws_restXmlInventoryConfiguration = function (output, context) {
    var contents = {
        Destination: undefined,
        IsEnabled: undefined,
        Filter: undefined,
        Id: undefined,
        IncludedObjectVersions: undefined,
        OptionalFields: undefined,
        Schedule: undefined,
    };
    if (output["Destination"] !== undefined) {
        contents.Destination = deserializeAws_restXmlInventoryDestination(output["Destination"]);
    }
    if (output["IsEnabled"] !== undefined) {
        contents.IsEnabled = parseBoolean(output["IsEnabled"]);
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlInventoryFilter(output["Filter"]);
    }
    if (output["Id"] !== undefined) {
        contents.Id = expectString(output["Id"]);
    }
    if (output["IncludedObjectVersions"] !== undefined) {
        contents.IncludedObjectVersions = expectString(output["IncludedObjectVersions"]);
    }
    if (output.OptionalFields === "") {
        contents.OptionalFields = [];
    }
    else if (output["OptionalFields"] !== undefined && output["OptionalFields"]["Field"] !== undefined) {
        contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(getArrayIfSingleItem(output["OptionalFields"]["Field"]));
    }
    if (output["Schedule"] !== undefined) {
        contents.Schedule = deserializeAws_restXmlInventorySchedule(output["Schedule"]);
    }
    return contents;
};
var deserializeAws_restXmlInventoryConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlInventoryConfiguration(entry);
    });
};
var deserializeAws_restXmlInventoryDestination = function (output, context) {
    var contents = {
        S3BucketDestination: undefined,
    };
    if (output["S3BucketDestination"] !== undefined) {
        contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output["S3BucketDestination"]);
    }
    return contents;
};
var deserializeAws_restXmlInventoryEncryption = function (output, context) {
    var contents = {
        SSES3: undefined,
        SSEKMS: undefined,
    };
    if (output["SSE-S3"] !== undefined) {
        contents.SSES3 = deserializeAws_restXmlSSES3(output["SSE-S3"]);
    }
    if (output["SSE-KMS"] !== undefined) {
        contents.SSEKMS = deserializeAws_restXmlSSEKMS(output["SSE-KMS"]);
    }
    return contents;
};
var deserializeAws_restXmlInventoryFilter = function (output, context) {
    var contents = {
        Prefix: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    return contents;
};
var deserializeAws_restXmlInventoryOptionalFields = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return expectString(entry);
    });
};
var deserializeAws_restXmlInventoryS3BucketDestination = function (output, context) {
    var contents = {
        AccountId: undefined,
        Bucket: undefined,
        Format: undefined,
        Prefix: undefined,
        Encryption: undefined,
    };
    if (output["AccountId"] !== undefined) {
        contents.AccountId = expectString(output["AccountId"]);
    }
    if (output["Bucket"] !== undefined) {
        contents.Bucket = expectString(output["Bucket"]);
    }
    if (output["Format"] !== undefined) {
        contents.Format = expectString(output["Format"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output["Encryption"] !== undefined) {
        contents.Encryption = deserializeAws_restXmlInventoryEncryption(output["Encryption"]);
    }
    return contents;
};
var deserializeAws_restXmlInventorySchedule = function (output, context) {
    var contents = {
        Frequency: undefined,
    };
    if (output["Frequency"] !== undefined) {
        contents.Frequency = expectString(output["Frequency"]);
    }
    return contents;
};
var deserializeAws_restXmlLambdaFunctionConfiguration = function (output, context) {
    var contents = {
        Id: undefined,
        LambdaFunctionArn: undefined,
        Events: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = expectString(output["Id"]);
    }
    if (output["CloudFunction"] !== undefined) {
        contents.LambdaFunctionArn = expectString(output["CloudFunction"]);
    }
    if (output.Event === "") {
        contents.Events = [];
    }
    else if (output["Event"] !== undefined) {
        contents.Events = deserializeAws_restXmlEventList(getArrayIfSingleItem(output["Event"]));
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"]);
    }
    return contents;
};
var deserializeAws_restXmlLambdaFunctionConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlLambdaFunctionConfiguration(entry);
    });
};
var deserializeAws_restXmlLifecycleExpiration = function (output, context) {
    var contents = {
        Date: undefined,
        Days: undefined,
        ExpiredObjectDeleteMarker: undefined,
    };
    if (output["Date"] !== undefined) {
        contents.Date = expectNonNull(parseRfc3339DateTime(output["Date"]));
    }
    if (output["Days"] !== undefined) {
        contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["ExpiredObjectDeleteMarker"] !== undefined) {
        contents.ExpiredObjectDeleteMarker = parseBoolean(output["ExpiredObjectDeleteMarker"]);
    }
    return contents;
};
var deserializeAws_restXmlLifecycleRule = function (output, context) {
    var contents = {
        Expiration: undefined,
        ID: undefined,
        Prefix: undefined,
        Filter: undefined,
        Status: undefined,
        Transitions: undefined,
        NoncurrentVersionTransitions: undefined,
        NoncurrentVersionExpiration: undefined,
        AbortIncompleteMultipartUpload: undefined,
    };
    if (output["Expiration"] !== undefined) {
        contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output["Expiration"]);
    }
    if (output["ID"] !== undefined) {
        contents.ID = expectString(output["ID"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(expectUnion(output["Filter"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    if (output.Transition === "") {
        contents.Transitions = [];
    }
    else if (output["Transition"] !== undefined) {
        contents.Transitions = deserializeAws_restXmlTransitionList(getArrayIfSingleItem(output["Transition"]));
    }
    if (output.NoncurrentVersionTransition === "") {
        contents.NoncurrentVersionTransitions = [];
    }
    else if (output["NoncurrentVersionTransition"] !== undefined) {
        contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(getArrayIfSingleItem(output["NoncurrentVersionTransition"]));
    }
    if (output["NoncurrentVersionExpiration"] !== undefined) {
        contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output["NoncurrentVersionExpiration"]);
    }
    if (output["AbortIncompleteMultipartUpload"] !== undefined) {
        contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"]);
    }
    return contents;
};
var deserializeAws_restXmlLifecycleRuleAndOperator = function (output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined,
        ObjectSizeGreaterThan: undefined,
        ObjectSizeLessThan: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]));
    }
    if (output["ObjectSizeGreaterThan"] !== undefined) {
        contents.ObjectSizeGreaterThan = strictParseLong(output["ObjectSizeGreaterThan"]);
    }
    if (output["ObjectSizeLessThan"] !== undefined) {
        contents.ObjectSizeLessThan = strictParseLong(output["ObjectSizeLessThan"]);
    }
    return contents;
};
var deserializeAws_restXmlLifecycleRuleFilter = function (output, context) {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: expectString(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"]),
        };
    }
    if (output["ObjectSizeGreaterThan"] !== undefined) {
        return {
            ObjectSizeGreaterThan: strictParseLong(output["ObjectSizeGreaterThan"]),
        };
    }
    if (output["ObjectSizeLessThan"] !== undefined) {
        return {
            ObjectSizeLessThan: strictParseLong(output["ObjectSizeLessThan"]),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlLifecycleRuleAndOperator(output["And"]),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlLifecycleRules = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlLifecycleRule(entry);
    });
};
var deserializeAws_restXmlLoggingEnabled = function (output, context) {
    var contents = {
        TargetBucket: undefined,
        TargetGrants: undefined,
        TargetPrefix: undefined,
    };
    if (output["TargetBucket"] !== undefined) {
        contents.TargetBucket = expectString(output["TargetBucket"]);
    }
    if (output.TargetGrants === "") {
        contents.TargetGrants = [];
    }
    else if (output["TargetGrants"] !== undefined && output["TargetGrants"]["Grant"] !== undefined) {
        contents.TargetGrants = deserializeAws_restXmlTargetGrants(getArrayIfSingleItem(output["TargetGrants"]["Grant"]));
    }
    if (output["TargetPrefix"] !== undefined) {
        contents.TargetPrefix = expectString(output["TargetPrefix"]);
    }
    return contents;
};
var deserializeAws_restXmlMetrics = function (output, context) {
    var contents = {
        Status: undefined,
        EventThreshold: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    if (output["EventThreshold"] !== undefined) {
        contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output["EventThreshold"]);
    }
    return contents;
};
var deserializeAws_restXmlMetricsAndOperator = function (output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined,
        AccessPointArn: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]));
    }
    if (output["AccessPointArn"] !== undefined) {
        contents.AccessPointArn = expectString(output["AccessPointArn"]);
    }
    return contents;
};
var deserializeAws_restXmlMetricsConfiguration = function (output, context) {
    var contents = {
        Id: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = expectString(output["Id"]);
    }
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlMetricsFilter(expectUnion(output["Filter"]));
    }
    return contents;
};
var deserializeAws_restXmlMetricsConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlMetricsConfiguration(entry);
    });
};
var deserializeAws_restXmlMetricsFilter = function (output, context) {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: expectString(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"]),
        };
    }
    if (output["AccessPointArn"] !== undefined) {
        return {
            AccessPointArn: expectString(output["AccessPointArn"]),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlMetricsAndOperator(output["And"]),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlMultipartUpload = function (output, context) {
    var contents = {
        UploadId: undefined,
        Key: undefined,
        Initiated: undefined,
        StorageClass: undefined,
        Owner: undefined,
        Initiator: undefined,
        ChecksumAlgorithm: undefined,
    };
    if (output["UploadId"] !== undefined) {
        contents.UploadId = expectString(output["UploadId"]);
    }
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    if (output["Initiated"] !== undefined) {
        contents.Initiated = expectNonNull(parseRfc3339DateTime(output["Initiated"]));
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"]);
    }
    if (output["Initiator"] !== undefined) {
        contents.Initiator = deserializeAws_restXmlInitiator(output["Initiator"]);
    }
    if (output["ChecksumAlgorithm"] !== undefined) {
        contents.ChecksumAlgorithm = expectString(output["ChecksumAlgorithm"]);
    }
    return contents;
};
var deserializeAws_restXmlMultipartUploadList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlMultipartUpload(entry);
    });
};
var deserializeAws_restXmlNoncurrentVersionExpiration = function (output, context) {
    var contents = {
        NoncurrentDays: undefined,
        NewerNoncurrentVersions: undefined,
    };
    if (output["NoncurrentDays"] !== undefined) {
        contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
    }
    if (output["NewerNoncurrentVersions"] !== undefined) {
        contents.NewerNoncurrentVersions = strictParseInt32(output["NewerNoncurrentVersions"]);
    }
    return contents;
};
var deserializeAws_restXmlNoncurrentVersionTransition = function (output, context) {
    var contents = {
        NoncurrentDays: undefined,
        StorageClass: undefined,
        NewerNoncurrentVersions: undefined,
    };
    if (output["NoncurrentDays"] !== undefined) {
        contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["NewerNoncurrentVersions"] !== undefined) {
        contents.NewerNoncurrentVersions = strictParseInt32(output["NewerNoncurrentVersions"]);
    }
    return contents;
};
var deserializeAws_restXmlNoncurrentVersionTransitionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlNoncurrentVersionTransition(entry);
    });
};
var deserializeAws_restXmlNotificationConfigurationFilter = function (output, context) {
    var contents = {
        Key: undefined,
    };
    if (output["S3Key"] !== undefined) {
        contents.Key = deserializeAws_restXmlS3KeyFilter(output["S3Key"]);
    }
    return contents;
};
var deserializeAws_restXml_Object = function (output, context) {
    var contents = {
        Key: undefined,
        LastModified: undefined,
        ETag: undefined,
        ChecksumAlgorithm: undefined,
        Size: undefined,
        StorageClass: undefined,
        Owner: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
    }
    if (output["ETag"] !== undefined) {
        contents.ETag = expectString(output["ETag"]);
    }
    if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
    }
    else if (output["ChecksumAlgorithm"] !== undefined) {
        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList(getArrayIfSingleItem(output["ChecksumAlgorithm"]));
    }
    if (output["Size"] !== undefined) {
        contents.Size = strictParseLong(output["Size"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"]);
    }
    return contents;
};
var deserializeAws_restXmlObjectList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXml_Object(entry);
    });
};
var deserializeAws_restXmlObjectLockConfiguration = function (output, context) {
    var contents = {
        ObjectLockEnabled: undefined,
        Rule: undefined,
    };
    if (output["ObjectLockEnabled"] !== undefined) {
        contents.ObjectLockEnabled = expectString(output["ObjectLockEnabled"]);
    }
    if (output["Rule"] !== undefined) {
        contents.Rule = deserializeAws_restXmlObjectLockRule(output["Rule"]);
    }
    return contents;
};
var deserializeAws_restXmlObjectLockLegalHold = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_restXmlObjectLockRetention = function (output, context) {
    var contents = {
        Mode: undefined,
        RetainUntilDate: undefined,
    };
    if (output["Mode"] !== undefined) {
        contents.Mode = expectString(output["Mode"]);
    }
    if (output["RetainUntilDate"] !== undefined) {
        contents.RetainUntilDate = expectNonNull(parseRfc3339DateTime(output["RetainUntilDate"]));
    }
    return contents;
};
var deserializeAws_restXmlObjectLockRule = function (output, context) {
    var contents = {
        DefaultRetention: undefined,
    };
    if (output["DefaultRetention"] !== undefined) {
        contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output["DefaultRetention"]);
    }
    return contents;
};
var deserializeAws_restXmlObjectPart = function (output, context) {
    var contents = {
        PartNumber: undefined,
        Size: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["PartNumber"] !== undefined) {
        contents.PartNumber = strictParseInt32(output["PartNumber"]);
    }
    if (output["Size"] !== undefined) {
        contents.Size = strictParseLong(output["Size"]);
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
};
var deserializeAws_restXmlObjectVersion = function (output, context) {
    var contents = {
        ETag: undefined,
        ChecksumAlgorithm: undefined,
        Size: undefined,
        StorageClass: undefined,
        Key: undefined,
        VersionId: undefined,
        IsLatest: undefined,
        LastModified: undefined,
        Owner: undefined,
    };
    if (output["ETag"] !== undefined) {
        contents.ETag = expectString(output["ETag"]);
    }
    if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
    }
    else if (output["ChecksumAlgorithm"] !== undefined) {
        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList(getArrayIfSingleItem(output["ChecksumAlgorithm"]));
    }
    if (output["Size"] !== undefined) {
        contents.Size = strictParseLong(output["Size"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["IsLatest"] !== undefined) {
        contents.IsLatest = parseBoolean(output["IsLatest"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"]);
    }
    return contents;
};
var deserializeAws_restXmlObjectVersionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlObjectVersion(entry);
    });
};
var deserializeAws_restXmlOwner = function (output, context) {
    var contents = {
        DisplayName: undefined,
        ID: undefined,
    };
    if (output["DisplayName"] !== undefined) {
        contents.DisplayName = expectString(output["DisplayName"]);
    }
    if (output["ID"] !== undefined) {
        contents.ID = expectString(output["ID"]);
    }
    return contents;
};
var deserializeAws_restXmlOwnershipControls = function (output, context) {
    var contents = {
        Rules: undefined,
    };
    if (output.Rule === "") {
        contents.Rules = [];
    }
    else if (output["Rule"] !== undefined) {
        contents.Rules = deserializeAws_restXmlOwnershipControlsRules(getArrayIfSingleItem(output["Rule"]));
    }
    return contents;
};
var deserializeAws_restXmlOwnershipControlsRule = function (output, context) {
    var contents = {
        ObjectOwnership: undefined,
    };
    if (output["ObjectOwnership"] !== undefined) {
        contents.ObjectOwnership = expectString(output["ObjectOwnership"]);
    }
    return contents;
};
var deserializeAws_restXmlOwnershipControlsRules = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlOwnershipControlsRule(entry);
    });
};
var deserializeAws_restXmlPart = function (output, context) {
    var contents = {
        PartNumber: undefined,
        LastModified: undefined,
        ETag: undefined,
        Size: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["PartNumber"] !== undefined) {
        contents.PartNumber = strictParseInt32(output["PartNumber"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = expectNonNull(parseRfc3339DateTime(output["LastModified"]));
    }
    if (output["ETag"] !== undefined) {
        contents.ETag = expectString(output["ETag"]);
    }
    if (output["Size"] !== undefined) {
        contents.Size = strictParseLong(output["Size"]);
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
};
var deserializeAws_restXmlParts = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlPart(entry);
    });
};
var deserializeAws_restXmlPartsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlObjectPart(entry);
    });
};
var deserializeAws_restXmlPolicyStatus = function (output, context) {
    var contents = {
        IsPublic: undefined,
    };
    if (output["IsPublic"] !== undefined) {
        contents.IsPublic = parseBoolean(output["IsPublic"]);
    }
    return contents;
};
var deserializeAws_restXmlProgress = function (output, context) {
    var contents = {
        BytesScanned: undefined,
        BytesProcessed: undefined,
        BytesReturned: undefined,
    };
    if (output["BytesScanned"] !== undefined) {
        contents.BytesScanned = strictParseLong(output["BytesScanned"]);
    }
    if (output["BytesProcessed"] !== undefined) {
        contents.BytesProcessed = strictParseLong(output["BytesProcessed"]);
    }
    if (output["BytesReturned"] !== undefined) {
        contents.BytesReturned = strictParseLong(output["BytesReturned"]);
    }
    return contents;
};
var deserializeAws_restXmlPublicAccessBlockConfiguration = function (output, context) {
    var contents = {
        BlockPublicAcls: undefined,
        IgnorePublicAcls: undefined,
        BlockPublicPolicy: undefined,
        RestrictPublicBuckets: undefined,
    };
    if (output["BlockPublicAcls"] !== undefined) {
        contents.BlockPublicAcls = parseBoolean(output["BlockPublicAcls"]);
    }
    if (output["IgnorePublicAcls"] !== undefined) {
        contents.IgnorePublicAcls = parseBoolean(output["IgnorePublicAcls"]);
    }
    if (output["BlockPublicPolicy"] !== undefined) {
        contents.BlockPublicPolicy = parseBoolean(output["BlockPublicPolicy"]);
    }
    if (output["RestrictPublicBuckets"] !== undefined) {
        contents.RestrictPublicBuckets = parseBoolean(output["RestrictPublicBuckets"]);
    }
    return contents;
};
var deserializeAws_restXmlQueueConfiguration = function (output, context) {
    var contents = {
        Id: undefined,
        QueueArn: undefined,
        Events: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = expectString(output["Id"]);
    }
    if (output["Queue"] !== undefined) {
        contents.QueueArn = expectString(output["Queue"]);
    }
    if (output.Event === "") {
        contents.Events = [];
    }
    else if (output["Event"] !== undefined) {
        contents.Events = deserializeAws_restXmlEventList(getArrayIfSingleItem(output["Event"]));
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"]);
    }
    return contents;
};
var deserializeAws_restXmlQueueConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlQueueConfiguration(entry);
    });
};
var deserializeAws_restXmlRedirect = function (output, context) {
    var contents = {
        HostName: undefined,
        HttpRedirectCode: undefined,
        Protocol: undefined,
        ReplaceKeyPrefixWith: undefined,
        ReplaceKeyWith: undefined,
    };
    if (output["HostName"] !== undefined) {
        contents.HostName = expectString(output["HostName"]);
    }
    if (output["HttpRedirectCode"] !== undefined) {
        contents.HttpRedirectCode = expectString(output["HttpRedirectCode"]);
    }
    if (output["Protocol"] !== undefined) {
        contents.Protocol = expectString(output["Protocol"]);
    }
    if (output["ReplaceKeyPrefixWith"] !== undefined) {
        contents.ReplaceKeyPrefixWith = expectString(output["ReplaceKeyPrefixWith"]);
    }
    if (output["ReplaceKeyWith"] !== undefined) {
        contents.ReplaceKeyWith = expectString(output["ReplaceKeyWith"]);
    }
    return contents;
};
var deserializeAws_restXmlRedirectAllRequestsTo = function (output, context) {
    var contents = {
        HostName: undefined,
        Protocol: undefined,
    };
    if (output["HostName"] !== undefined) {
        contents.HostName = expectString(output["HostName"]);
    }
    if (output["Protocol"] !== undefined) {
        contents.Protocol = expectString(output["Protocol"]);
    }
    return contents;
};
var deserializeAws_restXmlReplicaModifications = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_restXmlReplicationConfiguration = function (output, context) {
    var contents = {
        Role: undefined,
        Rules: undefined,
    };
    if (output["Role"] !== undefined) {
        contents.Role = expectString(output["Role"]);
    }
    if (output.Rule === "") {
        contents.Rules = [];
    }
    else if (output["Rule"] !== undefined) {
        contents.Rules = deserializeAws_restXmlReplicationRules(getArrayIfSingleItem(output["Rule"]));
    }
    return contents;
};
var deserializeAws_restXmlReplicationRule = function (output, context) {
    var contents = {
        ID: undefined,
        Priority: undefined,
        Prefix: undefined,
        Filter: undefined,
        Status: undefined,
        SourceSelectionCriteria: undefined,
        ExistingObjectReplication: undefined,
        Destination: undefined,
        DeleteMarkerReplication: undefined,
    };
    if (output["ID"] !== undefined) {
        contents.ID = expectString(output["ID"]);
    }
    if (output["Priority"] !== undefined) {
        contents.Priority = strictParseInt32(output["Priority"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlReplicationRuleFilter(expectUnion(output["Filter"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    if (output["SourceSelectionCriteria"] !== undefined) {
        contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output["SourceSelectionCriteria"]);
    }
    if (output["ExistingObjectReplication"] !== undefined) {
        contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output["ExistingObjectReplication"]);
    }
    if (output["Destination"] !== undefined) {
        contents.Destination = deserializeAws_restXmlDestination(output["Destination"]);
    }
    if (output["DeleteMarkerReplication"] !== undefined) {
        contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output["DeleteMarkerReplication"]);
    }
    return contents;
};
var deserializeAws_restXmlReplicationRuleAndOperator = function (output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet(getArrayIfSingleItem(output["Tag"]));
    }
    return contents;
};
var deserializeAws_restXmlReplicationRuleFilter = function (output, context) {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: expectString(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"]),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlReplicationRuleAndOperator(output["And"]),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restXmlReplicationRules = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlReplicationRule(entry);
    });
};
var deserializeAws_restXmlReplicationTime = function (output, context) {
    var contents = {
        Status: undefined,
        Time: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    if (output["Time"] !== undefined) {
        contents.Time = deserializeAws_restXmlReplicationTimeValue(output["Time"]);
    }
    return contents;
};
var deserializeAws_restXmlReplicationTimeValue = function (output, context) {
    var contents = {
        Minutes: undefined,
    };
    if (output["Minutes"] !== undefined) {
        contents.Minutes = strictParseInt32(output["Minutes"]);
    }
    return contents;
};
var deserializeAws_restXmlRoutingRule = function (output, context) {
    var contents = {
        Condition: undefined,
        Redirect: undefined,
    };
    if (output["Condition"] !== undefined) {
        contents.Condition = deserializeAws_restXmlCondition(output["Condition"]);
    }
    if (output["Redirect"] !== undefined) {
        contents.Redirect = deserializeAws_restXmlRedirect(output["Redirect"]);
    }
    return contents;
};
var deserializeAws_restXmlRoutingRules = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlRoutingRule(entry);
    });
};
var deserializeAws_restXmlS3KeyFilter = function (output, context) {
    var contents = {
        FilterRules: undefined,
    };
    if (output.FilterRule === "") {
        contents.FilterRules = [];
    }
    else if (output["FilterRule"] !== undefined) {
        contents.FilterRules = deserializeAws_restXmlFilterRuleList(getArrayIfSingleItem(output["FilterRule"]));
    }
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionByDefault = function (output, context) {
    var contents = {
        SSEAlgorithm: undefined,
        KMSMasterKeyID: undefined,
    };
    if (output["SSEAlgorithm"] !== undefined) {
        contents.SSEAlgorithm = expectString(output["SSEAlgorithm"]);
    }
    if (output["KMSMasterKeyID"] !== undefined) {
        contents.KMSMasterKeyID = expectString(output["KMSMasterKeyID"]);
    }
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionConfiguration = function (output, context) {
    var contents = {
        Rules: undefined,
    };
    if (output.Rule === "") {
        contents.Rules = [];
    }
    else if (output["Rule"] !== undefined) {
        contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(getArrayIfSingleItem(output["Rule"]));
    }
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionRule = function (output, context) {
    var contents = {
        ApplyServerSideEncryptionByDefault: undefined,
        BucketKeyEnabled: undefined,
    };
    if (output["ApplyServerSideEncryptionByDefault"] !== undefined) {
        contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"]);
    }
    if (output["BucketKeyEnabled"] !== undefined) {
        contents.BucketKeyEnabled = parseBoolean(output["BucketKeyEnabled"]);
    }
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionRules = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlServerSideEncryptionRule(entry);
    });
};
var deserializeAws_restXmlSourceSelectionCriteria = function (output, context) {
    var contents = {
        SseKmsEncryptedObjects: undefined,
        ReplicaModifications: undefined,
    };
    if (output["SseKmsEncryptedObjects"] !== undefined) {
        contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output["SseKmsEncryptedObjects"]);
    }
    if (output["ReplicaModifications"] !== undefined) {
        contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output["ReplicaModifications"]);
    }
    return contents;
};
var deserializeAws_restXmlSSEKMS = function (output, context) {
    var contents = {
        KeyId: undefined,
    };
    if (output["KeyId"] !== undefined) {
        contents.KeyId = expectString(output["KeyId"]);
    }
    return contents;
};
var deserializeAws_restXmlSseKmsEncryptedObjects = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_restXmlSSES3 = function (output, context) {
    var contents = {};
    return contents;
};
var deserializeAws_restXmlStats = function (output, context) {
    var contents = {
        BytesScanned: undefined,
        BytesProcessed: undefined,
        BytesReturned: undefined,
    };
    if (output["BytesScanned"] !== undefined) {
        contents.BytesScanned = strictParseLong(output["BytesScanned"]);
    }
    if (output["BytesProcessed"] !== undefined) {
        contents.BytesProcessed = strictParseLong(output["BytesProcessed"]);
    }
    if (output["BytesReturned"] !== undefined) {
        contents.BytesReturned = strictParseLong(output["BytesReturned"]);
    }
    return contents;
};
var deserializeAws_restXmlStorageClassAnalysis = function (output, context) {
    var contents = {
        DataExport: undefined,
    };
    if (output["DataExport"] !== undefined) {
        contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output["DataExport"]);
    }
    return contents;
};
var deserializeAws_restXmlStorageClassAnalysisDataExport = function (output, context) {
    var contents = {
        OutputSchemaVersion: undefined,
        Destination: undefined,
    };
    if (output["OutputSchemaVersion"] !== undefined) {
        contents.OutputSchemaVersion = expectString(output["OutputSchemaVersion"]);
    }
    if (output["Destination"] !== undefined) {
        contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output["Destination"]);
    }
    return contents;
};
var deserializeAws_restXmlTag = function (output, context) {
    var contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = expectString(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlTagSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTag(entry);
    });
};
var deserializeAws_restXmlTargetGrant = function (output, context) {
    var contents = {
        Grantee: undefined,
        Permission: undefined,
    };
    if (output["Grantee"] !== undefined) {
        contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"]);
    }
    if (output["Permission"] !== undefined) {
        contents.Permission = expectString(output["Permission"]);
    }
    return contents;
};
var deserializeAws_restXmlTargetGrants = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTargetGrant(entry);
    });
};
var deserializeAws_restXmlTiering = function (output, context) {
    var contents = {
        Days: undefined,
        AccessTier: undefined,
    };
    if (output["Days"] !== undefined) {
        contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["AccessTier"] !== undefined) {
        contents.AccessTier = expectString(output["AccessTier"]);
    }
    return contents;
};
var deserializeAws_restXmlTieringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTiering(entry);
    });
};
var deserializeAws_restXmlTopicConfiguration = function (output, context) {
    var contents = {
        Id: undefined,
        TopicArn: undefined,
        Events: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = expectString(output["Id"]);
    }
    if (output["Topic"] !== undefined) {
        contents.TopicArn = expectString(output["Topic"]);
    }
    if (output.Event === "") {
        contents.Events = [];
    }
    else if (output["Event"] !== undefined) {
        contents.Events = deserializeAws_restXmlEventList(getArrayIfSingleItem(output["Event"]));
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"]);
    }
    return contents;
};
var deserializeAws_restXmlTopicConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTopicConfiguration(entry);
    });
};
var deserializeAws_restXmlTransition = function (output, context) {
    var contents = {
        Date: undefined,
        Days: undefined,
        StorageClass: undefined,
    };
    if (output["Date"] !== undefined) {
        contents.Date = expectNonNull(parseRfc3339DateTime(output["Date"]));
    }
    if (output["Days"] !== undefined) {
        contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = expectString(output["StorageClass"]);
    }
    return contents;
};
var deserializeAws_restXmlTransitionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTransition(entry);
    });
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var isSerializableHeaderValue = function (value) {
    return value !== undefined &&
        value !== null &&
        value !== "" &&
        (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
        (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            var parsedObj = parse(encoded, {
                attributeNamePrefix: "",
                ignoreAttributes: false,
                parseNodeValue: false,
                trimValues: false,
                tagValueProcessor: function (val) { return (val.trim() === "" && val.includes("\n") ? "" : decodeHTML(val)); },
            });
            var textNodeName = "#text";
            var key = Object.keys(parsedObj)[0];
            var parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return getValueFromTextNode(parsedObjToReturn);
        }
        return {};
    });
};
var loadRestXmlErrorCode = function (output, data) {
    if (data.Code !== undefined) {
        return data.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};

var AbortMultipartUploadCommand = (function (_super) {
    __extends(AbortMultipartUploadCommand, _super);
    function AbortMultipartUploadCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    AbortMultipartUploadCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "AbortMultipartUploadCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: AbortMultipartUploadRequestFilterSensitiveLog,
            outputFilterSensitiveLog: AbortMultipartUploadOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    AbortMultipartUploadCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlAbortMultipartUploadCommand(input, context);
    };
    AbortMultipartUploadCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlAbortMultipartUploadCommand(output, context);
    };
    return AbortMultipartUploadCommand;
}(Command));

var CompleteMultipartUploadCommand = (function (_super) {
    __extends(CompleteMultipartUploadCommand, _super);
    function CompleteMultipartUploadCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    CompleteMultipartUploadCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "CompleteMultipartUploadCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: CompleteMultipartUploadRequestFilterSensitiveLog,
            outputFilterSensitiveLog: CompleteMultipartUploadOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CompleteMultipartUploadCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlCompleteMultipartUploadCommand(input, context);
    };
    CompleteMultipartUploadCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlCompleteMultipartUploadCommand(output, context);
    };
    return CompleteMultipartUploadCommand;
}(Command));

var CopyObjectCommand = (function (_super) {
    __extends(CopyObjectCommand, _super);
    function CopyObjectCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    CopyObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "CopyObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: CopyObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: CopyObjectOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CopyObjectCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlCopyObjectCommand(input, context);
    };
    CopyObjectCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlCopyObjectCommand(output, context);
    };
    return CopyObjectCommand;
}(Command));

var CreateBucketCommand = (function (_super) {
    __extends(CreateBucketCommand, _super);
    function CreateBucketCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    CreateBucketCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getLocationConstraintPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "CreateBucketCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: CreateBucketRequestFilterSensitiveLog,
            outputFilterSensitiveLog: CreateBucketOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateBucketCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlCreateBucketCommand(input, context);
    };
    CreateBucketCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlCreateBucketCommand(output, context);
    };
    return CreateBucketCommand;
}(Command));

var CreateMultipartUploadCommand = (function (_super) {
    __extends(CreateMultipartUploadCommand, _super);
    function CreateMultipartUploadCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    CreateMultipartUploadCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "CreateMultipartUploadCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: CreateMultipartUploadRequestFilterSensitiveLog,
            outputFilterSensitiveLog: CreateMultipartUploadOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateMultipartUploadCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlCreateMultipartUploadCommand(input, context);
    };
    CreateMultipartUploadCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlCreateMultipartUploadCommand(output, context);
    };
    return CreateMultipartUploadCommand;
}(Command));

var DeleteBucketAnalyticsConfigurationCommand = (function (_super) {
    __extends(DeleteBucketAnalyticsConfigurationCommand, _super);
    function DeleteBucketAnalyticsConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketAnalyticsConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketAnalyticsConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketAnalyticsConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(input, context);
    };
    DeleteBucketAnalyticsConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(output, context);
    };
    return DeleteBucketAnalyticsConfigurationCommand;
}(Command));

var DeleteBucketCommand = (function (_super) {
    __extends(DeleteBucketCommand, _super);
    function DeleteBucketCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketCommand(input, context);
    };
    DeleteBucketCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketCommand(output, context);
    };
    return DeleteBucketCommand;
}(Command));

var DeleteBucketCorsCommand = (function (_super) {
    __extends(DeleteBucketCorsCommand, _super);
    function DeleteBucketCorsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketCorsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketCorsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketCorsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketCorsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketCorsCommand(input, context);
    };
    DeleteBucketCorsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketCorsCommand(output, context);
    };
    return DeleteBucketCorsCommand;
}(Command));

var DeleteBucketEncryptionCommand = (function (_super) {
    __extends(DeleteBucketEncryptionCommand, _super);
    function DeleteBucketEncryptionCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketEncryptionCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketEncryptionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketEncryptionCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketEncryptionCommand(input, context);
    };
    DeleteBucketEncryptionCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketEncryptionCommand(output, context);
    };
    return DeleteBucketEncryptionCommand;
}(Command));

var DeleteBucketIntelligentTieringConfigurationCommand = (function (_super) {
    __extends(DeleteBucketIntelligentTieringConfigurationCommand, _super);
    function DeleteBucketIntelligentTieringConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketIntelligentTieringConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketIntelligentTieringConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(input, context);
    };
    DeleteBucketIntelligentTieringConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(output, context);
    };
    return DeleteBucketIntelligentTieringConfigurationCommand;
}(Command));

var DeleteBucketInventoryConfigurationCommand = (function (_super) {
    __extends(DeleteBucketInventoryConfigurationCommand, _super);
    function DeleteBucketInventoryConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketInventoryConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketInventoryConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketInventoryConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketInventoryConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketInventoryConfigurationCommand(input, context);
    };
    DeleteBucketInventoryConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand(output, context);
    };
    return DeleteBucketInventoryConfigurationCommand;
}(Command));

var DeleteBucketLifecycleCommand = (function (_super) {
    __extends(DeleteBucketLifecycleCommand, _super);
    function DeleteBucketLifecycleCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketLifecycleCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketLifecycleCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketLifecycleRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketLifecycleCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketLifecycleCommand(input, context);
    };
    DeleteBucketLifecycleCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketLifecycleCommand(output, context);
    };
    return DeleteBucketLifecycleCommand;
}(Command));

var DeleteBucketMetricsConfigurationCommand = (function (_super) {
    __extends(DeleteBucketMetricsConfigurationCommand, _super);
    function DeleteBucketMetricsConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketMetricsConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketMetricsConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketMetricsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketMetricsConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketMetricsConfigurationCommand(input, context);
    };
    DeleteBucketMetricsConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand(output, context);
    };
    return DeleteBucketMetricsConfigurationCommand;
}(Command));

var DeleteBucketOwnershipControlsCommand = (function (_super) {
    __extends(DeleteBucketOwnershipControlsCommand, _super);
    function DeleteBucketOwnershipControlsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketOwnershipControlsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketOwnershipControlsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketOwnershipControlsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketOwnershipControlsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketOwnershipControlsCommand(input, context);
    };
    DeleteBucketOwnershipControlsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketOwnershipControlsCommand(output, context);
    };
    return DeleteBucketOwnershipControlsCommand;
}(Command));

var DeleteBucketPolicyCommand = (function (_super) {
    __extends(DeleteBucketPolicyCommand, _super);
    function DeleteBucketPolicyCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketPolicyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketPolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketPolicyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketPolicyCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketPolicyCommand(input, context);
    };
    DeleteBucketPolicyCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketPolicyCommand(output, context);
    };
    return DeleteBucketPolicyCommand;
}(Command));

var DeleteBucketReplicationCommand = (function (_super) {
    __extends(DeleteBucketReplicationCommand, _super);
    function DeleteBucketReplicationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketReplicationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketReplicationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketReplicationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketReplicationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketReplicationCommand(input, context);
    };
    DeleteBucketReplicationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketReplicationCommand(output, context);
    };
    return DeleteBucketReplicationCommand;
}(Command));

var DeleteBucketTaggingCommand = (function (_super) {
    __extends(DeleteBucketTaggingCommand, _super);
    function DeleteBucketTaggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketTaggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketTaggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketTaggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketTaggingCommand(input, context);
    };
    DeleteBucketTaggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketTaggingCommand(output, context);
    };
    return DeleteBucketTaggingCommand;
}(Command));

var DeleteBucketWebsiteCommand = (function (_super) {
    __extends(DeleteBucketWebsiteCommand, _super);
    function DeleteBucketWebsiteCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteBucketWebsiteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteBucketWebsiteCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteBucketWebsiteRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteBucketWebsiteCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteBucketWebsiteCommand(input, context);
    };
    DeleteBucketWebsiteCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteBucketWebsiteCommand(output, context);
    };
    return DeleteBucketWebsiteCommand;
}(Command));

var DeleteObjectCommand = (function (_super) {
    __extends(DeleteObjectCommand, _super);
    function DeleteObjectCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: DeleteObjectOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteObjectCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteObjectCommand(input, context);
    };
    DeleteObjectCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteObjectCommand(output, context);
    };
    return DeleteObjectCommand;
}(Command));

var DeleteObjectsCommand = (function (_super) {
    __extends(DeleteObjectsCommand, _super);
    function DeleteObjectsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteObjectsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteObjectsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteObjectsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: DeleteObjectsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteObjectsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteObjectsCommand(input, context);
    };
    DeleteObjectsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteObjectsCommand(output, context);
    };
    return DeleteObjectsCommand;
}(Command));

var DeleteObjectTaggingCommand = (function (_super) {
    __extends(DeleteObjectTaggingCommand, _super);
    function DeleteObjectTaggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeleteObjectTaggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteObjectTaggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteObjectTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: DeleteObjectTaggingOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteObjectTaggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeleteObjectTaggingCommand(input, context);
    };
    DeleteObjectTaggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeleteObjectTaggingCommand(output, context);
    };
    return DeleteObjectTaggingCommand;
}(Command));

var DeletePublicAccessBlockCommand = (function (_super) {
    __extends(DeletePublicAccessBlockCommand, _super);
    function DeletePublicAccessBlockCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    DeletePublicAccessBlockCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeletePublicAccessBlockCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeletePublicAccessBlockRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeletePublicAccessBlockCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlDeletePublicAccessBlockCommand(input, context);
    };
    DeletePublicAccessBlockCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlDeletePublicAccessBlockCommand(output, context);
    };
    return DeletePublicAccessBlockCommand;
}(Command));

var GetBucketAccelerateConfigurationCommand = (function (_super) {
    __extends(GetBucketAccelerateConfigurationCommand, _super);
    function GetBucketAccelerateConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketAccelerateConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketAccelerateConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketAccelerateConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketAccelerateConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketAccelerateConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketAccelerateConfigurationCommand(input, context);
    };
    GetBucketAccelerateConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketAccelerateConfigurationCommand(output, context);
    };
    return GetBucketAccelerateConfigurationCommand;
}(Command));

var GetBucketAclCommand = (function (_super) {
    __extends(GetBucketAclCommand, _super);
    function GetBucketAclCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketAclCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketAclCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketAclOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketAclCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketAclCommand(input, context);
    };
    GetBucketAclCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketAclCommand(output, context);
    };
    return GetBucketAclCommand;
}(Command));

var GetBucketAnalyticsConfigurationCommand = (function (_super) {
    __extends(GetBucketAnalyticsConfigurationCommand, _super);
    function GetBucketAnalyticsConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketAnalyticsConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketAnalyticsConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketAnalyticsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketAnalyticsConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketAnalyticsConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketAnalyticsConfigurationCommand(input, context);
    };
    GetBucketAnalyticsConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand(output, context);
    };
    return GetBucketAnalyticsConfigurationCommand;
}(Command));

var GetBucketCorsCommand = (function (_super) {
    __extends(GetBucketCorsCommand, _super);
    function GetBucketCorsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketCorsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketCorsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketCorsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketCorsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketCorsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketCorsCommand(input, context);
    };
    GetBucketCorsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketCorsCommand(output, context);
    };
    return GetBucketCorsCommand;
}(Command));

var GetBucketEncryptionCommand = (function (_super) {
    __extends(GetBucketEncryptionCommand, _super);
    function GetBucketEncryptionCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketEncryptionCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketEncryptionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketEncryptionOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketEncryptionCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketEncryptionCommand(input, context);
    };
    GetBucketEncryptionCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketEncryptionCommand(output, context);
    };
    return GetBucketEncryptionCommand;
}(Command));

var GetBucketIntelligentTieringConfigurationCommand = (function (_super) {
    __extends(GetBucketIntelligentTieringConfigurationCommand, _super);
    function GetBucketIntelligentTieringConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketIntelligentTieringConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketIntelligentTieringConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketIntelligentTieringConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(input, context);
    };
    GetBucketIntelligentTieringConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(output, context);
    };
    return GetBucketIntelligentTieringConfigurationCommand;
}(Command));

var GetBucketInventoryConfigurationCommand = (function (_super) {
    __extends(GetBucketInventoryConfigurationCommand, _super);
    function GetBucketInventoryConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketInventoryConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketInventoryConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketInventoryConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketInventoryConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketInventoryConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketInventoryConfigurationCommand(input, context);
    };
    GetBucketInventoryConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketInventoryConfigurationCommand(output, context);
    };
    return GetBucketInventoryConfigurationCommand;
}(Command));

var GetBucketLifecycleConfigurationCommand = (function (_super) {
    __extends(GetBucketLifecycleConfigurationCommand, _super);
    function GetBucketLifecycleConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketLifecycleConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketLifecycleConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketLifecycleConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketLifecycleConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketLifecycleConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketLifecycleConfigurationCommand(input, context);
    };
    GetBucketLifecycleConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketLifecycleConfigurationCommand(output, context);
    };
    return GetBucketLifecycleConfigurationCommand;
}(Command));

var GetBucketLocationCommand = (function (_super) {
    __extends(GetBucketLocationCommand, _super);
    function GetBucketLocationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketLocationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketLocationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketLocationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketLocationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketLocationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketLocationCommand(input, context);
    };
    GetBucketLocationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketLocationCommand(output, context);
    };
    return GetBucketLocationCommand;
}(Command));

var GetBucketLoggingCommand = (function (_super) {
    __extends(GetBucketLoggingCommand, _super);
    function GetBucketLoggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketLoggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketLoggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketLoggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketLoggingOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketLoggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketLoggingCommand(input, context);
    };
    GetBucketLoggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketLoggingCommand(output, context);
    };
    return GetBucketLoggingCommand;
}(Command));

var GetBucketMetricsConfigurationCommand = (function (_super) {
    __extends(GetBucketMetricsConfigurationCommand, _super);
    function GetBucketMetricsConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketMetricsConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketMetricsConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketMetricsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketMetricsConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketMetricsConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketMetricsConfigurationCommand(input, context);
    };
    GetBucketMetricsConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketMetricsConfigurationCommand(output, context);
    };
    return GetBucketMetricsConfigurationCommand;
}(Command));

var GetBucketNotificationConfigurationCommand = (function (_super) {
    __extends(GetBucketNotificationConfigurationCommand, _super);
    function GetBucketNotificationConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketNotificationConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketNotificationConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketNotificationConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: NotificationConfigurationFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketNotificationConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketNotificationConfigurationCommand(input, context);
    };
    GetBucketNotificationConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketNotificationConfigurationCommand(output, context);
    };
    return GetBucketNotificationConfigurationCommand;
}(Command));

var GetBucketOwnershipControlsCommand = (function (_super) {
    __extends(GetBucketOwnershipControlsCommand, _super);
    function GetBucketOwnershipControlsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketOwnershipControlsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketOwnershipControlsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketOwnershipControlsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketOwnershipControlsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketOwnershipControlsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketOwnershipControlsCommand(input, context);
    };
    GetBucketOwnershipControlsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketOwnershipControlsCommand(output, context);
    };
    return GetBucketOwnershipControlsCommand;
}(Command));

var GetBucketPolicyCommand = (function (_super) {
    __extends(GetBucketPolicyCommand, _super);
    function GetBucketPolicyCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketPolicyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketPolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketPolicyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketPolicyOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketPolicyCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketPolicyCommand(input, context);
    };
    GetBucketPolicyCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketPolicyCommand(output, context);
    };
    return GetBucketPolicyCommand;
}(Command));

var GetBucketPolicyStatusCommand = (function (_super) {
    __extends(GetBucketPolicyStatusCommand, _super);
    function GetBucketPolicyStatusCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketPolicyStatusCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketPolicyStatusCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketPolicyStatusRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketPolicyStatusOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketPolicyStatusCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketPolicyStatusCommand(input, context);
    };
    GetBucketPolicyStatusCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketPolicyStatusCommand(output, context);
    };
    return GetBucketPolicyStatusCommand;
}(Command));

var GetBucketReplicationCommand = (function (_super) {
    __extends(GetBucketReplicationCommand, _super);
    function GetBucketReplicationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketReplicationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketReplicationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketReplicationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketReplicationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketReplicationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketReplicationCommand(input, context);
    };
    GetBucketReplicationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketReplicationCommand(output, context);
    };
    return GetBucketReplicationCommand;
}(Command));

var GetBucketRequestPaymentCommand = (function (_super) {
    __extends(GetBucketRequestPaymentCommand, _super);
    function GetBucketRequestPaymentCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketRequestPaymentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketRequestPaymentCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketRequestPaymentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketRequestPaymentOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketRequestPaymentCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketRequestPaymentCommand(input, context);
    };
    GetBucketRequestPaymentCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketRequestPaymentCommand(output, context);
    };
    return GetBucketRequestPaymentCommand;
}(Command));

var GetBucketTaggingCommand = (function (_super) {
    __extends(GetBucketTaggingCommand, _super);
    function GetBucketTaggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketTaggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketTaggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketTaggingOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketTaggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketTaggingCommand(input, context);
    };
    GetBucketTaggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketTaggingCommand(output, context);
    };
    return GetBucketTaggingCommand;
}(Command));

var GetBucketVersioningCommand = (function (_super) {
    __extends(GetBucketVersioningCommand, _super);
    function GetBucketVersioningCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketVersioningCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketVersioningCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketVersioningRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketVersioningOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketVersioningCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketVersioningCommand(input, context);
    };
    GetBucketVersioningCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketVersioningCommand(output, context);
    };
    return GetBucketVersioningCommand;
}(Command));

var GetBucketWebsiteCommand = (function (_super) {
    __extends(GetBucketWebsiteCommand, _super);
    function GetBucketWebsiteCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetBucketWebsiteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetBucketWebsiteCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetBucketWebsiteRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetBucketWebsiteOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetBucketWebsiteCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetBucketWebsiteCommand(input, context);
    };
    GetBucketWebsiteCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetBucketWebsiteCommand(output, context);
    };
    return GetBucketWebsiteCommand;
}(Command));

var GetObjectAclCommand = (function (_super) {
    __extends(GetObjectAclCommand, _super);
    function GetObjectAclCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectAclCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectAclCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectAclOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectAclCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectAclCommand(input, context);
    };
    GetObjectAclCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectAclCommand(output, context);
    };
    return GetObjectAclCommand;
}(Command));

var GetObjectAttributesCommand = (function (_super) {
    __extends(GetObjectAttributesCommand, _super);
    function GetObjectAttributesCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectAttributesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectAttributesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectAttributesRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectAttributesOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectAttributesCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectAttributesCommand(input, context);
    };
    GetObjectAttributesCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectAttributesCommand(output, context);
    };
    return GetObjectAttributesCommand;
}(Command));

var GetObjectCommand = (function (_super) {
    __extends(GetObjectCommand, _super);
    function GetObjectCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestChecksumRequired: false,
            requestValidationModeMember: "ChecksumMode",
            responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"],
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectCommand(input, context);
    };
    GetObjectCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectCommand(output, context);
    };
    return GetObjectCommand;
}(Command));

var GetObjectLegalHoldCommand = (function (_super) {
    __extends(GetObjectLegalHoldCommand, _super);
    function GetObjectLegalHoldCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectLegalHoldCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectLegalHoldCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectLegalHoldRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectLegalHoldOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectLegalHoldCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectLegalHoldCommand(input, context);
    };
    GetObjectLegalHoldCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectLegalHoldCommand(output, context);
    };
    return GetObjectLegalHoldCommand;
}(Command));

var GetObjectLockConfigurationCommand = (function (_super) {
    __extends(GetObjectLockConfigurationCommand, _super);
    function GetObjectLockConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectLockConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectLockConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectLockConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectLockConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectLockConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectLockConfigurationCommand(input, context);
    };
    GetObjectLockConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectLockConfigurationCommand(output, context);
    };
    return GetObjectLockConfigurationCommand;
}(Command));

var GetObjectRetentionCommand = (function (_super) {
    __extends(GetObjectRetentionCommand, _super);
    function GetObjectRetentionCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectRetentionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectRetentionCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectRetentionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectRetentionOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectRetentionCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectRetentionCommand(input, context);
    };
    GetObjectRetentionCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectRetentionCommand(output, context);
    };
    return GetObjectRetentionCommand;
}(Command));

var GetObjectTaggingCommand = (function (_super) {
    __extends(GetObjectTaggingCommand, _super);
    function GetObjectTaggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectTaggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectTaggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectTaggingOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectTaggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectTaggingCommand(input, context);
    };
    GetObjectTaggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectTaggingCommand(output, context);
    };
    return GetObjectTaggingCommand;
}(Command));

var GetObjectTorrentCommand = (function (_super) {
    __extends(GetObjectTorrentCommand, _super);
    function GetObjectTorrentCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetObjectTorrentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectTorrentCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetObjectTorrentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetObjectTorrentOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectTorrentCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetObjectTorrentCommand(input, context);
    };
    GetObjectTorrentCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetObjectTorrentCommand(output, context);
    };
    return GetObjectTorrentCommand;
}(Command));

var GetPublicAccessBlockCommand = (function (_super) {
    __extends(GetPublicAccessBlockCommand, _super);
    function GetPublicAccessBlockCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    GetPublicAccessBlockCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetPublicAccessBlockCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetPublicAccessBlockRequestFilterSensitiveLog,
            outputFilterSensitiveLog: GetPublicAccessBlockOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetPublicAccessBlockCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlGetPublicAccessBlockCommand(input, context);
    };
    GetPublicAccessBlockCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlGetPublicAccessBlockCommand(output, context);
    };
    return GetPublicAccessBlockCommand;
}(Command));

var HeadBucketCommand = (function (_super) {
    __extends(HeadBucketCommand, _super);
    function HeadBucketCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    HeadBucketCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "HeadBucketCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: HeadBucketRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    HeadBucketCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlHeadBucketCommand(input, context);
    };
    HeadBucketCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlHeadBucketCommand(output, context);
    };
    return HeadBucketCommand;
}(Command));

var HeadObjectCommand = (function (_super) {
    __extends(HeadObjectCommand, _super);
    function HeadObjectCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    HeadObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "HeadObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: HeadObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: HeadObjectOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    HeadObjectCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlHeadObjectCommand(input, context);
    };
    HeadObjectCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlHeadObjectCommand(output, context);
    };
    return HeadObjectCommand;
}(Command));

var ListBucketAnalyticsConfigurationsCommand = (function (_super) {
    __extends(ListBucketAnalyticsConfigurationsCommand, _super);
    function ListBucketAnalyticsConfigurationsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListBucketAnalyticsConfigurationsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListBucketAnalyticsConfigurationsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListBucketAnalyticsConfigurationsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListBucketAnalyticsConfigurationsCommand(input, context);
    };
    ListBucketAnalyticsConfigurationsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand(output, context);
    };
    return ListBucketAnalyticsConfigurationsCommand;
}(Command));

var ListBucketIntelligentTieringConfigurationsCommand = (function (_super) {
    __extends(ListBucketIntelligentTieringConfigurationsCommand, _super);
    function ListBucketIntelligentTieringConfigurationsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListBucketIntelligentTieringConfigurationsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListBucketIntelligentTieringConfigurationsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListBucketIntelligentTieringConfigurationsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(input, context);
    };
    ListBucketIntelligentTieringConfigurationsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(output, context);
    };
    return ListBucketIntelligentTieringConfigurationsCommand;
}(Command));

var ListBucketInventoryConfigurationsCommand = (function (_super) {
    __extends(ListBucketInventoryConfigurationsCommand, _super);
    function ListBucketInventoryConfigurationsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListBucketInventoryConfigurationsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListBucketInventoryConfigurationsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListBucketInventoryConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListBucketInventoryConfigurationsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListBucketInventoryConfigurationsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListBucketInventoryConfigurationsCommand(input, context);
    };
    ListBucketInventoryConfigurationsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListBucketInventoryConfigurationsCommand(output, context);
    };
    return ListBucketInventoryConfigurationsCommand;
}(Command));

var ListBucketMetricsConfigurationsCommand = (function (_super) {
    __extends(ListBucketMetricsConfigurationsCommand, _super);
    function ListBucketMetricsConfigurationsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListBucketMetricsConfigurationsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListBucketMetricsConfigurationsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListBucketMetricsConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListBucketMetricsConfigurationsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListBucketMetricsConfigurationsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListBucketMetricsConfigurationsCommand(input, context);
    };
    ListBucketMetricsConfigurationsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListBucketMetricsConfigurationsCommand(output, context);
    };
    return ListBucketMetricsConfigurationsCommand;
}(Command));

var ListBucketsCommand = (function (_super) {
    __extends(ListBucketsCommand, _super);
    function ListBucketsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListBucketsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListBucketsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: function (input) { return input; },
            outputFilterSensitiveLog: ListBucketsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListBucketsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListBucketsCommand(input, context);
    };
    ListBucketsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListBucketsCommand(output, context);
    };
    return ListBucketsCommand;
}(Command));

var ListMultipartUploadsCommand = (function (_super) {
    __extends(ListMultipartUploadsCommand, _super);
    function ListMultipartUploadsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListMultipartUploadsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListMultipartUploadsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListMultipartUploadsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListMultipartUploadsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListMultipartUploadsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListMultipartUploadsCommand(input, context);
    };
    ListMultipartUploadsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListMultipartUploadsCommand(output, context);
    };
    return ListMultipartUploadsCommand;
}(Command));

var ListObjectsCommand = (function (_super) {
    __extends(ListObjectsCommand, _super);
    function ListObjectsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListObjectsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListObjectsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListObjectsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListObjectsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListObjectsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListObjectsCommand(input, context);
    };
    ListObjectsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListObjectsCommand(output, context);
    };
    return ListObjectsCommand;
}(Command));

var ListObjectsV2Command = (function (_super) {
    __extends(ListObjectsV2Command, _super);
    function ListObjectsV2Command(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListObjectsV2Command.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListObjectsV2Command";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListObjectsV2RequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListObjectsV2OutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListObjectsV2Command.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListObjectsV2Command(input, context);
    };
    ListObjectsV2Command.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListObjectsV2Command(output, context);
    };
    return ListObjectsV2Command;
}(Command));

var ListObjectVersionsCommand = (function (_super) {
    __extends(ListObjectVersionsCommand, _super);
    function ListObjectVersionsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListObjectVersionsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListObjectVersionsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListObjectVersionsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListObjectVersionsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListObjectVersionsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListObjectVersionsCommand(input, context);
    };
    ListObjectVersionsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListObjectVersionsCommand(output, context);
    };
    return ListObjectVersionsCommand;
}(Command));

var ListPartsCommand = (function (_super) {
    __extends(ListPartsCommand, _super);
    function ListPartsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    ListPartsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListPartsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: ListPartsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: ListPartsOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListPartsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlListPartsCommand(input, context);
    };
    ListPartsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlListPartsCommand(output, context);
    };
    return ListPartsCommand;
}(Command));

var PutBucketAccelerateConfigurationCommand = (function (_super) {
    __extends(PutBucketAccelerateConfigurationCommand, _super);
    function PutBucketAccelerateConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketAccelerateConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketAccelerateConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketAccelerateConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketAccelerateConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketAccelerateConfigurationCommand(input, context);
    };
    PutBucketAccelerateConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketAccelerateConfigurationCommand(output, context);
    };
    return PutBucketAccelerateConfigurationCommand;
}(Command));

var PutBucketAclCommand = (function (_super) {
    __extends(PutBucketAclCommand, _super);
    function PutBucketAclCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketAclCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketAclCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketAclCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketAclCommand(input, context);
    };
    PutBucketAclCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketAclCommand(output, context);
    };
    return PutBucketAclCommand;
}(Command));

var PutBucketAnalyticsConfigurationCommand = (function (_super) {
    __extends(PutBucketAnalyticsConfigurationCommand, _super);
    function PutBucketAnalyticsConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketAnalyticsConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketAnalyticsConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketAnalyticsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketAnalyticsConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketAnalyticsConfigurationCommand(input, context);
    };
    PutBucketAnalyticsConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand(output, context);
    };
    return PutBucketAnalyticsConfigurationCommand;
}(Command));

var PutBucketCorsCommand = (function (_super) {
    __extends(PutBucketCorsCommand, _super);
    function PutBucketCorsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketCorsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketCorsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketCorsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketCorsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketCorsCommand(input, context);
    };
    PutBucketCorsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketCorsCommand(output, context);
    };
    return PutBucketCorsCommand;
}(Command));

var PutBucketEncryptionCommand = (function (_super) {
    __extends(PutBucketEncryptionCommand, _super);
    function PutBucketEncryptionCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketEncryptionCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketEncryptionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketEncryptionCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketEncryptionCommand(input, context);
    };
    PutBucketEncryptionCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketEncryptionCommand(output, context);
    };
    return PutBucketEncryptionCommand;
}(Command));

var PutBucketIntelligentTieringConfigurationCommand = (function (_super) {
    __extends(PutBucketIntelligentTieringConfigurationCommand, _super);
    function PutBucketIntelligentTieringConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketIntelligentTieringConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketIntelligentTieringConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketIntelligentTieringConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(input, context);
    };
    PutBucketIntelligentTieringConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(output, context);
    };
    return PutBucketIntelligentTieringConfigurationCommand;
}(Command));

var PutBucketInventoryConfigurationCommand = (function (_super) {
    __extends(PutBucketInventoryConfigurationCommand, _super);
    function PutBucketInventoryConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketInventoryConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketInventoryConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketInventoryConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketInventoryConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketInventoryConfigurationCommand(input, context);
    };
    PutBucketInventoryConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketInventoryConfigurationCommand(output, context);
    };
    return PutBucketInventoryConfigurationCommand;
}(Command));

var PutBucketLifecycleConfigurationCommand = (function (_super) {
    __extends(PutBucketLifecycleConfigurationCommand, _super);
    function PutBucketLifecycleConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketLifecycleConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketLifecycleConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketLifecycleConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketLifecycleConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketLifecycleConfigurationCommand(input, context);
    };
    PutBucketLifecycleConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketLifecycleConfigurationCommand(output, context);
    };
    return PutBucketLifecycleConfigurationCommand;
}(Command));

var PutBucketLoggingCommand = (function (_super) {
    __extends(PutBucketLoggingCommand, _super);
    function PutBucketLoggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketLoggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketLoggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketLoggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketLoggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketLoggingCommand(input, context);
    };
    PutBucketLoggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketLoggingCommand(output, context);
    };
    return PutBucketLoggingCommand;
}(Command));

var PutBucketMetricsConfigurationCommand = (function (_super) {
    __extends(PutBucketMetricsConfigurationCommand, _super);
    function PutBucketMetricsConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketMetricsConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketMetricsConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketMetricsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketMetricsConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketMetricsConfigurationCommand(input, context);
    };
    PutBucketMetricsConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketMetricsConfigurationCommand(output, context);
    };
    return PutBucketMetricsConfigurationCommand;
}(Command));

var PutBucketNotificationConfigurationCommand = (function (_super) {
    __extends(PutBucketNotificationConfigurationCommand, _super);
    function PutBucketNotificationConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketNotificationConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketNotificationConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketNotificationConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketNotificationConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);
    };
    PutBucketNotificationConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);
    };
    return PutBucketNotificationConfigurationCommand;
}(Command));

var PutBucketOwnershipControlsCommand = (function (_super) {
    __extends(PutBucketOwnershipControlsCommand, _super);
    function PutBucketOwnershipControlsCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketOwnershipControlsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, { input: this.input, requestChecksumRequired: true }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketOwnershipControlsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketOwnershipControlsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketOwnershipControlsCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketOwnershipControlsCommand(input, context);
    };
    PutBucketOwnershipControlsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketOwnershipControlsCommand(output, context);
    };
    return PutBucketOwnershipControlsCommand;
}(Command));

var PutBucketPolicyCommand = (function (_super) {
    __extends(PutBucketPolicyCommand, _super);
    function PutBucketPolicyCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketPolicyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketPolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketPolicyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketPolicyCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketPolicyCommand(input, context);
    };
    PutBucketPolicyCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketPolicyCommand(output, context);
    };
    return PutBucketPolicyCommand;
}(Command));

var PutBucketReplicationCommand = (function (_super) {
    __extends(PutBucketReplicationCommand, _super);
    function PutBucketReplicationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketReplicationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketReplicationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketReplicationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketReplicationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketReplicationCommand(input, context);
    };
    PutBucketReplicationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketReplicationCommand(output, context);
    };
    return PutBucketReplicationCommand;
}(Command));

var PutBucketRequestPaymentCommand = (function (_super) {
    __extends(PutBucketRequestPaymentCommand, _super);
    function PutBucketRequestPaymentCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketRequestPaymentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketRequestPaymentCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketRequestPaymentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketRequestPaymentCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketRequestPaymentCommand(input, context);
    };
    PutBucketRequestPaymentCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketRequestPaymentCommand(output, context);
    };
    return PutBucketRequestPaymentCommand;
}(Command));

var PutBucketTaggingCommand = (function (_super) {
    __extends(PutBucketTaggingCommand, _super);
    function PutBucketTaggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketTaggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketTaggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketTaggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketTaggingCommand(input, context);
    };
    PutBucketTaggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketTaggingCommand(output, context);
    };
    return PutBucketTaggingCommand;
}(Command));

var PutBucketVersioningCommand = (function (_super) {
    __extends(PutBucketVersioningCommand, _super);
    function PutBucketVersioningCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketVersioningCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketVersioningCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketVersioningRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketVersioningCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketVersioningCommand(input, context);
    };
    PutBucketVersioningCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketVersioningCommand(output, context);
    };
    return PutBucketVersioningCommand;
}(Command));

var PutBucketWebsiteCommand = (function (_super) {
    __extends(PutBucketWebsiteCommand, _super);
    function PutBucketWebsiteCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutBucketWebsiteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutBucketWebsiteCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutBucketWebsiteRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutBucketWebsiteCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutBucketWebsiteCommand(input, context);
    };
    PutBucketWebsiteCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutBucketWebsiteCommand(output, context);
    };
    return PutBucketWebsiteCommand;
}(Command));

var PutObjectAclCommand = (function (_super) {
    __extends(PutObjectAclCommand, _super);
    function PutObjectAclCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutObjectAclCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutObjectAclCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutObjectAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: PutObjectAclOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutObjectAclCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutObjectAclCommand(input, context);
    };
    PutObjectAclCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutObjectAclCommand(output, context);
    };
    return PutObjectAclCommand;
}(Command));

var PutObjectCommand = (function (_super) {
    __extends(PutObjectCommand, _super);
    function PutObjectCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getCheckContentLengthHeaderPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: PutObjectOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutObjectCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutObjectCommand(input, context);
    };
    PutObjectCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutObjectCommand(output, context);
    };
    return PutObjectCommand;
}(Command));

var PutObjectLegalHoldCommand = (function (_super) {
    __extends(PutObjectLegalHoldCommand, _super);
    function PutObjectLegalHoldCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutObjectLegalHoldCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutObjectLegalHoldCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutObjectLegalHoldRequestFilterSensitiveLog,
            outputFilterSensitiveLog: PutObjectLegalHoldOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutObjectLegalHoldCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutObjectLegalHoldCommand(input, context);
    };
    PutObjectLegalHoldCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutObjectLegalHoldCommand(output, context);
    };
    return PutObjectLegalHoldCommand;
}(Command));

var PutObjectLockConfigurationCommand = (function (_super) {
    __extends(PutObjectLockConfigurationCommand, _super);
    function PutObjectLockConfigurationCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutObjectLockConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutObjectLockConfigurationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutObjectLockConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: PutObjectLockConfigurationOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutObjectLockConfigurationCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutObjectLockConfigurationCommand(input, context);
    };
    PutObjectLockConfigurationCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutObjectLockConfigurationCommand(output, context);
    };
    return PutObjectLockConfigurationCommand;
}(Command));

var PutObjectRetentionCommand = (function (_super) {
    __extends(PutObjectRetentionCommand, _super);
    function PutObjectRetentionCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutObjectRetentionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutObjectRetentionCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutObjectRetentionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: PutObjectRetentionOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutObjectRetentionCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutObjectRetentionCommand(input, context);
    };
    PutObjectRetentionCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutObjectRetentionCommand(output, context);
    };
    return PutObjectRetentionCommand;
}(Command));

var PutObjectTaggingCommand = (function (_super) {
    __extends(PutObjectTaggingCommand, _super);
    function PutObjectTaggingCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutObjectTaggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutObjectTaggingCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutObjectTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: PutObjectTaggingOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutObjectTaggingCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutObjectTaggingCommand(input, context);
    };
    PutObjectTaggingCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutObjectTaggingCommand(output, context);
    };
    return PutObjectTaggingCommand;
}(Command));

var PutPublicAccessBlockCommand = (function (_super) {
    __extends(PutPublicAccessBlockCommand, _super);
    function PutPublicAccessBlockCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    PutPublicAccessBlockCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutPublicAccessBlockCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutPublicAccessBlockRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutPublicAccessBlockCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlPutPublicAccessBlockCommand(input, context);
    };
    PutPublicAccessBlockCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlPutPublicAccessBlockCommand(output, context);
    };
    return PutPublicAccessBlockCommand;
}(Command));

var RestoreObjectCommand = (function (_super) {
    __extends(RestoreObjectCommand, _super);
    function RestoreObjectCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    RestoreObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "RestoreObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: RestoreObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: RestoreObjectOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    RestoreObjectCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlRestoreObjectCommand(input, context);
    };
    RestoreObjectCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlRestoreObjectCommand(output, context);
    };
    return RestoreObjectCommand;
}(Command));

var SelectObjectContentCommand = (function (_super) {
    __extends(SelectObjectContentCommand, _super);
    function SelectObjectContentCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    SelectObjectContentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "SelectObjectContentCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: SelectObjectContentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: SelectObjectContentOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    SelectObjectContentCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlSelectObjectContentCommand(input, context);
    };
    SelectObjectContentCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlSelectObjectContentCommand(output, context);
    };
    return SelectObjectContentCommand;
}(Command));

var UploadPartCommand = (function (_super) {
    __extends(UploadPartCommand, _super);
    function UploadPartCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    UploadPartCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "UploadPartCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: UploadPartRequestFilterSensitiveLog,
            outputFilterSensitiveLog: UploadPartOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UploadPartCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlUploadPartCommand(input, context);
    };
    UploadPartCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlUploadPartCommand(output, context);
    };
    return UploadPartCommand;
}(Command));

var UploadPartCopyCommand = (function (_super) {
    __extends(UploadPartCopyCommand, _super);
    function UploadPartCopyCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    UploadPartCopyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getBucketEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "UploadPartCopyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: UploadPartCopyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: UploadPartCopyOutputFilterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UploadPartCopyCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlUploadPartCopyCommand(input, context);
    };
    UploadPartCopyCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlUploadPartCopyCommand(output, context);
    };
    return UploadPartCopyCommand;
}(Command));

var WriteGetObjectResponseCommand = (function (_super) {
    __extends(WriteGetObjectResponseCommand, _super);
    function WriteGetObjectResponseCommand(input) {
        var _this = _super.call(this) || this;
        _this.input = input;
        return _this;
    }
    WriteGetObjectResponseCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getWriteGetObjectResponseEndpointPlugin(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "WriteGetObjectResponseCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: WriteGetObjectResponseRequestFilterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    WriteGetObjectResponseCommand.prototype.serialize = function (input, context) {
        return serializeAws_restXmlWriteGetObjectResponseCommand(input, context);
    };
    WriteGetObjectResponseCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restXmlWriteGetObjectResponseCommand(output, context);
    };
    return WriteGetObjectResponseCommand;
}(Command));

const _from = "@aws-sdk/client-s3";
const _id = "@aws-sdk/client-s3@3.170.0";
const _inBundle = false;
const _integrity = "sha512-BXtsf/gTcVgIFtJo/q/+0mA4uePpYH6X37oNnGSNqCLSZ5mqPt9rmXiICzVpk8Zm1QKJQMCi9NAR1FBZac7tpQ==";
const _location = "/@aws-sdk/client-s3";
const _phantomChildren = {
};
const _requested = {
  type: "tag",
  registry: true,
  raw: "@aws-sdk/client-s3",
  name: "@aws-sdk/client-s3",
  escapedName: "@aws-sdk%2fclient-s3",
  scope: "@aws-sdk",
  rawSpec: "",
  saveSpec: null,
  fetchSpec: "latest"
};
const _requiredBy = [
  "#DEV:/",
  "#USER"
];
const _resolved = "https://registry.npmjs.org/@aws-sdk/client-s3/-/client-s3-3.170.0.tgz";
const _shasum = "a59f1dfcac690d47ea7ad4034d63d67f3117652d";
const _spec = "@aws-sdk/client-s3";
const _where = "F:\\FirstStep\\GitHubIssue2\\s3-multipart-error\\app";
const author = {
  name: "AWS SDK for JavaScript Team",
  url: "https://aws.amazon.com/javascript/"
};
const browser = {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
};
const bugs = {
  url: "https://github.com/aws/aws-sdk-js-v3/issues"
};
const bundleDependencies = false;
const dependencies = {
  "@aws-crypto/sha1-browser": "2.0.0",
  "@aws-crypto/sha256-browser": "2.0.0",
  "@aws-crypto/sha256-js": "2.0.0",
  "@aws-sdk/client-sts": "3.170.0",
  "@aws-sdk/config-resolver": "3.170.0",
  "@aws-sdk/credential-provider-node": "3.170.0",
  "@aws-sdk/eventstream-serde-browser": "3.170.0",
  "@aws-sdk/eventstream-serde-config-resolver": "3.170.0",
  "@aws-sdk/eventstream-serde-node": "3.170.0",
  "@aws-sdk/fetch-http-handler": "3.170.0",
  "@aws-sdk/hash-blob-browser": "3.170.0",
  "@aws-sdk/hash-node": "3.170.0",
  "@aws-sdk/hash-stream-node": "3.170.0",
  "@aws-sdk/invalid-dependency": "3.170.0",
  "@aws-sdk/md5-js": "3.170.0",
  "@aws-sdk/middleware-bucket-endpoint": "3.170.0",
  "@aws-sdk/middleware-content-length": "3.170.0",
  "@aws-sdk/middleware-expect-continue": "3.170.0",
  "@aws-sdk/middleware-flexible-checksums": "3.170.0",
  "@aws-sdk/middleware-host-header": "3.170.0",
  "@aws-sdk/middleware-location-constraint": "3.170.0",
  "@aws-sdk/middleware-logger": "3.170.0",
  "@aws-sdk/middleware-recursion-detection": "3.170.0",
  "@aws-sdk/middleware-retry": "3.170.0",
  "@aws-sdk/middleware-sdk-s3": "3.170.0",
  "@aws-sdk/middleware-serde": "3.170.0",
  "@aws-sdk/middleware-signing": "3.170.0",
  "@aws-sdk/middleware-ssec": "3.170.0",
  "@aws-sdk/middleware-stack": "3.170.0",
  "@aws-sdk/middleware-user-agent": "3.170.0",
  "@aws-sdk/node-config-provider": "3.170.0",
  "@aws-sdk/node-http-handler": "3.170.0",
  "@aws-sdk/protocol-http": "3.170.0",
  "@aws-sdk/signature-v4-multi-region": "3.170.0",
  "@aws-sdk/smithy-client": "3.170.0",
  "@aws-sdk/types": "3.170.0",
  "@aws-sdk/url-parser": "3.170.0",
  "@aws-sdk/util-base64-browser": "3.170.0",
  "@aws-sdk/util-base64-node": "3.170.0",
  "@aws-sdk/util-body-length-browser": "3.170.0",
  "@aws-sdk/util-body-length-node": "3.170.0",
  "@aws-sdk/util-defaults-mode-browser": "3.170.0",
  "@aws-sdk/util-defaults-mode-node": "3.170.0",
  "@aws-sdk/util-stream-browser": "3.170.0",
  "@aws-sdk/util-stream-node": "3.170.0",
  "@aws-sdk/util-user-agent-browser": "3.170.0",
  "@aws-sdk/util-user-agent-node": "3.170.0",
  "@aws-sdk/util-utf8-browser": "3.170.0",
  "@aws-sdk/util-utf8-node": "3.170.0",
  "@aws-sdk/util-waiter": "3.170.0",
  "@aws-sdk/xml-builder": "3.170.0",
  entities: "2.2.0",
  "fast-xml-parser": "3.19.0",
  tslib: "^2.3.1"
};
const deprecated = false;
const description = "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native";
const devDependencies = {
  "@aws-sdk/service-client-documentation-generator": "3.170.0",
  "@tsconfig/recommended": "1.0.1",
  "@types/chai": "^4.2.11",
  "@types/mocha": "^8.0.4",
  "@types/node": "^12.7.5",
  concurrently: "7.0.0",
  "downlevel-dts": "0.10.1",
  rimraf: "3.0.2",
  typedoc: "0.19.2",
  typescript: "~4.6.2"
};
const engines = {
  node: ">=12.0.0"
};
const files = [
  "dist-*"
];
const homepage = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3";
const license = "Apache-2.0";
const main = "./dist-cjs/index.js";
const module = "./dist-es/index.js";
const name = "@aws-sdk/client-s3";
const overrides = {
  typedoc: {
    typescript: "~4.6.2"
  }
};
const repository = {
  type: "git",
  url: "git+https://github.com/aws/aws-sdk-js-v3.git",
  directory: "clients/client-s3"
};
const scripts = {
  build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
  "build:cjs": "tsc -p tsconfig.cjs.json",
  "build:docs": "typedoc",
  "build:es": "tsc -p tsconfig.es.json",
  "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
  "build:types": "tsc -p tsconfig.types.json",
  "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
  clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
  test: "yarn test:unit",
  "test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js",
  "test:unit": "ts-mocha test/**/*.spec.ts"
};
const sideEffects = false;
const types = "./dist-types/index.d.ts";
const typesVersions = {
  "<4.0": {
    "dist-types/*": [
      "dist-types/ts3.4/*"
    ]
  }
};
const version = "3.170.0";
var packageInfo = {
  _from: _from,
  _id: _id,
  _inBundle: _inBundle,
  _integrity: _integrity,
  _location: _location,
  _phantomChildren: _phantomChildren,
  _requested: _requested,
  _requiredBy: _requiredBy,
  _resolved: _resolved,
  _shasum: _shasum,
  _spec: _spec,
  _where: _where,
  author: author,
  browser: browser,
  bugs: bugs,
  bundleDependencies: bundleDependencies,
  dependencies: dependencies,
  deprecated: deprecated,
  description: description,
  devDependencies: devDependencies,
  engines: engines,
  files: files,
  homepage: homepage,
  license: license,
  main: main,
  module: module,
  name: name,
  overrides: overrides,
  "react-native": {
  "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
},
  repository: repository,
  scripts: scripts,
  sideEffects: sideEffects,
  types: types,
  typesVersions: typesVersions,
  version: version
};

var regionHash = {
    "af-south-1": {
        variants: [
            {
                hostname: "s3.dualstack.af-south-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-east-1": {
        variants: [
            {
                hostname: "s3.dualstack.ap-east-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-northeast-1": {
        variants: [
            {
                hostname: "s3.ap-northeast-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3.dualstack.ap-northeast-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-northeast-2": {
        variants: [
            {
                hostname: "s3.dualstack.ap-northeast-2.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-northeast-3": {
        variants: [
            {
                hostname: "s3.dualstack.ap-northeast-3.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-south-1": {
        variants: [
            {
                hostname: "s3.dualstack.ap-south-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-southeast-1": {
        variants: [
            {
                hostname: "s3.ap-southeast-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3.dualstack.ap-southeast-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-southeast-2": {
        variants: [
            {
                hostname: "s3.ap-southeast-2.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3.dualstack.ap-southeast-2.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "ap-southeast-3": {
        variants: [
            {
                hostname: "s3.dualstack.ap-southeast-3.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "aws-global": {
        variants: [
            {
                hostname: "s3.amazonaws.com",
                tags: [],
            },
        ],
        signingRegion: "us-east-1",
    },
    "ca-central-1": {
        variants: [
            {
                hostname: "s3-fips.ca-central-1.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3-fips.dualstack.ca-central-1.amazonaws.com",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3.dualstack.ca-central-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "cn-north-1": {
        variants: [
            {
                hostname: "s3.dualstack.cn-north-1.amazonaws.com.cn",
                tags: ["dualstack"],
            },
        ],
    },
    "cn-northwest-1": {
        variants: [
            {
                hostname: "s3.dualstack.cn-northwest-1.amazonaws.com.cn",
                tags: ["dualstack"],
            },
        ],
    },
    "eu-central-1": {
        variants: [
            {
                hostname: "s3.dualstack.eu-central-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "eu-north-1": {
        variants: [
            {
                hostname: "s3.dualstack.eu-north-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "eu-south-1": {
        variants: [
            {
                hostname: "s3.dualstack.eu-south-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "eu-west-1": {
        variants: [
            {
                hostname: "s3.eu-west-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3.dualstack.eu-west-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "eu-west-2": {
        variants: [
            {
                hostname: "s3.dualstack.eu-west-2.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "eu-west-3": {
        variants: [
            {
                hostname: "s3.dualstack.eu-west-3.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "me-central-1": {
        variants: [
            {
                hostname: "s3.dualstack.me-central-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "me-south-1": {
        variants: [
            {
                hostname: "s3.dualstack.me-south-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "s3-external-1": {
        variants: [
            {
                hostname: "s3-external-1.amazonaws.com",
                tags: [],
            },
        ],
        signingRegion: "us-east-1",
    },
    "sa-east-1": {
        variants: [
            {
                hostname: "s3.sa-east-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3.dualstack.sa-east-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "us-east-1": {
        variants: [
            {
                hostname: "s3.us-east-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3-fips.dualstack.us-east-1.amazonaws.com",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3-fips.us-east-1.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3.dualstack.us-east-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "us-east-2": {
        variants: [
            {
                hostname: "s3-fips.dualstack.us-east-2.amazonaws.com",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3-fips.us-east-2.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3.dualstack.us-east-2.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "us-gov-east-1": {
        variants: [
            {
                hostname: "s3.us-gov-east-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3-fips.us-gov-east-1.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3.dualstack.us-gov-east-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "us-gov-west-1": {
        variants: [
            {
                hostname: "s3.us-gov-west-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3-fips.us-gov-west-1.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3.dualstack.us-gov-west-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "us-west-1": {
        variants: [
            {
                hostname: "s3.us-west-1.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3-fips.dualstack.us-west-1.amazonaws.com",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3-fips.us-west-1.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3.dualstack.us-west-1.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "us-west-2": {
        variants: [
            {
                hostname: "s3.us-west-2.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3-fips.dualstack.us-west-2.amazonaws.com",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3-fips.us-west-2.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3.dualstack.us-west-2.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
};
var partitionHash = {
    aws: {
        regions: [
            "af-south-1",
            "ap-east-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "aws-global",
            "ca-central-1",
            "eu-central-1",
            "eu-north-1",
            "eu-south-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "fips-ca-central-1",
            "fips-us-east-1",
            "fips-us-east-2",
            "fips-us-west-1",
            "fips-us-west-2",
            "me-central-1",
            "me-south-1",
            "s3-external-1",
            "sa-east-1",
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
            {
                hostname: "s3.{region}.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3-fips.{region}.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3-fips.dualstack.{region}.amazonaws.com",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3.dualstack.{region}.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
    "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
            {
                hostname: "s3.{region}.amazonaws.com.cn",
                tags: [],
            },
            {
                hostname: "s3-fips.{region}.amazonaws.com.cn",
                tags: ["fips"],
            },
            {
                hostname: "s3-fips.{region}.api.amazonwebservices.com.cn",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3.dualstack.{region}.amazonaws.com.cn",
                tags: ["dualstack"],
            },
        ],
    },
    "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
            {
                hostname: "s3.{region}.c2s.ic.gov",
                tags: [],
            },
            {
                hostname: "s3-fips.{region}.c2s.ic.gov",
                tags: ["fips"],
            },
        ],
    },
    "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
            {
                hostname: "s3.{region}.sc2s.sgov.gov",
                tags: [],
            },
            {
                hostname: "s3-fips.{region}.sc2s.sgov.gov",
                tags: ["fips"],
            },
        ],
    },
    "aws-us-gov": {
        regions: ["fips-us-gov-east-1", "fips-us-gov-west-1", "us-gov-east-1", "us-gov-west-1"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
            {
                hostname: "s3.{region}.amazonaws.com",
                tags: [],
            },
            {
                hostname: "s3-fips.{region}.amazonaws.com",
                tags: ["fips"],
            },
            {
                hostname: "s3-fips.dualstack.{region}.amazonaws.com",
                tags: ["dualstack", "fips"],
            },
            {
                hostname: "s3.dualstack.{region}.amazonaws.com",
                tags: ["dualstack"],
            },
        ],
    },
};
var defaultRegionInfoProvider = function (region, options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, getRegionInfo(region, __assign(__assign({}, options), { signingService: "s3", regionHash: regionHash, partitionHash: partitionHash }))];
    });
}); };

var getRuntimeConfig = function (config) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return ({
        apiVersion: "2006-03-01",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "S3",
        signerConstructor: (_e = config === null || config === void 0 ? void 0 : config.signerConstructor) !== null && _e !== void 0 ? _e : SignatureV4MultiRegion,
        signingEscapePath: (_f = config === null || config === void 0 ? void 0 : config.signingEscapePath) !== null && _f !== void 0 ? _f : false,
        urlParser: (_g = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _g !== void 0 ? _g : parseUrl,
        useArnRegion: (_h = config === null || config === void 0 ? void 0 : config.useArnRegion) !== null && _h !== void 0 ? _h : false,
    });
};

var getRuntimeConfig$1 = function (config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    var defaultsMode = resolveDefaultsModeConfig(config);
    var defaultConfigProvider = function () { return defaultsMode().then(loadConfigsForDefaultMode); };
    var clientSharedValues = getRuntimeConfig(config);
    return __assign(__assign(__assign({}, clientSharedValues), config), { runtime: "browser", defaultsMode: defaultsMode, base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase64, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase64, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (function (_) { return function () { return Promise.reject(new Error("Credential is missing")); }; }), defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }), eventStreamSerdeProvider: (_f = config === null || config === void 0 ? void 0 : config.eventStreamSerdeProvider) !== null && _f !== void 0 ? _f : eventStreamSerdeProvider, getAwsChunkedEncodingStream: (_g = config === null || config === void 0 ? void 0 : config.getAwsChunkedEncodingStream) !== null && _g !== void 0 ? _g : getAwsChunkedEncodingStream, maxAttempts: (_h = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _h !== void 0 ? _h : DEFAULT_MAX_ATTEMPTS, md5: (_j = config === null || config === void 0 ? void 0 : config.md5) !== null && _j !== void 0 ? _j : Md5, region: (_k = config === null || config === void 0 ? void 0 : config.region) !== null && _k !== void 0 ? _k : invalidProvider("Region is missing"), requestHandler: (_l = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _l !== void 0 ? _l : new FetchHttpHandler(defaultConfigProvider), retryMode: (_m = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _m !== void 0 ? _m : (function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, defaultConfigProvider()];
                case 1: return [2, (_a.sent()).retryMode || DEFAULT_RETRY_MODE];
            }
        }); }); }), sha1: (_o = config === null || config === void 0 ? void 0 : config.sha1) !== null && _o !== void 0 ? _o : Sha1, sha256: (_p = config === null || config === void 0 ? void 0 : config.sha256) !== null && _p !== void 0 ? _p : Sha256, streamCollector: (_q = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _q !== void 0 ? _q : streamCollector, streamHasher: (_r = config === null || config === void 0 ? void 0 : config.streamHasher) !== null && _r !== void 0 ? _r : blobHasher, useDualstackEndpoint: (_s = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _s !== void 0 ? _s : (function () { return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT); }), useFipsEndpoint: (_t = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _t !== void 0 ? _t : (function () { return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT); }), utf8Decoder: (_u = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _u !== void 0 ? _u : fromUtf8, utf8Encoder: (_v = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _v !== void 0 ? _v : toUtf8 });
};

var S3Client = (function (_super) {
    __extends(S3Client, _super);
    function S3Client(configuration) {
        var _this = this;
        var _config_0 = getRuntimeConfig$1(configuration);
        var _config_1 = resolveRegionConfig(_config_0);
        var _config_2 = resolveEndpointsConfig(_config_1);
        var _config_3 = resolveRetryConfig(_config_2);
        var _config_4 = resolveHostHeaderConfig(_config_3);
        var _config_5 = resolveAwsAuthConfig(_config_4);
        var _config_6 = resolveBucketEndpointConfig(_config_5);
        var _config_7 = resolveUserAgentConfig(_config_6);
        var _config_8 = resolveEventStreamSerdeConfig(_config_7);
        _this = _super.call(this, _config_8) || this;
        _this.config = _config_8;
        _this.middlewareStack.use(getRetryPlugin(_this.config));
        _this.middlewareStack.use(getContentLengthPlugin(_this.config));
        _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
        _this.middlewareStack.use(getLoggerPlugin(_this.config));
        _this.middlewareStack.use(getRecursionDetectionPlugin(_this.config));
        _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
        _this.middlewareStack.use(getValidateBucketNamePlugin(_this.config));
        _this.middlewareStack.use(getAddExpectContinuePlugin(_this.config));
        _this.middlewareStack.use(getUserAgentPlugin(_this.config));
        return _this;
    }
    S3Client.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    return S3Client;
}(Client));

var S3 = (function (_super) {
    __extends(S3, _super);
    function S3() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    S3.prototype.abortMultipartUpload = function (args, optionsOrCb, cb) {
        var command = new AbortMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.completeMultipartUpload = function (args, optionsOrCb, cb) {
        var command = new CompleteMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.copyObject = function (args, optionsOrCb, cb) {
        var command = new CopyObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.createBucket = function (args, optionsOrCb, cb) {
        var command = new CreateBucketCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.createMultipartUpload = function (args, optionsOrCb, cb) {
        var command = new CreateMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucket = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketAnalyticsConfiguration = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketCors = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketEncryption = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketIntelligentTieringConfiguration = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketInventoryConfiguration = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketLifecycle = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketLifecycleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketMetricsConfiguration = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketOwnershipControls = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketReplication = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketTagging = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteBucketWebsite = function (args, optionsOrCb, cb) {
        var command = new DeleteBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteObject = function (args, optionsOrCb, cb) {
        var command = new DeleteObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteObjects = function (args, optionsOrCb, cb) {
        var command = new DeleteObjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deleteObjectTagging = function (args, optionsOrCb, cb) {
        var command = new DeleteObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.deletePublicAccessBlock = function (args, optionsOrCb, cb) {
        var command = new DeletePublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketAccelerateConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetBucketAccelerateConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketAcl = function (args, optionsOrCb, cb) {
        var command = new GetBucketAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketAnalyticsConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketCors = function (args, optionsOrCb, cb) {
        var command = new GetBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketEncryption = function (args, optionsOrCb, cb) {
        var command = new GetBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketIntelligentTieringConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketInventoryConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketLifecycleConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetBucketLifecycleConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketLocation = function (args, optionsOrCb, cb) {
        var command = new GetBucketLocationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketLogging = function (args, optionsOrCb, cb) {
        var command = new GetBucketLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketMetricsConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketNotificationConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetBucketNotificationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketOwnershipControls = function (args, optionsOrCb, cb) {
        var command = new GetBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketPolicy = function (args, optionsOrCb, cb) {
        var command = new GetBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketPolicyStatus = function (args, optionsOrCb, cb) {
        var command = new GetBucketPolicyStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketReplication = function (args, optionsOrCb, cb) {
        var command = new GetBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketRequestPayment = function (args, optionsOrCb, cb) {
        var command = new GetBucketRequestPaymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketTagging = function (args, optionsOrCb, cb) {
        var command = new GetBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketVersioning = function (args, optionsOrCb, cb) {
        var command = new GetBucketVersioningCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getBucketWebsite = function (args, optionsOrCb, cb) {
        var command = new GetBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObject = function (args, optionsOrCb, cb) {
        var command = new GetObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObjectAcl = function (args, optionsOrCb, cb) {
        var command = new GetObjectAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObjectAttributes = function (args, optionsOrCb, cb) {
        var command = new GetObjectAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObjectLegalHold = function (args, optionsOrCb, cb) {
        var command = new GetObjectLegalHoldCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObjectLockConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetObjectLockConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObjectRetention = function (args, optionsOrCb, cb) {
        var command = new GetObjectRetentionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObjectTagging = function (args, optionsOrCb, cb) {
        var command = new GetObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getObjectTorrent = function (args, optionsOrCb, cb) {
        var command = new GetObjectTorrentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.getPublicAccessBlock = function (args, optionsOrCb, cb) {
        var command = new GetPublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.headBucket = function (args, optionsOrCb, cb) {
        var command = new HeadBucketCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.headObject = function (args, optionsOrCb, cb) {
        var command = new HeadObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listBucketAnalyticsConfigurations = function (args, optionsOrCb, cb) {
        var command = new ListBucketAnalyticsConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listBucketIntelligentTieringConfigurations = function (args, optionsOrCb, cb) {
        var command = new ListBucketIntelligentTieringConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listBucketInventoryConfigurations = function (args, optionsOrCb, cb) {
        var command = new ListBucketInventoryConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listBucketMetricsConfigurations = function (args, optionsOrCb, cb) {
        var command = new ListBucketMetricsConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listBuckets = function (args, optionsOrCb, cb) {
        var command = new ListBucketsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listMultipartUploads = function (args, optionsOrCb, cb) {
        var command = new ListMultipartUploadsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listObjects = function (args, optionsOrCb, cb) {
        var command = new ListObjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listObjectsV2 = function (args, optionsOrCb, cb) {
        var command = new ListObjectsV2Command(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listObjectVersions = function (args, optionsOrCb, cb) {
        var command = new ListObjectVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.listParts = function (args, optionsOrCb, cb) {
        var command = new ListPartsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketAccelerateConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutBucketAccelerateConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketAcl = function (args, optionsOrCb, cb) {
        var command = new PutBucketAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketAnalyticsConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketCors = function (args, optionsOrCb, cb) {
        var command = new PutBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketEncryption = function (args, optionsOrCb, cb) {
        var command = new PutBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketIntelligentTieringConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketInventoryConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketLifecycleConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutBucketLifecycleConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketLogging = function (args, optionsOrCb, cb) {
        var command = new PutBucketLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketMetricsConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketNotificationConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutBucketNotificationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketOwnershipControls = function (args, optionsOrCb, cb) {
        var command = new PutBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketPolicy = function (args, optionsOrCb, cb) {
        var command = new PutBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketReplication = function (args, optionsOrCb, cb) {
        var command = new PutBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketRequestPayment = function (args, optionsOrCb, cb) {
        var command = new PutBucketRequestPaymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketTagging = function (args, optionsOrCb, cb) {
        var command = new PutBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketVersioning = function (args, optionsOrCb, cb) {
        var command = new PutBucketVersioningCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putBucketWebsite = function (args, optionsOrCb, cb) {
        var command = new PutBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putObject = function (args, optionsOrCb, cb) {
        var command = new PutObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putObjectAcl = function (args, optionsOrCb, cb) {
        var command = new PutObjectAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putObjectLegalHold = function (args, optionsOrCb, cb) {
        var command = new PutObjectLegalHoldCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putObjectLockConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutObjectLockConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putObjectRetention = function (args, optionsOrCb, cb) {
        var command = new PutObjectRetentionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putObjectTagging = function (args, optionsOrCb, cb) {
        var command = new PutObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.putPublicAccessBlock = function (args, optionsOrCb, cb) {
        var command = new PutPublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.restoreObject = function (args, optionsOrCb, cb) {
        var command = new RestoreObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.selectObjectContent = function (args, optionsOrCb, cb) {
        var command = new SelectObjectContentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.uploadPart = function (args, optionsOrCb, cb) {
        var command = new UploadPartCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.uploadPartCopy = function (args, optionsOrCb, cb) {
        var command = new UploadPartCopyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    S3.prototype.writeGetObjectResponse = function (args, optionsOrCb, cb) {
        var command = new WriteGetObjectResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return S3;
}(S3Client));

var makePagedClientRequest = function (client, input) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, client.send.apply(client, __spreadArray([new ListObjectsV2Command(input)], __read(args), false))];
                case 1: return [2, _a.sent()];
            }
        });
    });
};
var makePagedRequest = function (client, input) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, client.listObjectsV2.apply(client, __spreadArray([input], __read(args), false))];
                case 1: return [2, _a.sent()];
            }
        });
    });
};
function paginateListObjectsV2(config, input) {
    var additionalArguments = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        additionalArguments[_i - 2] = arguments[_i];
    }
    return __asyncGenerator(this, arguments, function paginateListObjectsV2_1() {
        var token, hasNext, page, prevToken;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [3, 9];
                    input.ContinuationToken = token;
                    input["MaxKeys"] = config.pageSize;
                    if (!(config.client instanceof S3)) return [3, 3];
                    return [4, __await(makePagedRequest.apply(void 0, __spreadArray([config.client, input], __read(additionalArguments), false)))];
                case 2:
                    page = _a.sent();
                    return [3, 6];
                case 3:
                    if (!(config.client instanceof S3Client)) return [3, 5];
                    return [4, __await(makePagedClientRequest.apply(void 0, __spreadArray([config.client, input], __read(additionalArguments), false)))];
                case 4:
                    page = _a.sent();
                    return [3, 6];
                case 5: throw new Error("Invalid client, expected S3 | S3Client");
                case 6: return [4, __await(page)];
                case 7: return [4, _a.sent()];
                case 8:
                    _a.sent();
                    prevToken = token;
                    token = page.NextContinuationToken;
                    hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
                    return [3, 1];
                case 9: return [4, __await(undefined)];
                case 10: return [2, _a.sent()];
            }
        });
    });
}

var makePagedClientRequest$1 = function (client, input) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, client.send.apply(client, __spreadArray([new ListPartsCommand(input)], __read(args), false))];
                case 1: return [2, _a.sent()];
            }
        });
    });
};
var makePagedRequest$1 = function (client, input) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, client.listParts.apply(client, __spreadArray([input], __read(args), false))];
                case 1: return [2, _a.sent()];
            }
        });
    });
};
function paginateListParts(config, input) {
    var additionalArguments = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        additionalArguments[_i - 2] = arguments[_i];
    }
    return __asyncGenerator(this, arguments, function paginateListParts_1() {
        var token, hasNext, page, prevToken;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [3, 9];
                    input.PartNumberMarker = token;
                    input["MaxParts"] = config.pageSize;
                    if (!(config.client instanceof S3)) return [3, 3];
                    return [4, __await(makePagedRequest$1.apply(void 0, __spreadArray([config.client, input], __read(additionalArguments), false)))];
                case 2:
                    page = _a.sent();
                    return [3, 6];
                case 3:
                    if (!(config.client instanceof S3Client)) return [3, 5];
                    return [4, __await(makePagedClientRequest$1.apply(void 0, __spreadArray([config.client, input], __read(additionalArguments), false)))];
                case 4:
                    page = _a.sent();
                    return [3, 6];
                case 5: throw new Error("Invalid client, expected S3 | S3Client");
                case 6: return [4, __await(page)];
                case 7: return [4, _a.sent()];
                case 8:
                    _a.sent();
                    prevToken = token;
                    token = page.NextPartNumberMarker;
                    hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
                    return [3, 1];
                case 9: return [4, __await(undefined)];
                case 10: return [2, _a.sent()];
            }
        });
    });
}

var checkState = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {
    var reason, result, exception_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, client.send(new HeadBucketCommand(input))];
            case 1:
                result = _a.sent();
                reason = result;
                return [2, { state: WaiterState.SUCCESS, reason: reason }];
            case 2:
                exception_1 = _a.sent();
                reason = exception_1;
                if (exception_1.name && exception_1.name == "NotFound") {
                    return [2, { state: WaiterState.RETRY, reason: reason }];
                }
                return [3, 3];
            case 3: return [2, { state: WaiterState.RETRY, reason: reason }];
        }
    });
}); };
var waitForBucketExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults;
    return __generator(this, function (_a) {
        serviceDefaults = { minDelay: 5, maxDelay: 120 };
        return [2, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];
    });
}); };
var waitUntilBucketExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                serviceDefaults = { minDelay: 5, maxDelay: 120 };
                return [4, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];
            case 1:
                result = _a.sent();
                return [2, checkExceptions(result)];
        }
    });
}); };

var checkState$1 = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {
    var reason, result, exception_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, client.send(new HeadBucketCommand(input))];
            case 1:
                result = _a.sent();
                reason = result;
                return [3, 3];
            case 2:
                exception_1 = _a.sent();
                reason = exception_1;
                if (exception_1.name && exception_1.name == "NotFound") {
                    return [2, { state: WaiterState.SUCCESS, reason: reason }];
                }
                return [3, 3];
            case 3: return [2, { state: WaiterState.RETRY, reason: reason }];
        }
    });
}); };
var waitForBucketNotExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults;
    return __generator(this, function (_a) {
        serviceDefaults = { minDelay: 5, maxDelay: 120 };
        return [2, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState$1)];
    });
}); };
var waitUntilBucketNotExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                serviceDefaults = { minDelay: 5, maxDelay: 120 };
                return [4, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState$1)];
            case 1:
                result = _a.sent();
                return [2, checkExceptions(result)];
        }
    });
}); };

var checkState$2 = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {
    var reason, result, exception_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, client.send(new HeadObjectCommand(input))];
            case 1:
                result = _a.sent();
                reason = result;
                return [2, { state: WaiterState.SUCCESS, reason: reason }];
            case 2:
                exception_1 = _a.sent();
                reason = exception_1;
                if (exception_1.name && exception_1.name == "NotFound") {
                    return [2, { state: WaiterState.RETRY, reason: reason }];
                }
                return [3, 3];
            case 3: return [2, { state: WaiterState.RETRY, reason: reason }];
        }
    });
}); };
var waitForObjectExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults;
    return __generator(this, function (_a) {
        serviceDefaults = { minDelay: 5, maxDelay: 120 };
        return [2, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState$2)];
    });
}); };
var waitUntilObjectExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                serviceDefaults = { minDelay: 5, maxDelay: 120 };
                return [4, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState$2)];
            case 1:
                result = _a.sent();
                return [2, checkExceptions(result)];
        }
    });
}); };

var checkState$3 = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {
    var reason, result, exception_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, client.send(new HeadObjectCommand(input))];
            case 1:
                result = _a.sent();
                reason = result;
                return [3, 3];
            case 2:
                exception_1 = _a.sent();
                reason = exception_1;
                if (exception_1.name && exception_1.name == "NotFound") {
                    return [2, { state: WaiterState.SUCCESS, reason: reason }];
                }
                return [3, 3];
            case 3: return [2, { state: WaiterState.RETRY, reason: reason }];
        }
    });
}); };
var waitForObjectNotExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults;
    return __generator(this, function (_a) {
        serviceDefaults = { minDelay: 5, maxDelay: 120 };
        return [2, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState$3)];
    });
}); };
var waitUntilObjectNotExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                serviceDefaults = { minDelay: 5, maxDelay: 120 };
                return [4, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState$3)];
            case 1:
                result = _a.sent();
                return [2, checkExceptions(result)];
        }
    });
}); };

export { AbortIncompleteMultipartUploadFilterSensitiveLog, AbortMultipartUploadCommand, AbortMultipartUploadOutputFilterSensitiveLog, AbortMultipartUploadRequestFilterSensitiveLog, AccelerateConfigurationFilterSensitiveLog, AccessControlPolicyFilterSensitiveLog, AccessControlTranslationFilterSensitiveLog, AnalyticsAndOperatorFilterSensitiveLog, AnalyticsConfigurationFilterSensitiveLog, AnalyticsExportDestinationFilterSensitiveLog, AnalyticsFilter, AnalyticsFilterFilterSensitiveLog, AnalyticsS3BucketDestinationFilterSensitiveLog, BucketAlreadyExists, BucketAlreadyOwnedByYou, BucketFilterSensitiveLog, BucketLifecycleConfigurationFilterSensitiveLog, BucketLoggingStatusFilterSensitiveLog, CORSConfigurationFilterSensitiveLog, CORSRuleFilterSensitiveLog, CSVInputFilterSensitiveLog, CSVOutputFilterSensitiveLog, ChecksumAlgorithm, ChecksumFilterSensitiveLog, ChecksumMode, CommonPrefixFilterSensitiveLog, CompleteMultipartUploadCommand, CompleteMultipartUploadOutputFilterSensitiveLog, CompleteMultipartUploadRequestFilterSensitiveLog, CompletedMultipartUploadFilterSensitiveLog, CompletedPartFilterSensitiveLog, ConditionFilterSensitiveLog, ContinuationEventFilterSensitiveLog, CopyObjectCommand, CopyObjectOutputFilterSensitiveLog, CopyObjectRequestFilterSensitiveLog, CopyObjectResultFilterSensitiveLog, CopyPartResultFilterSensitiveLog, CreateBucketCommand, CreateBucketConfigurationFilterSensitiveLog, CreateBucketOutputFilterSensitiveLog, CreateBucketRequestFilterSensitiveLog, CreateMultipartUploadCommand, CreateMultipartUploadOutputFilterSensitiveLog, CreateMultipartUploadRequestFilterSensitiveLog, DefaultRetentionFilterSensitiveLog, DeleteBucketAnalyticsConfigurationCommand, DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog, DeleteBucketCommand, DeleteBucketCorsCommand, DeleteBucketCorsRequestFilterSensitiveLog, DeleteBucketEncryptionCommand, DeleteBucketEncryptionRequestFilterSensitiveLog, DeleteBucketIntelligentTieringConfigurationCommand, DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog, DeleteBucketInventoryConfigurationCommand, DeleteBucketInventoryConfigurationRequestFilterSensitiveLog, DeleteBucketLifecycleCommand, DeleteBucketLifecycleRequestFilterSensitiveLog, DeleteBucketMetricsConfigurationCommand, DeleteBucketMetricsConfigurationRequestFilterSensitiveLog, DeleteBucketOwnershipControlsCommand, DeleteBucketOwnershipControlsRequestFilterSensitiveLog, DeleteBucketPolicyCommand, DeleteBucketPolicyRequestFilterSensitiveLog, DeleteBucketReplicationCommand, DeleteBucketReplicationRequestFilterSensitiveLog, DeleteBucketRequestFilterSensitiveLog, DeleteBucketTaggingCommand, DeleteBucketTaggingRequestFilterSensitiveLog, DeleteBucketWebsiteCommand, DeleteBucketWebsiteRequestFilterSensitiveLog, DeleteFilterSensitiveLog, DeleteMarkerEntryFilterSensitiveLog, DeleteMarkerReplicationFilterSensitiveLog, DeleteObjectCommand, DeleteObjectOutputFilterSensitiveLog, DeleteObjectRequestFilterSensitiveLog, DeleteObjectTaggingCommand, DeleteObjectTaggingOutputFilterSensitiveLog, DeleteObjectTaggingRequestFilterSensitiveLog, DeleteObjectsCommand, DeleteObjectsOutputFilterSensitiveLog, DeleteObjectsRequestFilterSensitiveLog, DeletePublicAccessBlockCommand, DeletePublicAccessBlockRequestFilterSensitiveLog, DeletedObjectFilterSensitiveLog, DestinationFilterSensitiveLog, EncryptionConfigurationFilterSensitiveLog, EncryptionFilterSensitiveLog, EndEventFilterSensitiveLog, ErrorDocumentFilterSensitiveLog, EventBridgeConfigurationFilterSensitiveLog, ExistingObjectReplicationFilterSensitiveLog, FileHeaderInfo, FilterRuleFilterSensitiveLog, GetBucketAccelerateConfigurationCommand, GetBucketAccelerateConfigurationOutputFilterSensitiveLog, GetBucketAccelerateConfigurationRequestFilterSensitiveLog, GetBucketAclCommand, GetBucketAclOutputFilterSensitiveLog, GetBucketAclRequestFilterSensitiveLog, GetBucketAnalyticsConfigurationCommand, GetBucketAnalyticsConfigurationOutputFilterSensitiveLog, GetBucketAnalyticsConfigurationRequestFilterSensitiveLog, GetBucketCorsCommand, GetBucketCorsOutputFilterSensitiveLog, GetBucketCorsRequestFilterSensitiveLog, GetBucketEncryptionCommand, GetBucketEncryptionOutputFilterSensitiveLog, GetBucketEncryptionRequestFilterSensitiveLog, GetBucketIntelligentTieringConfigurationCommand, GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog, GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog, GetBucketInventoryConfigurationCommand, GetBucketInventoryConfigurationOutputFilterSensitiveLog, GetBucketInventoryConfigurationRequestFilterSensitiveLog, GetBucketLifecycleConfigurationCommand, GetBucketLifecycleConfigurationOutputFilterSensitiveLog, GetBucketLifecycleConfigurationRequestFilterSensitiveLog, GetBucketLocationCommand, GetBucketLocationOutputFilterSensitiveLog, GetBucketLocationRequestFilterSensitiveLog, GetBucketLoggingCommand, GetBucketLoggingOutputFilterSensitiveLog, GetBucketLoggingRequestFilterSensitiveLog, GetBucketMetricsConfigurationCommand, GetBucketMetricsConfigurationOutputFilterSensitiveLog, GetBucketMetricsConfigurationRequestFilterSensitiveLog, GetBucketNotificationConfigurationCommand, GetBucketNotificationConfigurationRequestFilterSensitiveLog, GetBucketOwnershipControlsCommand, GetBucketOwnershipControlsOutputFilterSensitiveLog, GetBucketOwnershipControlsRequestFilterSensitiveLog, GetBucketPolicyCommand, GetBucketPolicyOutputFilterSensitiveLog, GetBucketPolicyRequestFilterSensitiveLog, GetBucketPolicyStatusCommand, GetBucketPolicyStatusOutputFilterSensitiveLog, GetBucketPolicyStatusRequestFilterSensitiveLog, GetBucketReplicationCommand, GetBucketReplicationOutputFilterSensitiveLog, GetBucketReplicationRequestFilterSensitiveLog, GetBucketRequestPaymentCommand, GetBucketRequestPaymentOutputFilterSensitiveLog, GetBucketRequestPaymentRequestFilterSensitiveLog, GetBucketTaggingCommand, GetBucketTaggingOutputFilterSensitiveLog, GetBucketTaggingRequestFilterSensitiveLog, GetBucketVersioningCommand, GetBucketVersioningOutputFilterSensitiveLog, GetBucketVersioningRequestFilterSensitiveLog, GetBucketWebsiteCommand, GetBucketWebsiteOutputFilterSensitiveLog, GetBucketWebsiteRequestFilterSensitiveLog, GetObjectAclCommand, GetObjectAclOutputFilterSensitiveLog, GetObjectAclRequestFilterSensitiveLog, GetObjectAttributesCommand, GetObjectAttributesOutputFilterSensitiveLog, GetObjectAttributesPartsFilterSensitiveLog, GetObjectAttributesRequestFilterSensitiveLog, GetObjectCommand, GetObjectLegalHoldCommand, GetObjectLegalHoldOutputFilterSensitiveLog, GetObjectLegalHoldRequestFilterSensitiveLog, GetObjectLockConfigurationCommand, GetObjectLockConfigurationOutputFilterSensitiveLog, GetObjectLockConfigurationRequestFilterSensitiveLog, GetObjectOutputFilterSensitiveLog, GetObjectRequestFilterSensitiveLog, GetObjectRetentionCommand, GetObjectRetentionOutputFilterSensitiveLog, GetObjectRetentionRequestFilterSensitiveLog, GetObjectTaggingCommand, GetObjectTaggingOutputFilterSensitiveLog, GetObjectTaggingRequestFilterSensitiveLog, GetObjectTorrentCommand, GetObjectTorrentOutputFilterSensitiveLog, GetObjectTorrentRequestFilterSensitiveLog, GetPublicAccessBlockCommand, GetPublicAccessBlockOutputFilterSensitiveLog, GetPublicAccessBlockRequestFilterSensitiveLog, GlacierJobParametersFilterSensitiveLog, GrantFilterSensitiveLog, GranteeFilterSensitiveLog, HeadBucketCommand, HeadBucketRequestFilterSensitiveLog, HeadObjectCommand, HeadObjectOutputFilterSensitiveLog, HeadObjectRequestFilterSensitiveLog, IndexDocumentFilterSensitiveLog, InitiatorFilterSensitiveLog, InputSerializationFilterSensitiveLog, IntelligentTieringAndOperatorFilterSensitiveLog, IntelligentTieringConfigurationFilterSensitiveLog, IntelligentTieringFilterFilterSensitiveLog, InvalidObjectState, InventoryConfigurationFilterSensitiveLog, InventoryDestinationFilterSensitiveLog, InventoryEncryptionFilterSensitiveLog, InventoryFilterFilterSensitiveLog, InventoryS3BucketDestinationFilterSensitiveLog, InventoryScheduleFilterSensitiveLog, JSONInputFilterSensitiveLog, JSONOutputFilterSensitiveLog, JSONType, LambdaFunctionConfigurationFilterSensitiveLog, LifecycleExpirationFilterSensitiveLog, LifecycleRuleAndOperatorFilterSensitiveLog, LifecycleRuleFilter, LifecycleRuleFilterFilterSensitiveLog, LifecycleRuleFilterSensitiveLog, ListBucketAnalyticsConfigurationsCommand, ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog, ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog, ListBucketIntelligentTieringConfigurationsCommand, ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog, ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog, ListBucketInventoryConfigurationsCommand, ListBucketInventoryConfigurationsOutputFilterSensitiveLog, ListBucketInventoryConfigurationsRequestFilterSensitiveLog, ListBucketMetricsConfigurationsCommand, ListBucketMetricsConfigurationsOutputFilterSensitiveLog, ListBucketMetricsConfigurationsRequestFilterSensitiveLog, ListBucketsCommand, ListBucketsOutputFilterSensitiveLog, ListMultipartUploadsCommand, ListMultipartUploadsOutputFilterSensitiveLog, ListMultipartUploadsRequestFilterSensitiveLog, ListObjectVersionsCommand, ListObjectVersionsOutputFilterSensitiveLog, ListObjectVersionsRequestFilterSensitiveLog, ListObjectsCommand, ListObjectsOutputFilterSensitiveLog, ListObjectsRequestFilterSensitiveLog, ListObjectsV2Command, ListObjectsV2OutputFilterSensitiveLog, ListObjectsV2RequestFilterSensitiveLog, ListPartsCommand, ListPartsOutputFilterSensitiveLog, ListPartsRequestFilterSensitiveLog, LoggingEnabledFilterSensitiveLog, MetadataEntryFilterSensitiveLog, MetricsAndOperatorFilterSensitiveLog, MetricsConfigurationFilterSensitiveLog, MetricsFilter, MetricsFilterFilterSensitiveLog, MetricsFilterSensitiveLog, MultipartUploadFilterSensitiveLog, NoSuchBucket, NoSuchKey, NoSuchUpload, NoncurrentVersionExpirationFilterSensitiveLog, NoncurrentVersionTransitionFilterSensitiveLog, NotFound, NotificationConfigurationFilterFilterSensitiveLog, NotificationConfigurationFilterSensitiveLog, ObjectAlreadyInActiveTierError, ObjectAttributes, ObjectIdentifierFilterSensitiveLog, ObjectLockConfigurationFilterSensitiveLog, ObjectLockLegalHoldFilterSensitiveLog, ObjectLockRetentionFilterSensitiveLog, ObjectLockRuleFilterSensitiveLog, ObjectNotInActiveTierError, ObjectPartFilterSensitiveLog, ObjectVersionFilterSensitiveLog, OutputLocationFilterSensitiveLog, OutputSerializationFilterSensitiveLog, OwnerFilterSensitiveLog, OwnershipControlsFilterSensitiveLog, OwnershipControlsRuleFilterSensitiveLog, ParquetInputFilterSensitiveLog, PartFilterSensitiveLog, PolicyStatusFilterSensitiveLog, ProgressEventFilterSensitiveLog, ProgressFilterSensitiveLog, PublicAccessBlockConfigurationFilterSensitiveLog, PutBucketAccelerateConfigurationCommand, PutBucketAccelerateConfigurationRequestFilterSensitiveLog, PutBucketAclCommand, PutBucketAclRequestFilterSensitiveLog, PutBucketAnalyticsConfigurationCommand, PutBucketAnalyticsConfigurationRequestFilterSensitiveLog, PutBucketCorsCommand, PutBucketCorsRequestFilterSensitiveLog, PutBucketEncryptionCommand, PutBucketEncryptionRequestFilterSensitiveLog, PutBucketIntelligentTieringConfigurationCommand, PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog, PutBucketInventoryConfigurationCommand, PutBucketInventoryConfigurationRequestFilterSensitiveLog, PutBucketLifecycleConfigurationCommand, PutBucketLifecycleConfigurationRequestFilterSensitiveLog, PutBucketLoggingCommand, PutBucketLoggingRequestFilterSensitiveLog, PutBucketMetricsConfigurationCommand, PutBucketMetricsConfigurationRequestFilterSensitiveLog, PutBucketNotificationConfigurationCommand, PutBucketNotificationConfigurationRequestFilterSensitiveLog, PutBucketOwnershipControlsCommand, PutBucketOwnershipControlsRequestFilterSensitiveLog, PutBucketPolicyCommand, PutBucketPolicyRequestFilterSensitiveLog, PutBucketReplicationCommand, PutBucketReplicationRequestFilterSensitiveLog, PutBucketRequestPaymentCommand, PutBucketRequestPaymentRequestFilterSensitiveLog, PutBucketTaggingCommand, PutBucketTaggingRequestFilterSensitiveLog, PutBucketVersioningCommand, PutBucketVersioningRequestFilterSensitiveLog, PutBucketWebsiteCommand, PutBucketWebsiteRequestFilterSensitiveLog, PutObjectAclCommand, PutObjectAclOutputFilterSensitiveLog, PutObjectAclRequestFilterSensitiveLog, PutObjectCommand, PutObjectLegalHoldCommand, PutObjectLegalHoldOutputFilterSensitiveLog, PutObjectLegalHoldRequestFilterSensitiveLog, PutObjectLockConfigurationCommand, PutObjectLockConfigurationOutputFilterSensitiveLog, PutObjectLockConfigurationRequestFilterSensitiveLog, PutObjectOutputFilterSensitiveLog, PutObjectRequestFilterSensitiveLog, PutObjectRetentionCommand, PutObjectRetentionOutputFilterSensitiveLog, PutObjectRetentionRequestFilterSensitiveLog, PutObjectTaggingCommand, PutObjectTaggingOutputFilterSensitiveLog, PutObjectTaggingRequestFilterSensitiveLog, PutPublicAccessBlockCommand, PutPublicAccessBlockRequestFilterSensitiveLog, QueueConfigurationFilterSensitiveLog, QuoteFields, RecordsEventFilterSensitiveLog, RedirectAllRequestsToFilterSensitiveLog, RedirectFilterSensitiveLog, ReplicaModificationsFilterSensitiveLog, ReplicationConfigurationFilterSensitiveLog, ReplicationRuleAndOperatorFilterSensitiveLog, ReplicationRuleFilter, ReplicationRuleFilterFilterSensitiveLog, ReplicationRuleFilterSensitiveLog, ReplicationTimeFilterSensitiveLog, ReplicationTimeValueFilterSensitiveLog, RequestPaymentConfigurationFilterSensitiveLog, RequestProgressFilterSensitiveLog, RestoreObjectCommand, RestoreObjectOutputFilterSensitiveLog, RestoreObjectRequestFilterSensitiveLog, RestoreRequestFilterSensitiveLog, RestoreRequestType, RoutingRuleFilterSensitiveLog, S3, S3Client, S3KeyFilterFilterSensitiveLog, S3LocationFilterSensitiveLog, S3ServiceException, SSEKMSFilterSensitiveLog, SSES3FilterSensitiveLog, ScanRangeFilterSensitiveLog, SelectObjectContentCommand, SelectObjectContentEventStream, SelectObjectContentEventStreamFilterSensitiveLog, SelectObjectContentOutputFilterSensitiveLog, SelectObjectContentRequestFilterSensitiveLog, SelectParametersFilterSensitiveLog, ServerSideEncryptionByDefaultFilterSensitiveLog, ServerSideEncryptionConfigurationFilterSensitiveLog, ServerSideEncryptionRuleFilterSensitiveLog, SourceSelectionCriteriaFilterSensitiveLog, SseKmsEncryptedObjectsFilterSensitiveLog, StatsEventFilterSensitiveLog, StatsFilterSensitiveLog, StorageClassAnalysisDataExportFilterSensitiveLog, StorageClassAnalysisFilterSensitiveLog, TagFilterSensitiveLog, TaggingFilterSensitiveLog, TargetGrantFilterSensitiveLog, TieringFilterSensitiveLog, TopicConfigurationFilterSensitiveLog, TransitionFilterSensitiveLog, UploadPartCommand, UploadPartCopyCommand, UploadPartCopyOutputFilterSensitiveLog, UploadPartCopyRequestFilterSensitiveLog, UploadPartOutputFilterSensitiveLog, UploadPartRequestFilterSensitiveLog, VersioningConfigurationFilterSensitiveLog, WebsiteConfigurationFilterSensitiveLog, WriteGetObjectResponseCommand, WriteGetObjectResponseRequestFilterSensitiveLog, _ErrorFilterSensitiveLog, _ObjectFilterSensitiveLog, paginateListObjectsV2, paginateListParts, waitForBucketExists, waitForBucketNotExists, waitForObjectExists, waitForObjectNotExists, waitUntilBucketExists, waitUntilBucketNotExists, waitUntilObjectExists, waitUntilObjectNotExists };
