import { streamCollector } from '@aws-sdk/fetch-http-handler';
import { toBase64 } from '@aws-sdk/util-base64-browser';
import { toHex } from '@aws-sdk/util-hex-encoding';
import { toUtf8 } from '@aws-sdk/util-utf8-browser';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var getAwsChunkedEncodingStream = function (readableStream, options) {
    var base64Encoder = options.base64Encoder, bodyLengthChecker = options.bodyLengthChecker, checksumAlgorithmFn = options.checksumAlgorithmFn, checksumLocationName = options.checksumLocationName, streamHasher = options.streamHasher;
    var checksumRequired = base64Encoder !== undefined &&
        bodyLengthChecker !== undefined &&
        checksumAlgorithmFn !== undefined &&
        checksumLocationName !== undefined &&
        streamHasher !== undefined;
    var digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    var reader = readableStream.getReader();
    return new ReadableStream({
        pull: function (controller) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, value, done, checksum, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4, reader.read()];
                        case 1:
                            _a = _c.sent(), value = _a.value, done = _a.done;
                            if (!done) return [3, 4];
                            controller.enqueue("0\r\n");
                            if (!checksumRequired) return [3, 3];
                            _b = base64Encoder;
                            return [4, digest];
                        case 2:
                            checksum = _b.apply(void 0, [_c.sent()]);
                            controller.enqueue("".concat(checksumLocationName, ":").concat(checksum, "\r\n"));
                            controller.enqueue("\r\n");
                            _c.label = 3;
                        case 3:
                            controller.close();
                            return [3, 5];
                        case 4:
                            controller.enqueue("".concat((bodyLengthChecker(value) || 0).toString(16), "\r\n").concat(value, "\r\n"));
                            _c.label = 5;
                        case 5: return [2];
                    }
                });
            });
        },
    });
};

var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
var sdkStreamMixin = function (stream) {
    var _a, _b;
    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {
        var name_1 = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error("Unexpected stream implementation, expect Blob or ReadableStream, got ".concat(name_1));
    }
    var transformed = false;
    var transformToByteArray = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (transformed) {
                        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
                    }
                    transformed = true;
                    return [4, streamCollector(stream)];
                case 1: return [2, _a.sent()];
            }
        });
    }); };
    var blobToWebStream = function (blob) {
        if (typeof blob.stream !== "function") {
            throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\n" +
                "If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
    };
    return Object.assign(stream, {
        transformToByteArray: transformToByteArray,
        transformToString: function (encoding) { return __awaiter(void 0, void 0, void 0, function () {
            var buf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, transformToByteArray()];
                    case 1:
                        buf = _a.sent();
                        if (encoding === "base64") {
                            return [2, toBase64(buf)];
                        }
                        else if (encoding === "hex") {
                            return [2, toHex(buf)];
                        }
                        else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") {
                            return [2, toUtf8(buf)];
                        }
                        else if (typeof TextDecoder === "function") {
                            return [2, new TextDecoder(encoding).decode(buf)];
                        }
                        else {
                            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
                        }
                }
            });
        }); },
        transformToWebStream: function () {
            if (transformed) {
                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            transformed = true;
            if (isBlobInstance(stream)) {
                return blobToWebStream(stream);
            }
            else if (isReadableStreamInstance(stream)) {
                return stream;
            }
            else {
                throw new Error("Cannot transform payload to web stream, got ".concat(stream));
            }
        },
    });
};
var isBlobInstance = function (stream) { return typeof Blob === "function" && stream instanceof Blob; };
var isReadableStreamInstance = function (stream) {
    return typeof ReadableStream === "function" && stream instanceof ReadableStream;
};

export { getAwsChunkedEncodingStream, sdkStreamMixin };
