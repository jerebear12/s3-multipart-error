import { HttpRequest, HttpResponse } from '@aws-sdk/protocol-http';
import { validate } from '@aws-sdk/util-arn-parser';
import { getSuffixForArnEndpoint } from '@aws-sdk/middleware-bucket-endpoint';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

var CONTENT_LENGTH_HEADER = "content-length";
function checkContentLengthHeader() {
    var _this = this;
    return function (next, context) {
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var request, message;
            var _a;
            return __generator(this, function (_b) {
                request = args.request;
                if (HttpRequest.isInstance(request)) {
                    if (!request.headers[CONTENT_LENGTH_HEADER]) {
                        message = "Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.";
                        if (typeof ((_a = context === null || context === void 0 ? void 0 : context.logger) === null || _a === void 0 ? void 0 : _a.warn) === "function") {
                            context.logger.warn(message);
                        }
                        else {
                            console.warn(message);
                        }
                    }
                }
                return [2, next(__assign({}, args))];
            });
        }); };
    };
}
var checkContentLengthHeaderMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["CHECK_CONTENT_LENGTH_HEADER"],
    name: "getCheckContentLengthHeaderPlugin",
    override: true,
};
var getCheckContentLengthHeaderPlugin = function (unused) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
    },
}); };

var throw200ExceptionsMiddleware = function (config) {
    return function (next) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var result, response, statusCode, body, bodyBytes, bodyString, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, next(args)];
                    case 1:
                        result = _a.sent();
                        response = result.response;
                        if (!HttpResponse.isInstance(response))
                            return [2, result];
                        statusCode = response.statusCode, body = response.body;
                        if (statusCode < 200 || statusCode >= 300)
                            return [2, result];
                        return [4, collectBody(body, config)];
                    case 2:
                        bodyBytes = _a.sent();
                        return [4, collectBodyString(bodyBytes, config)];
                    case 3:
                        bodyString = _a.sent();
                        if (bodyBytes.length === 0) {
                            err = new Error("S3 aborted request");
                            err.name = "InternalError";
                            throw err;
                        }
                        if (bodyString && bodyString.match("<Error>")) {
                            response.statusCode = 400;
                        }
                        response.body = bodyBytes;
                        return [2, result];
                }
            });
        }); };
    };
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
    override: true,
};
var getThrow200ExceptionsPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    },
}); };

function validateBucketNameMiddleware() {
    var _this = this;
    return function (next) {
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var Bucket, err;
            return __generator(this, function (_a) {
                Bucket = args.input.Bucket;
                if (typeof Bucket === "string" && !validate(Bucket) && Bucket.indexOf("/") >= 0) {
                    err = new Error("Bucket name shouldn't contain '/', received '".concat(Bucket, "'"));
                    err.name = "InvalidBucketName";
                    throw err;
                }
                return [2, next(__assign({}, args))];
            });
        }); };
    };
}
var validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BUCKET_NAME"],
    name: "validateBucketNameMiddleware",
    override: true,
};
var getValidateBucketNamePlugin = function (unused) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
    },
}); };

var writeGetObjectResponseEndpointMiddleware = function (config) {
    return function (next, context) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var regionProvider, isCustomEndpoint, disableHostPrefix, region, request, input, hostname, _a, suffix;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        regionProvider = config.region, isCustomEndpoint = config.isCustomEndpoint, disableHostPrefix = config.disableHostPrefix;
                        return [4, regionProvider()];
                    case 1:
                        region = _b.sent();
                        request = args.request, input = args.input;
                        if (!HttpRequest.isInstance(request))
                            return [2, next(__assign({}, args))];
                        hostname = request.hostname;
                        if (hostname.endsWith("s3.amazonaws.com") || hostname.endsWith("s3-external-1.amazonaws.com")) {
                            return [2, next(__assign({}, args))];
                        }
                        if (!isCustomEndpoint) {
                            _a = __read(getSuffixForArnEndpoint(request.hostname), 2), suffix = _a[1];
                            hostname = "s3-object-lambda.".concat(region, ".").concat(suffix);
                        }
                        if (!disableHostPrefix && input.RequestRoute) {
                            hostname = "".concat(input.RequestRoute, ".").concat(hostname);
                        }
                        request.hostname = hostname;
                        context["signing_service"] = "s3-object-lambda";
                        if (config.runtime === "node" && !request.headers["content-length"]) {
                            request.headers["transfer-encoding"] = "chunked";
                        }
                        return [2, next(__assign({}, args))];
                }
            });
        }); };
    };
};
var writeGetObjectResponseEndpointMiddlewareOptions = {
    relation: "after",
    toMiddleware: "contentLengthMiddleware",
    tags: ["WRITE_GET_OBJECT_RESPONSE", "S3", "ENDPOINT"],
    name: "writeGetObjectResponseEndpointMiddleware",
    override: true,
};
var getWriteGetObjectResponseEndpointPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.addRelativeTo(writeGetObjectResponseEndpointMiddleware(config), writeGetObjectResponseEndpointMiddlewareOptions);
    },
}); };

export { checkContentLengthHeader, checkContentLengthHeaderMiddlewareOptions, getCheckContentLengthHeaderPlugin, getThrow200ExceptionsPlugin, getValidateBucketNamePlugin, getWriteGetObjectResponseEndpointPlugin, throw200ExceptionsMiddleware, throw200ExceptionsMiddlewareOptions, validateBucketNameMiddleware, validateBucketNameMiddlewareOptions, writeGetObjectResponseEndpointMiddleware, writeGetObjectResponseEndpointMiddlewareOptions };
